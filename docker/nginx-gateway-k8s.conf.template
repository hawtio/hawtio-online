# vim: set filetype=nginx:
js_import gateway from conf.d/nginx.js;

proxy_cache_path /var/cache/nginx/pods levels=1:2 keys_zone=pods:2m max_size=4m inactive=60m use_temp_path=off;
proxy_cache_path /var/cache/nginx/rbac levels=1:2 keys_zone=rbac:256k max_size=3m inactive=60m use_temp_path=off;
proxy_cache_path /var/cache/nginx/rbac2 levels=1:2 keys_zone=rbac2:256k max_size=3m inactive=60m use_temp_path=off;

map $uri $new {
    / /online/;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen              8443 ssl;
    server_name         localhost;
    ssl_certificate     /etc/tls/private/serving/tls.crt;
    ssl_certificate_key /etc/tls/private/serving/tls.key;
    absolute_redirect   off;
    gzip                on;
    root                /usr/share/nginx/html/;

    # Performance tuning
    subrequest_output_buffer_size ${NGINX_SUBREQUEST_OUTPUT_BUFFER_SIZE};
    client_body_buffer_size       ${NGINX_CLIENT_BODY_BUFFER_SIZE};
    proxy_buffers                 ${NGINX_PROXY_BUFFERS};

    # For debugging location rewrite
    #rewrite_log on;

    if ($new) {
        rewrite ^ $new redirect;
    }

    # Static content serving
    location /online {
        alias     /usr/share/nginx/html/online;
        try_files $uri$args $uri /online/index.html;
    }

    location /integration/ {
        alias     /usr/share/nginx/html/integration/;
        try_files $uri$args $uri /integration/index.html;
    }

    # Kubernetes master API reverse proxying
    location /master {
        proxy_pass                    https://kubernetes.default/;
        rewrite                       /master/(.*) /$1 break;
        proxy_pass_request_headers    on;
        proxy_pass_request_body       on;
        proxy_redirect                off;
        proxy_ssl_verify              on;
        proxy_ssl_trusted_certificate /var/run/secrets/kubernetes.io/serviceaccount/ca.crt;
        proxy_ssl_session_reuse       on;
        proxy_http_version            1.1;
        proxy_set_header Upgrade      $http_upgrade;
        proxy_set_header Connection   $connection_upgrade;
    }

    location /management {
        js_content gateway.proxyJolokiaAgent;
    }

    # Self-LocalSubjectAccessReview requests cache
    location /authorization {
        internal;
        proxy_pass                    https://kubernetes.default/;
        rewrite                       /authorization/([^/]+)/(.*) /apis/$1/v1/$2 break;
        proxy_set_header              Content-Type application/json;
        proxy_pass_request_headers    on;
        proxy_pass_request_body       on;
        proxy_redirect                off;
        proxy_ssl_verify              on;
        proxy_ssl_trusted_certificate /var/run/secrets/kubernetes.io/serviceaccount/ca.crt;
        proxy_ssl_session_reuse       on;
        proxy_cache                   rbac;
        proxy_cache_methods           POST;
        proxy_cache_key               $uri$is_args$args|$http_authorization;
        proxy_cache_valid             201 10s;
        proxy_ignore_headers          Cache-Control;
    }
    # Duplicated location, as it seems caching does not handle multiple sub-requests calling the same location
    # leading to different hash keys :(
    location /authorization2 {
        internal;
        proxy_pass                    https://kubernetes.default/;
        rewrite                       /authorization2/([^/]+)/(.*) /apis/$1/v1/$2 break;
        proxy_set_header              Content-Type application/json;
        proxy_pass_request_headers    on;
        proxy_pass_request_body       on;
        proxy_redirect                off;
        proxy_ssl_verify              on;
        proxy_ssl_trusted_certificate /var/run/secrets/kubernetes.io/serviceaccount/ca.crt;
        proxy_ssl_session_reuse       on;
        proxy_cache                   rbac2;
        proxy_cache_methods           POST;
        proxy_cache_key               $uri$is_args$args|$http_authorization;
        proxy_cache_valid             201 10s;
        proxy_ignore_headers          Cache-Control;
    }

    # Pod details requests cache
    location /podIP {
        internal;
        proxy_pass                    https://kubernetes.default/;
        rewrite                       /podIP/(.+)/(.+) /api/v1/namespaces/$1/pods/$2 break;
        proxy_pass_request_headers    on;
        proxy_redirect                off;
        proxy_ssl_verify              on;
        proxy_ssl_trusted_certificate /var/run/secrets/kubernetes.io/serviceaccount/ca.crt;
        proxy_ssl_session_reuse       on;
        proxy_cache                   pods;
        proxy_cache_valid             200 1m;
        proxy_ignore_headers          Cache-Control;
    }

    # Proxy pod addressed by podIP
    location ~ ^/proxy/(http|https):(.+):(\d+)/(.*)$ {
        internal;
        proxy_pass                $1://$2:$3/$4$is_args$args;
        proxy_ssl_verify          off;
        proxy_ssl_session_reuse   on;
        # Do not foward authorization header
        proxy_set_header          Authorization "";
    }

    # Get the OpenShift console URL
    location = /console {
        proxy_pass             https://kubernetes.default/;
        error_page             302 = @console_redirect;
        proxy_intercept_errors on;
    }

    location @console_redirect {
        add_header Location $upstream_http_location always;
        return 200;
    }
}
