{
  "request": {
    "type": "list"
  },
  "value": {
    "org.springframework.boot": {
      "name=healthEndpoint,type=Endpoint": {
        "op": {
          "isSensitive": {
            "args": [],
            "ret": "boolean",
            "desc": "Indicates whether the underlying endpoint exposes sensitive information"
          },
          "getEndpointClass": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Returns the class of the underlying endpoint"
          },
          "getData": {
            "args": [],
            "ret": "java.lang.Object",
            "desc": "Invoke the underlying endpoint"
          }
        },
        "attr": {
          "EndpointClass": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Returns the class of the underlying endpoint"
          },
          "Sensitive": {
            "rw": false,
            "type": "boolean",
            "desc": "Indicates whether the underlying endpoint exposes sensitive information"
          },
          "Data": {
            "rw": false,
            "type": "java.lang.Object",
            "desc": "Invoke the underlying endpoint"
          }
        },
        "class": "org.springframework.boot.actuate.endpoint.jmx.DataEndpointMBean",
        "desc": ""
      }
    },
    "JMImplementation": {
      "type=MBeanServerDelegate": {
        "attr": {
          "ImplementationName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "The JMX implementation name (the name of this product)"
          },
          "MBeanServerId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "The MBean server agent identification"
          },
          "ImplementationVersion": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "The JMX implementation version (the version of this product)."
          },
          "SpecificationVersion": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "The version of the JMX specification implemented by this product."
          },
          "SpecificationVendor": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "The vendor of the JMX specification implemented by this product."
          },
          "SpecificationName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "The full name of the JMX specification implemented by this product."
          },
          "ImplementationVendor": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "the JMX implementation vendor (the vendor of this product)."
          }
        },
        "class": "javax.management.MBeanServerDelegate",
        "desc": "Represents  the MBean server from the management point of view."
      }
    },
    "java.util.logging": {
      "type=Logging": {
        "op": {
          "getLoggerLevel": {
            "args": [
              {
                "name": "p0",
                "type": "java.lang.String",
                "desc": "p0"
              }
            ],
            "ret": "java.lang.String",
            "desc": "getLoggerLevel"
          },
          "getParentLoggerName": {
            "args": [
              {
                "name": "p0",
                "type": "java.lang.String",
                "desc": "p0"
              }
            ],
            "ret": "java.lang.String",
            "desc": "getParentLoggerName"
          },
          "setLoggerLevel": {
            "args": [
              {
                "name": "p0",
                "type": "java.lang.String",
                "desc": "p0"
              },
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": "p1"
              }
            ],
            "ret": "void",
            "desc": "setLoggerLevel"
          }
        },
        "attr": {
          "LoggerNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "LoggerNames"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          }
        },
        "class": "sun.management.ManagementFactoryHelper$PlatformLoggingImpl",
        "desc": "Information on the management interface of the MBean"
      }
    },
    "java.lang": {
      "name=PS Scavenge,type=GarbageCollector": {
        "attr": {
          "MemoryPoolNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "MemoryPoolNames"
          },
          "LastGcInfo": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "LastGcInfo"
          },
          "CollectionTime": {
            "rw": false,
            "type": "long",
            "desc": "CollectionTime"
          },
          "Valid": {
            "rw": false,
            "type": "boolean",
            "desc": "Valid"
          },
          "CollectionCount": {
            "rw": false,
            "type": "long",
            "desc": "CollectionCount"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          }
        },
        "class": "sun.management.GarbageCollectorImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "type=Threading": {
        "op": {
          "getThreadCpuTime": [
            {
              "args": [
                {
                  "name": "p0",
                  "type": "[J",
                  "desc": "p0"
                }
              ],
              "ret": "[J",
              "desc": "getThreadCpuTime"
            },
            {
              "args": [
                {
                  "name": "p0",
                  "type": "long",
                  "desc": "p0"
                }
              ],
              "ret": "long",
              "desc": "getThreadCpuTime"
            }
          ],
          "getThreadInfo": [
            {
              "args": [
                {
                  "name": "p0",
                  "type": "[J",
                  "desc": "p0"
                },
                {
                  "name": "p1",
                  "type": "int",
                  "desc": "p1"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "getThreadInfo"
            },
            {
              "args": [
                {
                  "name": "p0",
                  "type": "long",
                  "desc": "p0"
                }
              ],
              "ret": "javax.management.openmbean.CompositeData",
              "desc": "getThreadInfo"
            },
            {
              "args": [
                {
                  "name": "p0",
                  "type": "[J",
                  "desc": "p0"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "getThreadInfo"
            },
            {
              "args": [
                {
                  "name": "p0",
                  "type": "long",
                  "desc": "p0"
                },
                {
                  "name": "p1",
                  "type": "int",
                  "desc": "p1"
                }
              ],
              "ret": "javax.management.openmbean.CompositeData",
              "desc": "getThreadInfo"
            },
            {
              "args": [
                {
                  "name": "p0",
                  "type": "[J",
                  "desc": "p0"
                },
                {
                  "name": "p1",
                  "type": "boolean",
                  "desc": "p1"
                },
                {
                  "name": "p2",
                  "type": "boolean",
                  "desc": "p2"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "getThreadInfo"
            }
          ],
          "findDeadlockedThreads": {
            "args": [],
            "ret": "[J",
            "desc": "findDeadlockedThreads"
          },
          "getThreadAllocatedBytes": [
            {
              "args": [
                {
                  "name": "p0",
                  "type": "[J",
                  "desc": "p0"
                }
              ],
              "ret": "[J",
              "desc": "getThreadAllocatedBytes"
            },
            {
              "args": [
                {
                  "name": "p0",
                  "type": "long",
                  "desc": "p0"
                }
              ],
              "ret": "long",
              "desc": "getThreadAllocatedBytes"
            }
          ],
          "getThreadUserTime": [
            {
              "args": [
                {
                  "name": "p0",
                  "type": "[J",
                  "desc": "p0"
                }
              ],
              "ret": "[J",
              "desc": "getThreadUserTime"
            },
            {
              "args": [
                {
                  "name": "p0",
                  "type": "long",
                  "desc": "p0"
                }
              ],
              "ret": "long",
              "desc": "getThreadUserTime"
            }
          ],
          "findMonitorDeadlockedThreads": {
            "args": [],
            "ret": "[J",
            "desc": "findMonitorDeadlockedThreads"
          },
          "resetPeakThreadCount": {
            "args": [],
            "ret": "void",
            "desc": "resetPeakThreadCount"
          },
          "dumpAllThreads": {
            "args": [
              {
                "name": "p0",
                "type": "boolean",
                "desc": "p0"
              },
              {
                "name": "p1",
                "type": "boolean",
                "desc": "p1"
              }
            ],
            "ret": "[Ljavax.management.openmbean.CompositeData;",
            "desc": "dumpAllThreads"
          }
        },
        "attr": {
          "ThreadAllocatedMemorySupported": {
            "rw": false,
            "type": "boolean",
            "desc": "ThreadAllocatedMemorySupported"
          },
          "ThreadContentionMonitoringEnabled": {
            "rw": true,
            "type": "boolean",
            "desc": "ThreadContentionMonitoringEnabled"
          },
          "TotalStartedThreadCount": {
            "rw": false,
            "type": "long",
            "desc": "TotalStartedThreadCount"
          },
          "CurrentThreadCpuTimeSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "CurrentThreadCpuTimeSupported"
          },
          "CurrentThreadUserTime": {
            "rw": false,
            "type": "long",
            "desc": "CurrentThreadUserTime"
          },
          "PeakThreadCount": {
            "rw": false,
            "type": "int",
            "desc": "PeakThreadCount"
          },
          "AllThreadIds": {
            "rw": false,
            "type": "[J",
            "desc": "AllThreadIds"
          },
          "ThreadAllocatedMemoryEnabled": {
            "rw": true,
            "type": "boolean",
            "desc": "ThreadAllocatedMemoryEnabled"
          },
          "CurrentThreadCpuTime": {
            "rw": false,
            "type": "long",
            "desc": "CurrentThreadCpuTime"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          },
          "ThreadContentionMonitoringSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "ThreadContentionMonitoringSupported"
          },
          "ThreadCpuTimeSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "ThreadCpuTimeSupported"
          },
          "ThreadCount": {
            "rw": false,
            "type": "int",
            "desc": "ThreadCount"
          },
          "ThreadCpuTimeEnabled": {
            "rw": true,
            "type": "boolean",
            "desc": "ThreadCpuTimeEnabled"
          },
          "ObjectMonitorUsageSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "ObjectMonitorUsageSupported"
          },
          "SynchronizerUsageSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "SynchronizerUsageSupported"
          },
          "DaemonThreadCount": {
            "rw": false,
            "type": "int",
            "desc": "DaemonThreadCount"
          }
        },
        "class": "sun.management.ThreadImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "name=PS Old Gen,type=MemoryPool": {
        "op": {
          "resetPeakUsage": {
            "args": [],
            "ret": "void",
            "desc": "resetPeakUsage"
          }
        },
        "attr": {
          "Usage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "Usage"
          },
          "UsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "UsageThresholdCount"
          },
          "MemoryManagerNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "MemoryManagerNames"
          },
          "UsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdSupported"
          },
          "UsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "UsageThreshold"
          },
          "CollectionUsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "CollectionUsageThresholdCount"
          },
          "PeakUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "PeakUsage"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "UsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdExceeded"
          },
          "CollectionUsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "CollectionUsageThreshold"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          },
          "Type": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Type"
          },
          "Valid": {
            "rw": false,
            "type": "boolean",
            "desc": "Valid"
          },
          "CollectionUsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdSupported"
          },
          "CollectionUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "CollectionUsage"
          },
          "CollectionUsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdExceeded"
          }
        },
        "class": "sun.management.MemoryPoolImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "type=Memory": {
        "op": {
          "gc": {
            "args": [],
            "ret": "void",
            "desc": "gc"
          }
        },
        "attr": {
          "ObjectPendingFinalizationCount": {
            "rw": false,
            "type": "int",
            "desc": "ObjectPendingFinalizationCount"
          },
          "Verbose": {
            "rw": true,
            "type": "boolean",
            "desc": "Verbose"
          },
          "HeapMemoryUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "HeapMemoryUsage"
          },
          "NonHeapMemoryUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "NonHeapMemoryUsage"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          }
        },
        "class": "sun.management.MemoryImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "name=Metaspace,type=MemoryPool": {
        "op": {
          "resetPeakUsage": {
            "args": [],
            "ret": "void",
            "desc": "resetPeakUsage"
          }
        },
        "attr": {
          "Usage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "Usage"
          },
          "UsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "UsageThresholdCount"
          },
          "MemoryManagerNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "MemoryManagerNames"
          },
          "UsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdSupported"
          },
          "UsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "UsageThreshold"
          },
          "CollectionUsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "CollectionUsageThresholdCount"
          },
          "PeakUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "PeakUsage"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "UsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdExceeded"
          },
          "CollectionUsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "CollectionUsageThreshold"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          },
          "Type": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Type"
          },
          "Valid": {
            "rw": false,
            "type": "boolean",
            "desc": "Valid"
          },
          "CollectionUsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdSupported"
          },
          "CollectionUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "CollectionUsage"
          },
          "CollectionUsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdExceeded"
          }
        },
        "class": "sun.management.MemoryPoolImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "name=PS Survivor Space,type=MemoryPool": {
        "op": {
          "resetPeakUsage": {
            "args": [],
            "ret": "void",
            "desc": "resetPeakUsage"
          }
        },
        "attr": {
          "Usage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "Usage"
          },
          "UsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "UsageThresholdCount"
          },
          "MemoryManagerNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "MemoryManagerNames"
          },
          "UsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdSupported"
          },
          "UsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "UsageThreshold"
          },
          "CollectionUsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "CollectionUsageThresholdCount"
          },
          "PeakUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "PeakUsage"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "UsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdExceeded"
          },
          "CollectionUsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "CollectionUsageThreshold"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          },
          "Type": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Type"
          },
          "Valid": {
            "rw": false,
            "type": "boolean",
            "desc": "Valid"
          },
          "CollectionUsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdSupported"
          },
          "CollectionUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "CollectionUsage"
          },
          "CollectionUsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdExceeded"
          }
        },
        "class": "sun.management.MemoryPoolImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "type=OperatingSystem": {
        "attr": {
          "OpenFileDescriptorCount": {
            "rw": false,
            "type": "long",
            "desc": "OpenFileDescriptorCount"
          },
          "CommittedVirtualMemorySize": {
            "rw": false,
            "type": "long",
            "desc": "CommittedVirtualMemorySize"
          },
          "FreePhysicalMemorySize": {
            "rw": false,
            "type": "long",
            "desc": "FreePhysicalMemorySize"
          },
          "SystemLoadAverage": {
            "rw": false,
            "type": "double",
            "desc": "SystemLoadAverage"
          },
          "Arch": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Arch"
          },
          "ProcessCpuLoad": {
            "rw": false,
            "type": "double",
            "desc": "ProcessCpuLoad"
          },
          "FreeSwapSpaceSize": {
            "rw": false,
            "type": "long",
            "desc": "FreeSwapSpaceSize"
          },
          "TotalPhysicalMemorySize": {
            "rw": false,
            "type": "long",
            "desc": "TotalPhysicalMemorySize"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          },
          "TotalSwapSpaceSize": {
            "rw": false,
            "type": "long",
            "desc": "TotalSwapSpaceSize"
          },
          "ProcessCpuTime": {
            "rw": false,
            "type": "long",
            "desc": "ProcessCpuTime"
          },
          "MaxFileDescriptorCount": {
            "rw": false,
            "type": "long",
            "desc": "MaxFileDescriptorCount"
          },
          "SystemCpuLoad": {
            "rw": false,
            "type": "double",
            "desc": "SystemCpuLoad"
          },
          "Version": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Version"
          },
          "AvailableProcessors": {
            "rw": false,
            "type": "int",
            "desc": "AvailableProcessors"
          }
        },
        "class": "sun.management.OperatingSystemImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "name=PS Eden Space,type=MemoryPool": {
        "op": {
          "resetPeakUsage": {
            "args": [],
            "ret": "void",
            "desc": "resetPeakUsage"
          }
        },
        "attr": {
          "Usage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "Usage"
          },
          "UsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "UsageThresholdCount"
          },
          "MemoryManagerNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "MemoryManagerNames"
          },
          "UsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdSupported"
          },
          "UsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "UsageThreshold"
          },
          "CollectionUsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "CollectionUsageThresholdCount"
          },
          "PeakUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "PeakUsage"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "UsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdExceeded"
          },
          "CollectionUsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "CollectionUsageThreshold"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          },
          "Type": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Type"
          },
          "Valid": {
            "rw": false,
            "type": "boolean",
            "desc": "Valid"
          },
          "CollectionUsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdSupported"
          },
          "CollectionUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "CollectionUsage"
          },
          "CollectionUsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdExceeded"
          }
        },
        "class": "sun.management.MemoryPoolImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "name=CodeCacheManager,type=MemoryManager": {
        "attr": {
          "MemoryPoolNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "MemoryPoolNames"
          },
          "Valid": {
            "rw": false,
            "type": "boolean",
            "desc": "Valid"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          }
        },
        "class": "sun.management.MemoryManagerImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "name=Code Cache,type=MemoryPool": {
        "op": {
          "resetPeakUsage": {
            "args": [],
            "ret": "void",
            "desc": "resetPeakUsage"
          }
        },
        "attr": {
          "Usage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "Usage"
          },
          "UsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "UsageThresholdCount"
          },
          "MemoryManagerNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "MemoryManagerNames"
          },
          "UsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdSupported"
          },
          "UsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "UsageThreshold"
          },
          "CollectionUsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "CollectionUsageThresholdCount"
          },
          "PeakUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "PeakUsage"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "UsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdExceeded"
          },
          "CollectionUsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "CollectionUsageThreshold"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          },
          "Type": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Type"
          },
          "Valid": {
            "rw": false,
            "type": "boolean",
            "desc": "Valid"
          },
          "CollectionUsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdSupported"
          },
          "CollectionUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "CollectionUsage"
          },
          "CollectionUsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdExceeded"
          }
        },
        "class": "sun.management.MemoryPoolImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "name=Compressed Class Space,type=MemoryPool": {
        "op": {
          "resetPeakUsage": {
            "args": [],
            "ret": "void",
            "desc": "resetPeakUsage"
          }
        },
        "attr": {
          "Usage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "Usage"
          },
          "UsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "UsageThresholdCount"
          },
          "MemoryManagerNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "MemoryManagerNames"
          },
          "UsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdSupported"
          },
          "UsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "UsageThreshold"
          },
          "CollectionUsageThresholdCount": {
            "rw": false,
            "type": "long",
            "desc": "CollectionUsageThresholdCount"
          },
          "PeakUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "PeakUsage"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "UsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "UsageThresholdExceeded"
          },
          "CollectionUsageThreshold": {
            "rw": true,
            "type": "long",
            "desc": "CollectionUsageThreshold"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          },
          "Type": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Type"
          },
          "Valid": {
            "rw": false,
            "type": "boolean",
            "desc": "Valid"
          },
          "CollectionUsageThresholdSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdSupported"
          },
          "CollectionUsage": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "CollectionUsage"
          },
          "CollectionUsageThresholdExceeded": {
            "rw": false,
            "type": "boolean",
            "desc": "CollectionUsageThresholdExceeded"
          }
        },
        "class": "sun.management.MemoryPoolImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "type=ClassLoading": {
        "attr": {
          "LoadedClassCount": {
            "rw": false,
            "type": "int",
            "desc": "LoadedClassCount"
          },
          "UnloadedClassCount": {
            "rw": false,
            "type": "long",
            "desc": "UnloadedClassCount"
          },
          "Verbose": {
            "rw": true,
            "type": "boolean",
            "desc": "Verbose"
          },
          "TotalLoadedClassCount": {
            "rw": false,
            "type": "long",
            "desc": "TotalLoadedClassCount"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          }
        },
        "class": "sun.management.ClassLoadingImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "type=Compilation": {
        "attr": {
          "CompilationTimeMonitoringSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "CompilationTimeMonitoringSupported"
          },
          "TotalCompilationTime": {
            "rw": false,
            "type": "long",
            "desc": "TotalCompilationTime"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          }
        },
        "class": "sun.management.CompilationImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "name=PS MarkSweep,type=GarbageCollector": {
        "attr": {
          "MemoryPoolNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "MemoryPoolNames"
          },
          "LastGcInfo": {
            "rw": false,
            "type": "javax.management.openmbean.CompositeData",
            "desc": "LastGcInfo"
          },
          "CollectionTime": {
            "rw": false,
            "type": "long",
            "desc": "CollectionTime"
          },
          "Valid": {
            "rw": false,
            "type": "boolean",
            "desc": "Valid"
          },
          "CollectionCount": {
            "rw": false,
            "type": "long",
            "desc": "CollectionCount"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          }
        },
        "class": "sun.management.GarbageCollectorImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "name=Metaspace Manager,type=MemoryManager": {
        "attr": {
          "MemoryPoolNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "MemoryPoolNames"
          },
          "Valid": {
            "rw": false,
            "type": "boolean",
            "desc": "Valid"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          }
        },
        "class": "sun.management.MemoryManagerImpl",
        "desc": "Information on the management interface of the MBean"
      },
      "type=Runtime": {
        "attr": {
          "SpecVendor": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "SpecVendor"
          },
          "ClassPath": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "ClassPath"
          },
          "InputArguments": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "InputArguments"
          },
          "Uptime": {
            "rw": false,
            "type": "long",
            "desc": "Uptime"
          },
          "VmName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "VmName"
          },
          "StartTime": {
            "rw": false,
            "type": "long",
            "desc": "StartTime"
          },
          "VmVersion": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "VmVersion"
          },
          "SpecName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "SpecName"
          },
          "ManagementSpecVersion": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "ManagementSpecVersion"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          },
          "VmVendor": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "VmVendor"
          },
          "LibraryPath": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "LibraryPath"
          },
          "BootClassPath": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "BootClassPath"
          },
          "SpecVersion": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "SpecVersion"
          },
          "SystemProperties": {
            "rw": false,
            "type": "javax.management.openmbean.TabularData",
            "desc": "SystemProperties"
          },
          "BootClassPathSupported": {
            "rw": false,
            "type": "boolean",
            "desc": "BootClassPathSupported"
          }
        },
        "class": "sun.management.RuntimeImpl",
        "desc": "Information on the management interface of the MBean"
      }
    },
    "org.apache.camel": {
      "context=MyCamel,name=\"MyCamel\",type=health": {
        "op": {
          "getIsHealthy": {
            "args": [],
            "ret": "boolean",
            "desc": "IsHealthy"
          },
          "details": {
            "args": [],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Registered Health Checks Details"
          },
          "invoke": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Invoke an Health Check by ID"
          },
          "getHealthChecksIDs": {
            "args": [],
            "ret": "java.util.Collection",
            "desc": "HealthChecksIDs"
          }
        },
        "attr": {
          "HealthChecksIDs": {
            "rw": false,
            "type": "java.util.Collection",
            "desc": "Registered Health Checks IDs"
          },
          "IsHealthy": {
            "rw": false,
            "type": "boolean",
            "desc": "Application Health"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedCamelHealth",
        "desc": ""
      },
      "context=MyCamel,name=DefaultEndpointRegistry,type=services": {
        "op": {
          "getDynamicSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "DynamicSize"
          },
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Service"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Service"
          },
          "isSuspended": {
            "args": [],
            "ret": "boolean",
            "desc": "Suspended"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Service"
          },
          "getStaticSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "StaticSize"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "purge": {
            "args": [],
            "ret": "void",
            "desc": "Purges the cache"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "isSupportSuspension": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportSuspension"
          },
          "getSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "Size"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Service"
          },
          "getMaximumCacheSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "MaximumCacheSize"
          },
          "listEndpoints": {
            "args": [],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Lists all the endpoints in the registry (url)"
          },
          "isStaticService": {
            "args": [],
            "ret": "boolean",
            "desc": "StaticService"
          },
          "getSource": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Source"
          },
          "getServiceType": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ServiceType"
          }
        },
        "attr": {
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "Size": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Number of total endpoints cached"
          },
          "SupportSuspension": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service supports suspension"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "StaticService": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is static"
          },
          "Source": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Source"
          },
          "StaticSize": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Number of static endpoints cached"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service State"
          },
          "ServiceType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service Type"
          },
          "MaximumCacheSize": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Maximum cache size (capacity)"
          },
          "Suspended": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is suspended"
          },
          "DynamicSize": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Number of dynamic endpoints cached"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedEndpointRegistry",
        "desc": "Managed EndpointRegistry"
      },
      "context=MyCamel,name=\"simple-route\",type=routes": {
        "op": {
          "getLastProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "LastProcessingTime"
          },
          "getExchangesCompleted": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesCompleted"
          },
          "getDeltaProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "DeltaProcessingTime"
          },
          "getStartTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "StartTimestamp"
          },
          "getOldestInflightExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "OldestInflightExchangeId"
          },
          "dumpStatsAsXml": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Dumps the statistics as XML"
          },
          "getLastExchangeFailureTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "LastExchangeFailureTimestamp"
          },
          "dumpRouteAsXml": [
            {
              "args": [
                {
                  "name": "p1",
                  "type": "boolean",
                  "desc": ""
                }
              ],
              "ret": "java.lang.String",
              "desc": "Dumps the route as XML"
            },
            {
              "args": [],
              "ret": "java.lang.String",
              "desc": "Dumps the route as XML"
            }
          ],
          "setTracing": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Tracing"
          },
          "suspend": [
            {
              "args": [],
              "ret": "void",
              "desc": "Suspend route"
            },
            {
              "args": [
                {
                  "name": "p1",
                  "type": "long",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Suspend route (using timeout in seconds)"
            }
          ],
          "getTracing": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "Tracing"
          },
          "getLastError": {
            "args": [],
            "ret": "org.apache.camel.spi.RouteError",
            "desc": "LastError"
          },
          "getHasRouteController": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "HasRouteController"
          },
          "getMinProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MinProcessingTime"
          },
          "getLoad15": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Load15"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getExchangesTotal": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesTotal"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "stop": [
            {
              "args": [
                {
                  "name": "p1",
                  "type": "java.lang.Long",
                  "desc": ""
                },
                {
                  "name": "p2",
                  "type": "java.lang.Boolean",
                  "desc": ""
                }
              ],
              "ret": "boolean",
              "desc": "Stop route, abort stop after timeout (in seconds)"
            },
            {
              "args": [
                {
                  "name": "p1",
                  "type": "long",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Stop route (using timeout in seconds)"
            },
            {
              "args": [],
              "ret": "void",
              "desc": "Stop route"
            }
          ],
          "reset": [
            {
              "args": [],
              "ret": "void",
              "desc": "Reset counters"
            },
            {
              "args": [
                {
                  "name": "p1",
                  "type": "boolean",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Reset counters"
            }
          ],
          "getFirstExchangeCompletedExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "FirstExchangeCompletedExchangeId"
          },
          "getLastExchangeCompletedTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "LastExchangeCompletedTimestamp"
          },
          "getOldestInflightDuration": {
            "args": [],
            "ret": "java.lang.Long",
            "desc": "OldestInflightDuration"
          },
          "shutdown": [
            {
              "args": [
                {
                  "name": "p1",
                  "type": "long",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Shutdown route (using timeout in seconds)"
            },
            {
              "args": [],
              "ret": "void",
              "desc": "Shutdown route"
            }
          ],
          "getUptime": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Uptime"
          },
          "getEndpointUri": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "EndpointUri"
          },
          "getRoutePolicyList": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RoutePolicyList"
          },
          "getTotalProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "TotalProcessingTime"
          },
          "getDescription": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Description"
          },
          "getLoad05": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Load05"
          },
          "remove": {
            "args": [],
            "ret": "boolean",
            "desc": "Remove route (must be stopped)"
          },
          "dumpRouteStatsAsXml": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Dumps the routes stats as XML"
          },
          "getFirstExchangeCompletedTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "FirstExchangeCompletedTimestamp"
          },
          "getLastExchangeFailureExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "LastExchangeFailureExchangeId"
          },
          "getMaxProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MaxProcessingTime"
          },
          "getLastExchangeCompletedExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "LastExchangeCompletedExchangeId"
          },
          "getInflightExchanges": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "InflightExchanges"
          },
          "setStatisticsEnabled": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "StatisticsEnabled"
          },
          "getUptimeMillis": {
            "args": [],
            "ret": "long",
            "desc": "UptimeMillis"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Route"
          },
          "getMeanProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MeanProcessingTime"
          },
          "restart": [
            {
              "args": [
                {
                  "name": "p1",
                  "type": "long",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Restarts route (using delay in seconds before starting)"
            },
            {
              "args": [],
              "ret": "void",
              "desc": "Restarts route (1 second delay before starting)"
            }
          ],
          "getExternalRedeliveries": {
            "args": [],
            "ret": "long",
            "desc": "ExternalRedeliveries"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start route"
          },
          "createRouteStaticEndpointJson": [
            {
              "args": [
                {
                  "name": "p1",
                  "type": "boolean",
                  "desc": ""
                }
              ],
              "ret": "java.lang.String",
              "desc": "Returns the JSON representation of all the static endpoints (and possible dynamic) defined in this route"
            },
            {
              "args": [],
              "ret": "java.lang.String",
              "desc": "Returns the JSON representation of all the static and dynamic endpoints defined in this route"
            }
          ],
          "getFirstExchangeFailureExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "FirstExchangeFailureExchangeId"
          },
          "getResetTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "ResetTimestamp"
          },
          "getExchangesFailed": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesFailed"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "getMessageHistory": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "MessageHistory"
          },
          "getLoad01": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Load01"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "getFailuresHandled": {
            "args": [],
            "ret": "long",
            "desc": "FailuresHandled"
          },
          "getExchangesInflight": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesInflight"
          },
          "getRedeliveries": {
            "args": [],
            "ret": "long",
            "desc": "Redeliveries"
          },
          "isStatisticsEnabled": {
            "args": [],
            "ret": "boolean",
            "desc": "StatisticsEnabled"
          },
          "getFirstExchangeFailureTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "FirstExchangeFailureTimestamp"
          },
          "updateRouteFromXml": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Updates the route from XML"
          }
        },
        "attr": {
          "StatisticsEnabled": {
            "rw": true,
            "type": "boolean",
            "desc": "Statistics enabled"
          },
          "EndpointUri": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route Endpoint URI"
          },
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "LastProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Last Processing Time [milliseconds]"
          },
          "ExchangesCompleted": {
            "rw": false,
            "type": "long",
            "desc": "Number of completed exchanges"
          },
          "ExchangesFailed": {
            "rw": false,
            "type": "long",
            "desc": "Number of failed exchanges"
          },
          "Description": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route Description"
          },
          "FirstExchangeCompletedExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "First Exchange Completed ExchangeId"
          },
          "StartTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Timestamp when the stats was initially started"
          },
          "FirstExchangeCompletedTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "First Exchange Completed Timestamp"
          },
          "LastExchangeFailureTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Last Exchange Failed Timestamp"
          },
          "MaxProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Max Processing Time [milliseconds]"
          },
          "LastExchangeCompletedTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Last Exchange Completed Timestamp"
          },
          "Load15": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Average load over the last fifteen minutes"
          },
          "DeltaProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Delta Processing Time [milliseconds]"
          },
          "OldestInflightDuration": {
            "rw": false,
            "type": "java.lang.Long",
            "desc": "Oldest inflight exchange duration"
          },
          "ExternalRedeliveries": {
            "rw": false,
            "type": "long",
            "desc": "Number of external initiated redeliveries (such as from JMS broker)"
          },
          "UptimeMillis": {
            "rw": false,
            "type": "long",
            "desc": "Route Uptime [milliseconds]"
          },
          "ExchangesTotal": {
            "rw": false,
            "type": "long",
            "desc": "Total number of exchanges"
          },
          "ResetTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Timestamp when the stats was last reset or initially started"
          },
          "ExchangesInflight": {
            "rw": false,
            "type": "long",
            "desc": "Number of inflight exchanges"
          },
          "MeanProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Mean Processing Time [milliseconds]"
          },
          "HasRouteController": {
            "rw": false,
            "type": "java.lang.Boolean",
            "desc": "Route controller"
          },
          "LastExchangeFailureExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Last Exchange Failed ExchangeId"
          },
          "FirstExchangeFailureExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "First Exchange Failed ExchangeId"
          },
          "Uptime": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route Uptime [human readable text]"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "FirstExchangeFailureTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "First Exchange Failed Timestamp"
          },
          "TotalProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Total Processing Time [milliseconds]"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "RoutePolicyList": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route Policy List"
          },
          "FailuresHandled": {
            "rw": false,
            "type": "long",
            "desc": "Number of failures handled"
          },
          "MessageHistory": {
            "rw": false,
            "type": "java.lang.Boolean",
            "desc": "Message History"
          },
          "LastError": {
            "rw": false,
            "type": "org.apache.camel.spi.RouteError",
            "desc": "Last error"
          },
          "Load05": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Average load over the last five minutes"
          },
          "OldestInflightExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Oldest inflight exchange id"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route State"
          },
          "InflightExchanges": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Current number of inflight Exchanges"
          },
          "Redeliveries": {
            "rw": false,
            "type": "long",
            "desc": "Number of redeliveries (internal only)"
          },
          "MinProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Min Processing Time [milliseconds]"
          },
          "LastExchangeCompletedExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Last Exchange Completed ExchangeId"
          },
          "Tracing": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "Tracing"
          },
          "Load01": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Average load over the last minute"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedSuspendableRoute",
        "desc": "Managed Suspendable Route"
      },
      "context=MyCamel,name=TimerConsumer(0x1e225820),type=consumers": {
        "op": {
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Service"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Service"
          },
          "getEndpointUri": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "EndpointUri"
          },
          "isSuspended": {
            "args": [],
            "ret": "boolean",
            "desc": "Suspended"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Service"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "isSupportSuspension": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportSuspension"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Service"
          },
          "isStaticService": {
            "args": [],
            "ret": "boolean",
            "desc": "StaticService"
          },
          "getInflightExchanges": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "InflightExchanges"
          },
          "getServiceType": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ServiceType"
          }
        },
        "attr": {
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "EndpointUri": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Endpoint URI"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service State"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "ServiceType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service Type"
          },
          "InflightExchanges": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Current number of inflight Exchanges"
          },
          "SupportSuspension": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service supports suspension"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "Suspended": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is suspended"
          },
          "StaticService": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is static"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedConsumer",
        "desc": "Managed Consumer"
      },
      "context=MyCamel,name=\"route-log\",type=processors": {
        "op": {
          "getLastProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "LastProcessingTime"
          },
          "getExchangesCompleted": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesCompleted"
          },
          "explain": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Explain how this processor is configured"
          },
          "getDeltaProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "DeltaProcessingTime"
          },
          "getIndex": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "Index"
          },
          "getTotalProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "TotalProcessingTime"
          },
          "getStartTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "StartTimestamp"
          },
          "dumpStatsAsXml": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Dumps the statistics as XML"
          },
          "getLastExchangeFailureTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "LastExchangeFailureTimestamp"
          },
          "getLogName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "LogName"
          },
          "getFirstExchangeCompletedTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "FirstExchangeCompletedTimestamp"
          },
          "getLastExchangeFailureExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "LastExchangeFailureExchangeId"
          },
          "getMarker": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Marker"
          },
          "getMaxProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MaxProcessingTime"
          },
          "getLoggingLevel": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "LoggingLevel"
          },
          "getLastExchangeCompletedExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "LastExchangeCompletedExchangeId"
          },
          "informationJson": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Processor information as JSon"
          },
          "setStatisticsEnabled": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "StatisticsEnabled"
          },
          "getSupportExtendedInformation": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "SupportExtendedInformation"
          },
          "getProcessorId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ProcessorId"
          },
          "getMinProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MinProcessingTime"
          },
          "getMeanProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MeanProcessingTime"
          },
          "getExternalRedeliveries": {
            "args": [],
            "ret": "long",
            "desc": "ExternalRedeliveries"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Processor"
          },
          "getFirstExchangeFailureExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "FirstExchangeFailureExchangeId"
          },
          "getMessage": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Message"
          },
          "getResetTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "ResetTimestamp"
          },
          "getExchangesFailed": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesFailed"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getExchangesTotal": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesTotal"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Processor"
          },
          "getFailuresHandled": {
            "args": [],
            "ret": "long",
            "desc": "FailuresHandled"
          },
          "getExchangesInflight": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesInflight"
          },
          "reset": {
            "args": [],
            "ret": "void",
            "desc": "Reset counters"
          },
          "dumpProcessorAsXml": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Dumps the processor as XML"
          },
          "getRedeliveries": {
            "args": [],
            "ret": "long",
            "desc": "Redeliveries"
          },
          "getFirstExchangeCompletedExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "FirstExchangeCompletedExchangeId"
          },
          "isStatisticsEnabled": {
            "args": [],
            "ret": "boolean",
            "desc": "StatisticsEnabled"
          },
          "getLastExchangeCompletedTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "LastExchangeCompletedTimestamp"
          },
          "getFirstExchangeFailureTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "FirstExchangeFailureTimestamp"
          }
        },
        "attr": {
          "StatisticsEnabled": {
            "rw": true,
            "type": "boolean",
            "desc": "Statistics enabled"
          },
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "LastProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Last Processing Time [milliseconds]"
          },
          "ExchangesCompleted": {
            "rw": false,
            "type": "long",
            "desc": "Number of completed exchanges"
          },
          "ExchangesFailed": {
            "rw": false,
            "type": "long",
            "desc": "Number of failed exchanges"
          },
          "FirstExchangeCompletedExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "First Exchange Completed ExchangeId"
          },
          "Message": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "The log message (uses simple language)"
          },
          "StartTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Timestamp when the stats was initially started"
          },
          "FirstExchangeCompletedTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "First Exchange Completed Timestamp"
          },
          "LastExchangeFailureTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Last Exchange Failed Timestamp"
          },
          "Index": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Processor Index"
          },
          "MaxProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Max Processing Time [milliseconds]"
          },
          "LastExchangeCompletedTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Last Exchange Completed Timestamp"
          },
          "DeltaProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Delta Processing Time [milliseconds]"
          },
          "ExternalRedeliveries": {
            "rw": false,
            "type": "long",
            "desc": "Number of external initiated redeliveries (such as from JMS broker)"
          },
          "LogName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "The name of the logger"
          },
          "ExchangesTotal": {
            "rw": false,
            "type": "long",
            "desc": "Total number of exchanges"
          },
          "ResetTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Timestamp when the stats was last reset or initially started"
          },
          "ExchangesInflight": {
            "rw": false,
            "type": "long",
            "desc": "Number of inflight exchanges"
          },
          "MeanProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Mean Processing Time [milliseconds]"
          },
          "LastExchangeFailureExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Last Exchange Failed ExchangeId"
          },
          "LoggingLevel": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "The logging level"
          },
          "FirstExchangeFailureExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "First Exchange Failed ExchangeId"
          },
          "ProcessorId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Processor ID"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "FirstExchangeFailureTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "First Exchange Failed Timestamp"
          },
          "TotalProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Total Processing Time [milliseconds]"
          },
          "SupportExtendedInformation": {
            "rw": false,
            "type": "java.lang.Boolean",
            "desc": "Whether this processor supports extended JMX information"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "Marker": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "To use slf4j marker"
          },
          "FailuresHandled": {
            "rw": false,
            "type": "long",
            "desc": "Number of failures handled"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Processor State"
          },
          "Redeliveries": {
            "rw": false,
            "type": "long",
            "desc": "Number of redeliveries (internal only)"
          },
          "MinProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Min Processing Time [milliseconds]"
          },
          "LastExchangeCompletedExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Last Exchange Completed ExchangeId"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedLog",
        "desc": "Managed Log"
      },
      "context=MyCamel,name=DefaultRuntimeCamelCatalog,type=services": {
        "op": {
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Service"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Service"
          },
          "isSuspended": {
            "args": [],
            "ret": "boolean",
            "desc": "Suspended"
          },
          "modelJSonSchema": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Returns the model information as JSon format"
          },
          "componentJSonSchema": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Returns the component information as JSon format"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Service"
          },
          "dataFormatJSonSchema": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Returns the data format information as JSon format."
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "isSupportSuspension": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportSuspension"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Service"
          },
          "languageJSonSchema": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Returns the language information as JSon format"
          },
          "isStaticService": {
            "args": [],
            "ret": "boolean",
            "desc": "StaticService"
          },
          "getServiceType": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ServiceType"
          }
        },
        "attr": {
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service State"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "ServiceType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service Type"
          },
          "SupportSuspension": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service supports suspension"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "Suspended": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is suspended"
          },
          "StaticService": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is static"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedRuntimeCamelCatalog",
        "desc": "Managed RuntimeCamelCatalog"
      },
      "context=MyCamel,name=\"spring-event\",type=components": {
        "op": {
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "explain": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Explain how this component is configured"
          },
          "getComponentName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ComponentName"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "isVerifySupported": {
            "args": [],
            "ret": "boolean",
            "desc": "VerifySupported"
          },
          "informationJson": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Component information as JSon"
          },
          "verify": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.util.Map",
                "desc": ""
              }
            ],
            "ret": "org.apache.camel.component.extension.ComponentVerifierExtension$Result",
            "desc": "Verify options against a given scope"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          }
        },
        "attr": {
          "VerifySupported": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this component support verification (parameters or connectivity)"
          },
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Component State"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "ComponentName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Component Name"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedComponent",
        "desc": "Managed Component"
      },
      "context=MyCamel,name=DefaultValidatorRegistry,type=services": {
        "op": {
          "getDynamicSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "DynamicSize"
          },
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Service"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Service"
          },
          "isSuspended": {
            "args": [],
            "ret": "boolean",
            "desc": "Suspended"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Service"
          },
          "getStaticSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "StaticSize"
          },
          "listValidators": {
            "args": [],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Lists all the validators in the registry"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "purge": {
            "args": [],
            "ret": "void",
            "desc": "Purges the cache"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "isSupportSuspension": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportSuspension"
          },
          "getSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "Size"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Service"
          },
          "getMaximumCacheSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "MaximumCacheSize"
          },
          "isStaticService": {
            "args": [],
            "ret": "boolean",
            "desc": "StaticService"
          },
          "getSource": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Source"
          },
          "getServiceType": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ServiceType"
          }
        },
        "attr": {
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "Size": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Number of total validators cached"
          },
          "SupportSuspension": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service supports suspension"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "StaticService": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is static"
          },
          "Source": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Source"
          },
          "StaticSize": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Number of static validators cached"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service State"
          },
          "ServiceType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service Type"
          },
          "MaximumCacheSize": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Maximum cache size (capacity)"
          },
          "Suspended": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is suspended"
          },
          "DynamicSize": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Number of dynamic validators cached"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedValidatorRegistry",
        "desc": "Managed ValidatorRegistry"
      },
      "context=MyCamel,name=BacklogDebugger,type=tracer": {
        "op": {
          "getSuspendedBreakpointNodeIds": {
            "args": [],
            "ret": "java.util.Set",
            "desc": "Return the node ids which is currently suspended"
          },
          "getDebugCounter": {
            "args": [],
            "ret": "long",
            "desc": "DebugCounter"
          },
          "resetDebugCounter": {
            "args": [],
            "ret": "void",
            "desc": "Resets the debug counter"
          },
          "setMessageBodyOnBreakpoint": [
            {
              "args": [
                {
                  "name": "p1",
                  "type": "java.lang.String",
                  "desc": ""
                },
                {
                  "name": "p2",
                  "type": "java.lang.Object",
                  "desc": ""
                },
                {
                  "name": "p3",
                  "type": "java.lang.String",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Updates the message body (with a new type) on the suspended breakpoint at the given node id"
            },
            {
              "args": [
                {
                  "name": "p1",
                  "type": "java.lang.String",
                  "desc": ""
                },
                {
                  "name": "p2",
                  "type": "java.lang.Object",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Updates the message body (uses same type as old body) on the suspended breakpoint at the given node id"
            }
          ],
          "removeBreakpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Remote the breakpoint from the given node id (will resume suspend breakpoint first)"
          },
          "getFallbackTimeout": {
            "args": [],
            "ret": "long",
            "desc": "FallbackTimeout"
          },
          "stepBreakpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Starts single step debugging from the suspended breakpoint at the given node id"
          },
          "validateConditionalBreakpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Used for validating if a given predicate is valid or not"
          },
          "disableDebugger": {
            "args": [],
            "ret": "void",
            "desc": "Disable the debugger"
          },
          "setBodyIncludeStreams": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "BodyIncludeStreams"
          },
          "setMessageHeaderOnBreakpoint": [
            {
              "args": [
                {
                  "name": "p1",
                  "type": "java.lang.String",
                  "desc": ""
                },
                {
                  "name": "p2",
                  "type": "java.lang.String",
                  "desc": ""
                },
                {
                  "name": "p3",
                  "type": "java.lang.Object",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Updates\/adds the message header (uses same type as old header value) on the suspended breakpoint at the given node id"
            },
            {
              "args": [
                {
                  "name": "p1",
                  "type": "java.lang.String",
                  "desc": ""
                },
                {
                  "name": "p2",
                  "type": "java.lang.String",
                  "desc": ""
                },
                {
                  "name": "p3",
                  "type": "java.lang.Object",
                  "desc": ""
                },
                {
                  "name": "p4",
                  "type": "java.lang.String",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Updates\/adds the message header (with a new type) on the suspended breakpoint at the given node id"
            }
          ],
          "setBodyMaxChars": {
            "args": [
              {
                "name": "p1",
                "type": "int",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "BodyMaxChars"
          },
          "getBodyMaxChars": {
            "args": [],
            "ret": "int",
            "desc": "BodyMaxChars"
          },
          "getLoggingLevel": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "LoggingLevel"
          },
          "removeMessageHeaderOnBreakpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Removes the message header on the suspended breakpoint at the given node id"
          },
          "isSingleStepMode": {
            "args": [],
            "ret": "boolean",
            "desc": "SingleStepMode"
          },
          "setFallbackTimeout": {
            "args": [
              {
                "name": "p1",
                "type": "long",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "FallbackTimeout"
          },
          "isBodyIncludeFiles": {
            "args": [],
            "ret": "boolean",
            "desc": "BodyIncludeFiles"
          },
          "addBreakpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Add a breakpoint at the given node id"
          },
          "enableDebugger": {
            "args": [],
            "ret": "void",
            "desc": "Enable the debugger"
          },
          "removeAllBreakpoints": {
            "args": [],
            "ret": "void",
            "desc": "Remote all breakpoints (will resume all suspend breakpoints first and exists single step mode)"
          },
          "setBodyIncludeFiles": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "BodyIncludeFiles"
          },
          "resumeAll": {
            "args": [],
            "ret": "void",
            "desc": "Resume running any suspended breakpoints, and exits step mode"
          },
          "addConditionalBreakpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Add a conditional breakpoint at the given node id"
          },
          "dumpTracedMessagesAsXml": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Dumps the messages in xml format from the suspended breakpoint at the given node"
          },
          "resumeBreakpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Resume running from the suspended breakpoint at the given node id"
          },
          "removeMessageBodyOnBreakpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Removes the message body on the suspended breakpoint at the given node id"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "isBodyIncludeStreams": {
            "args": [],
            "ret": "boolean",
            "desc": "BodyIncludeStreams"
          },
          "setLoggingLevel": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "LoggingLevel"
          },
          "enableBreakpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Enables a breakpoint which has been disabled"
          },
          "isEnabled": {
            "args": [],
            "ret": "boolean",
            "desc": "Enabled"
          },
          "disableBreakpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Disables a breakpoint"
          },
          "step": {
            "args": [],
            "ret": "void",
            "desc": "Steps to next node in step mode"
          },
          "getBreakpoints": {
            "args": [],
            "ret": "java.util.Set",
            "desc": "Return the node ids which has breakpoints"
          }
        },
        "attr": {
          "BodyIncludeStreams": {
            "rw": true,
            "type": "boolean",
            "desc": "Whether to include stream based message body in the trace message."
          },
          "SingleStepMode": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether currently in step mode"
          },
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "FallbackTimeout": {
            "rw": true,
            "type": "long",
            "desc": "Fallback Timeout in seconds when block the message processing in Camel."
          },
          "LoggingLevel": {
            "rw": true,
            "type": "java.lang.String",
            "desc": "Logging Level"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "BodyMaxChars": {
            "rw": true,
            "type": "int",
            "desc": "Number of maximum chars in the message body in the trace message. Use zero or negative value to have unlimited size."
          },
          "Enabled": {
            "rw": false,
            "type": "boolean",
            "desc": "Is debugger enabled"
          },
          "BodyIncludeFiles": {
            "rw": true,
            "type": "boolean",
            "desc": "Whether to include file based message body in the trace message."
          },
          "DebugCounter": {
            "rw": false,
            "type": "long",
            "desc": "Number of total debugged messages"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedBacklogDebugger",
        "desc": "Managed BacklogDebugger"
      },
      "context=MyCamel,name=DefaultRestRegistry,type=services": {
        "op": {
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Service"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Service"
          },
          "apiDocAsJson": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Outputs the Rest services API documentation in JSon (requires camel-swagger-java on classpath)"
          },
          "isSuspended": {
            "args": [],
            "ret": "boolean",
            "desc": "Suspended"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Service"
          },
          "listRestServices": {
            "args": [],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Lists all the Rest services in the registry (url, path, verb, consumes, produces)"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "isSupportSuspension": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportSuspension"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Service"
          },
          "isStaticService": {
            "args": [],
            "ret": "boolean",
            "desc": "StaticService"
          },
          "getNumberOfRestServices": {
            "args": [],
            "ret": "int",
            "desc": "NumberOfRestServices"
          },
          "getServiceType": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ServiceType"
          }
        },
        "attr": {
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service State"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "ServiceType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service Type"
          },
          "NumberOfRestServices": {
            "rw": false,
            "type": "int",
            "desc": "Number of rest services in the registry"
          },
          "SupportSuspension": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service supports suspension"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "Suspended": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is suspended"
          },
          "StaticService": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is static"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedRestRegistry",
        "desc": "Managed RestRegistry"
      },
      "context=MyCamel,name=\"MyCamel\",type=routecontrollers": {
        "op": {
          "getControlledRoutes": {
            "args": [],
            "ret": "java.util.Collection",
            "desc": "ControlledRoutes"
          }
        },
        "attr": {
          "ControlledRoutes": {
            "rw": false,
            "type": "java.util.Collection",
            "desc": "Controlled Routes"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedRouteController",
        "desc": ""
      },
      "context=MyCamel,name=DefaultAsyncProcessorAwaitManager,type=services": {
        "op": {
          "getMeanDuration": {
            "args": [],
            "ret": "long",
            "desc": "MeanDuration"
          },
          "getMinDuration": {
            "args": [],
            "ret": "long",
            "desc": "MinDuration"
          },
          "isSupportSuspension": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportSuspension"
          },
          "setInterruptThreadsWhileStopping": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "InterruptThreadsWhileStopping"
          },
          "interrupt": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "To interrupt an exchange which may seem as stuck, to force the exchange to continue, allowing any blocking thread to be released."
          },
          "getThreadsInterrupted": {
            "args": [],
            "ret": "long",
            "desc": "ThreadsInterrupted"
          },
          "setStatisticsEnabled": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "StatisticsEnabled"
          },
          "isInterruptThreadsWhileStopping": {
            "args": [],
            "ret": "boolean",
            "desc": "InterruptThreadsWhileStopping"
          },
          "getMaxDuration": {
            "args": [],
            "ret": "long",
            "desc": "MaxDuration"
          },
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Service"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Service"
          },
          "isSuspended": {
            "args": [],
            "ret": "boolean",
            "desc": "Suspended"
          },
          "resetStatistics": {
            "args": [],
            "ret": "void",
            "desc": "Resets the statistics"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Service"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "getSize": {
            "args": [],
            "ret": "int",
            "desc": "Size"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Service"
          },
          "getTotalDuration": {
            "args": [],
            "ret": "long",
            "desc": "TotalDuration"
          },
          "isStaticService": {
            "args": [],
            "ret": "boolean",
            "desc": "StaticService"
          },
          "getThreadsBlocked": {
            "args": [],
            "ret": "long",
            "desc": "ThreadsBlocked"
          },
          "getServiceType": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ServiceType"
          },
          "isStatisticsEnabled": {
            "args": [],
            "ret": "boolean",
            "desc": "StatisticsEnabled"
          },
          "browse": {
            "args": [],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Lists all the exchanges which are currently inflight, having a blocked thread awaiting for other threads to trigger the callback when they are done"
          }
        },
        "attr": {
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "StatisticsEnabled": {
            "rw": true,
            "type": "boolean",
            "desc": "Utilization statistics enabled"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "Size": {
            "rw": false,
            "type": "int",
            "desc": "Number of threads that are blocked waiting for other threads to trigger the callback when they are done processing the exchange"
          },
          "ThreadsInterrupted": {
            "rw": false,
            "type": "long",
            "desc": "Number of threads that has been interrupted"
          },
          "MaxDuration": {
            "rw": false,
            "type": "long",
            "desc": "The maximum wait time in msec."
          },
          "SupportSuspension": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service supports suspension"
          },
          "MinDuration": {
            "rw": false,
            "type": "long",
            "desc": "The minimum wait time in msec."
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "StaticService": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is static"
          },
          "TotalDuration": {
            "rw": false,
            "type": "long",
            "desc": "Total wait time in msec."
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service State"
          },
          "ServiceType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service Type"
          },
          "MeanDuration": {
            "rw": false,
            "type": "long",
            "desc": "The average wait time in msec."
          },
          "InterruptThreadsWhileStopping": {
            "rw": true,
            "type": "boolean",
            "desc": "Whether to interrupt any blocking threads during stopping."
          },
          "Suspended": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is suspended"
          },
          "ThreadsBlocked": {
            "rw": false,
            "type": "long",
            "desc": "Number of threads that has been blocked"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedAsyncProcessorAwaitManager",
        "desc": "Managed AsyncProcessorAwaitManager"
      },
      "context=MyCamel,name=DefaultShutdownStrategy,type=services": {
        "op": {
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Service"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Service"
          },
          "isSupportSuspension": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportSuspension"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "isSuspended": {
            "args": [],
            "ret": "boolean",
            "desc": "Suspended"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Service"
          },
          "isStaticService": {
            "args": [],
            "ret": "boolean",
            "desc": "StaticService"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Service"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "getServiceType": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ServiceType"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          }
        },
        "attr": {
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service State"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "ServiceType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service Type"
          },
          "SupportSuspension": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service supports suspension"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "Suspended": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is suspended"
          },
          "StaticService": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is static"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedService",
        "desc": "Managed Service"
      },
      "context=MyCamel,name=\"properties\",type=components": {
        "op": {
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "explain": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Explain how this component is configured"
          },
          "getComponentName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ComponentName"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "isVerifySupported": {
            "args": [],
            "ret": "boolean",
            "desc": "VerifySupported"
          },
          "informationJson": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Component information as JSon"
          },
          "verify": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.util.Map",
                "desc": ""
              }
            ],
            "ret": "org.apache.camel.component.extension.ComponentVerifierExtension$Result",
            "desc": "Verify options against a given scope"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          }
        },
        "attr": {
          "VerifySupported": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this component support verification (parameters or connectivity)"
          },
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Component State"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "ComponentName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Component Name"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedComponent",
        "desc": "Managed Component"
      },
      "context=MyCamel,name=\"DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)\",type=errorhandlers": {
        "op": {
          "getLogStackTrace": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "LogStackTrace"
          },
          "getRetriesExhaustedLogLevel": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RetriesExhaustedLogLevel"
          },
          "setLogExhaustedMessageBody": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "LogExhaustedMessageBody"
          },
          "isDeadLetterHandleNewException": {
            "args": [],
            "ret": "boolean",
            "desc": "DeadLetterHandleNewException"
          },
          "setUseCollisionAvoidance": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "UseCollisionAvoidance"
          },
          "setBackOffMultiplier": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Double",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "BackOffMultiplier"
          },
          "getMaximumRedeliveryDelay": {
            "args": [],
            "ret": "java.lang.Long",
            "desc": "MaximumRedeliveryDelay"
          },
          "getDeadLetterChannelEndpointUri": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "DeadLetterChannelEndpointUri"
          },
          "getLogExhausted": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "LogExhausted"
          },
          "isSupportRedelivery": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportRedelivery"
          },
          "setLogStackTrace": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "LogStackTrace"
          },
          "getRedeliveryDelay": {
            "args": [],
            "ret": "java.lang.Long",
            "desc": "RedeliveryDelay"
          },
          "setAllowRedeliveryWhileStopping": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "AllowRedeliveryWhileStopping"
          },
          "setCollisionAvoidancePercent": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Double",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "CollisionAvoidancePercent"
          },
          "isDeadLetterChannel": {
            "args": [],
            "ret": "boolean",
            "desc": "DeadLetterChannel"
          },
          "getLogNewException": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "LogNewException"
          },
          "setCollisionAvoidanceFactor": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Double",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "CollisionAvoidanceFactor"
          },
          "setMaximumRedeliveries": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Integer",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "MaximumRedeliveries"
          },
          "getBackOffMultiplier": {
            "args": [],
            "ret": "java.lang.Double",
            "desc": "BackOffMultiplier"
          },
          "getLogContinued": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "LogContinued"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "getRetryAttemptedLogLevel": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RetryAttemptedLogLevel"
          },
          "getPendingRedeliveryCount": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "PendingRedeliveryCount"
          },
          "setLogExhaustedMessageHistory": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "LogExhaustedMessageHistory"
          },
          "isSupportTransactions": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportTransactions"
          },
          "setRedeliveryDelay": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Long",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "RedeliveryDelay"
          },
          "getLogRetryStackTrace": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "LogRetryStackTrace"
          },
          "getAllowRedeliveryWhileStopping": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "AllowRedeliveryWhileStopping"
          },
          "setRetryAttemptedLogLevel": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "RetryAttemptedLogLevel"
          },
          "getLogHandled": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "LogHandled"
          },
          "setDelayPattern": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "DelayPattern"
          },
          "getUseCollisionAvoidance": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "UseCollisionAvoidance"
          },
          "getLogExhaustedMessageBody": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "LogExhaustedMessageBody"
          },
          "getCollisionAvoidanceFactor": {
            "args": [],
            "ret": "java.lang.Double",
            "desc": "CollisionAvoidanceFactor"
          },
          "setUseExponentialBackOff": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "UseExponentialBackOff"
          },
          "setMaximumRedeliveryDelay": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Long",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "MaximumRedeliveryDelay"
          },
          "getUseExponentialBackOff": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "UseExponentialBackOff"
          },
          "setLogNewException": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "LogNewException"
          },
          "setLogRetryStackTrace": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "LogRetryStackTrace"
          },
          "getMaximumRedeliveries": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "MaximumRedeliveries"
          },
          "setLogExhausted": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "LogExhausted"
          },
          "setLogContinued": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "LogContinued"
          },
          "setLogHandled": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "LogHandled"
          },
          "setRetriesExhaustedLogLevel": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "RetriesExhaustedLogLevel"
          },
          "getDelayPattern": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "DelayPattern"
          },
          "getLogExhaustedMessageHistory": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "LogExhaustedMessageHistory"
          },
          "getCollisionAvoidancePercent": {
            "args": [],
            "ret": "java.lang.Double",
            "desc": "CollisionAvoidancePercent"
          },
          "isDeadLetterUseOriginalMessage": {
            "args": [],
            "ret": "boolean",
            "desc": "DeadLetterUseOriginalMessage"
          }
        },
        "attr": {
          "LogContinued": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "RedeliveryPolicy for logging handled and continued exceptions"
          },
          "LogExhaustedMessageBody": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "RedeliveryPolicy for logging exhausted with message body"
          },
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "CollisionAvoidanceFactor": {
            "rw": true,
            "type": "java.lang.Double",
            "desc": "RedeliveryPolicy for collision avoidance factor"
          },
          "RedeliveryDelay": {
            "rw": true,
            "type": "java.lang.Long",
            "desc": "RedeliveryPolicy for redelivery delay"
          },
          "DeadLetterChannel": {
            "rw": false,
            "type": "boolean",
            "desc": "Is this error handler a dead letter channel"
          },
          "MaximumRedeliveries": {
            "rw": true,
            "type": "java.lang.Integer",
            "desc": "RedeliveryPolicy for maximum redeliveries"
          },
          "DeadLetterUseOriginalMessage": {
            "rw": false,
            "type": "boolean",
            "desc": "When a message is moved to dead letter channel is it the original message or recent message"
          },
          "UseCollisionAvoidance": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "RedeliveryPolicy for using collision avoidance"
          },
          "RetriesExhaustedLogLevel": {
            "rw": true,
            "type": "java.lang.String",
            "desc": "RedeliveryPolicy for logging level when retries exhausted"
          },
          "LogNewException": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "RedeliveryPolicy for logging new exceptions"
          },
          "SupportRedelivery": {
            "rw": false,
            "type": "boolean",
            "desc": "Does the error handler support redelivery"
          },
          "PendingRedeliveryCount": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Number of Exchanges scheduled for redelivery (waiting to be redelivered in the future)"
          },
          "RetryAttemptedLogLevel": {
            "rw": true,
            "type": "java.lang.String",
            "desc": "RedeliveryPolicy for logging level when attempting retry"
          },
          "LogExhausted": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "RedeliveryPolicy for logging exhausted exceptions"
          },
          "BackOffMultiplier": {
            "rw": true,
            "type": "java.lang.Double",
            "desc": "RedeliveryPolicy for backoff multiplier"
          },
          "CollisionAvoidancePercent": {
            "rw": true,
            "type": "java.lang.Double",
            "desc": "RedeliveryPolicy for collision avoidance percent"
          },
          "AllowRedeliveryWhileStopping": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "RedeliveryPolicy for allow redelivery while stopping"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "UseExponentialBackOff": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "RedeliveryPolicy for using exponential backoff"
          },
          "LogStackTrace": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "RedeliveryPolicy for logging stack traces"
          },
          "LogExhaustedMessageHistory": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "RedeliveryPolicy for logging exhausted with message history"
          },
          "DeadLetterHandleNewException": {
            "rw": false,
            "type": "boolean",
            "desc": "Does this error handler handle new exceptions which may occur during error handling"
          },
          "LogHandled": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "RedeliveryPolicy for logging handled exceptions"
          },
          "SupportTransactions": {
            "rw": false,
            "type": "boolean",
            "desc": "Does this error handler support transactions"
          },
          "DeadLetterChannelEndpointUri": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Endpoint Uri for the dead letter channel where dead message is move to"
          },
          "LogRetryStackTrace": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "RedeliveryPolicy for logging redelivery stack traces"
          },
          "MaximumRedeliveryDelay": {
            "rw": true,
            "type": "java.lang.Long",
            "desc": "RedeliveryPolicy for maximum redelivery delay"
          },
          "DelayPattern": {
            "rw": true,
            "type": "java.lang.String",
            "desc": "RedeliveryPolicy for delay pattern"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedErrorHandler",
        "desc": "Managed ErrorHandler"
      },
      "context=MyCamel,name=DefaultExecutorServiceManager,type=services": {
        "op": {
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Service"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Service"
          },
          "isSupportSuspension": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportSuspension"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "isSuspended": {
            "args": [],
            "ret": "boolean",
            "desc": "Suspended"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Service"
          },
          "isStaticService": {
            "args": [],
            "ret": "boolean",
            "desc": "StaticService"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Service"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "getServiceType": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ServiceType"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          }
        },
        "attr": {
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service State"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "ServiceType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service Type"
          },
          "SupportSuspension": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service supports suspension"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "Suspended": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is suspended"
          },
          "StaticService": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is static"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedService",
        "desc": "Managed Service"
      },
      "context=MyCamel,name=\"route-transform\",type=processors": {
        "op": {
          "getLastProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "LastProcessingTime"
          },
          "getExchangesCompleted": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesCompleted"
          },
          "explain": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Explain how this processor is configured"
          },
          "getDeltaProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "DeltaProcessingTime"
          },
          "getIndex": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "Index"
          },
          "getTotalProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "TotalProcessingTime"
          },
          "getStartTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "StartTimestamp"
          },
          "dumpStatsAsXml": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Dumps the statistics as XML"
          },
          "getLastExchangeFailureTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "LastExchangeFailureTimestamp"
          },
          "getFirstExchangeCompletedTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "FirstExchangeCompletedTimestamp"
          },
          "getLastExchangeFailureExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "LastExchangeFailureExchangeId"
          },
          "getMaxProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MaxProcessingTime"
          },
          "getLastExchangeCompletedExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "LastExchangeCompletedExchangeId"
          },
          "informationJson": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Processor information as JSon"
          },
          "setStatisticsEnabled": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "StatisticsEnabled"
          },
          "getSupportExtendedInformation": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "SupportExtendedInformation"
          },
          "getProcessorId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ProcessorId"
          },
          "getMinProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MinProcessingTime"
          },
          "getMeanProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MeanProcessingTime"
          },
          "getExternalRedeliveries": {
            "args": [],
            "ret": "long",
            "desc": "ExternalRedeliveries"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Processor"
          },
          "getFirstExchangeFailureExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "FirstExchangeFailureExchangeId"
          },
          "getResetTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "ResetTimestamp"
          },
          "getExchangesFailed": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesFailed"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getExchangesTotal": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesTotal"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "getExpression": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Expression"
          },
          "getExpressionLanguage": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ExpressionLanguage"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Processor"
          },
          "getFailuresHandled": {
            "args": [],
            "ret": "long",
            "desc": "FailuresHandled"
          },
          "getExchangesInflight": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesInflight"
          },
          "reset": {
            "args": [],
            "ret": "void",
            "desc": "Reset counters"
          },
          "dumpProcessorAsXml": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Dumps the processor as XML"
          },
          "getRedeliveries": {
            "args": [],
            "ret": "long",
            "desc": "Redeliveries"
          },
          "getFirstExchangeCompletedExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "FirstExchangeCompletedExchangeId"
          },
          "isStatisticsEnabled": {
            "args": [],
            "ret": "boolean",
            "desc": "StatisticsEnabled"
          },
          "getLastExchangeCompletedTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "LastExchangeCompletedTimestamp"
          },
          "getFirstExchangeFailureTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "FirstExchangeFailureTimestamp"
          }
        },
        "attr": {
          "StatisticsEnabled": {
            "rw": true,
            "type": "boolean",
            "desc": "Statistics enabled"
          },
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "LastProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Last Processing Time [milliseconds]"
          },
          "ExchangesCompleted": {
            "rw": false,
            "type": "long",
            "desc": "Number of completed exchanges"
          },
          "ExchangesFailed": {
            "rw": false,
            "type": "long",
            "desc": "Number of failed exchanges"
          },
          "FirstExchangeCompletedExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "First Exchange Completed ExchangeId"
          },
          "StartTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Timestamp when the stats was initially started"
          },
          "FirstExchangeCompletedTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "First Exchange Completed Timestamp"
          },
          "LastExchangeFailureTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Last Exchange Failed Timestamp"
          },
          "Index": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Processor Index"
          },
          "MaxProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Max Processing Time [milliseconds]"
          },
          "LastExchangeCompletedTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Last Exchange Completed Timestamp"
          },
          "DeltaProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Delta Processing Time [milliseconds]"
          },
          "ExternalRedeliveries": {
            "rw": false,
            "type": "long",
            "desc": "Number of external initiated redeliveries (such as from JMS broker)"
          },
          "ExchangesTotal": {
            "rw": false,
            "type": "long",
            "desc": "Total number of exchanges"
          },
          "ResetTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Timestamp when the stats was last reset or initially started"
          },
          "ExchangesInflight": {
            "rw": false,
            "type": "long",
            "desc": "Number of inflight exchanges"
          },
          "MeanProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Mean Processing Time [milliseconds]"
          },
          "LastExchangeFailureExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Last Exchange Failed ExchangeId"
          },
          "FirstExchangeFailureExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "First Exchange Failed ExchangeId"
          },
          "ProcessorId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Processor ID"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "FirstExchangeFailureTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "First Exchange Failed Timestamp"
          },
          "TotalProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Total Processing Time [milliseconds]"
          },
          "SupportExtendedInformation": {
            "rw": false,
            "type": "java.lang.Boolean",
            "desc": "Whether this processor supports extended JMX information"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "ExpressionLanguage": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "The language for the expression"
          },
          "FailuresHandled": {
            "rw": false,
            "type": "long",
            "desc": "Number of failures handled"
          },
          "Expression": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Expression to return the transformed message body (the new message body to use)"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Processor State"
          },
          "Redeliveries": {
            "rw": false,
            "type": "long",
            "desc": "Number of redeliveries (internal only)"
          },
          "MinProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Min Processing Time [milliseconds]"
          },
          "LastExchangeCompletedExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Last Exchange Completed ExchangeId"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedTransformer",
        "desc": "Managed Transformer"
      },
      "context=MyCamel,name=\"timer\",type=components": {
        "op": {
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "explain": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Explain how this component is configured"
          },
          "getComponentName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ComponentName"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "isVerifySupported": {
            "args": [],
            "ret": "boolean",
            "desc": "VerifySupported"
          },
          "informationJson": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Component information as JSon"
          },
          "verify": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.util.Map",
                "desc": ""
              }
            ],
            "ret": "org.apache.camel.component.extension.ComponentVerifierExtension$Result",
            "desc": "Verify options against a given scope"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          }
        },
        "attr": {
          "VerifySupported": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this component support verification (parameters or connectivity)"
          },
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Component State"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "ComponentName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Component Name"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedComponent",
        "desc": "Managed Component"
      },
      "context=MyCamel,name=\"bean\",type=components": {
        "op": {
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "explain": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Explain how this component is configured"
          },
          "getComponentName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ComponentName"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "isVerifySupported": {
            "args": [],
            "ret": "boolean",
            "desc": "VerifySupported"
          },
          "informationJson": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Component information as JSon"
          },
          "verify": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.util.Map",
                "desc": ""
              }
            ],
            "ret": "org.apache.camel.component.extension.ComponentVerifierExtension$Result",
            "desc": "Verify options against a given scope"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          }
        },
        "attr": {
          "VerifySupported": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this component support verification (parameters or connectivity)"
          },
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Component State"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "ComponentName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Component Name"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedComponent",
        "desc": "Managed Component"
      },
      "context=MyCamel,name=\"MyCamel\",type=context": {
        "op": {
          "getDeltaProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "DeltaProcessingTime"
          },
          "getCamelVersion": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelVersion"
          },
          "getStartTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "StartTimestamp"
          },
          "getClassResolver": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ClassResolver"
          },
          "isLogMask": {
            "args": [],
            "ret": "boolean",
            "desc": "LogMask"
          },
          "isUseMDCLogging": {
            "args": [],
            "ret": "boolean",
            "desc": "UseMDCLogging"
          },
          "getLastExchangeFailureTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "LastExchangeFailureTimestamp"
          },
          "isUseBreadcrumb": {
            "args": [],
            "ret": "boolean",
            "desc": "UseBreadcrumb"
          },
          "explainEipJson": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Returns a JSON schema representation of the EIP parameters for the given EIP by its id"
          },
          "dataFormatParameterJsonSchema": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Returns the JSON schema representation of the data format parameters for the given data format name"
          },
          "sendBody": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.Object",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Send body (in only)"
          },
          "dumpRoutesAsXml": [
            {
              "args": [
                {
                  "name": "p1",
                  "type": "boolean",
                  "desc": ""
                }
              ],
              "ret": "java.lang.String",
              "desc": "Dumps the routes as XML"
            },
            {
              "args": [],
              "ret": "java.lang.String",
              "desc": "Dumps the routes as XML"
            }
          ],
          "componentParameterJsonSchema": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Returns the JSON schema representation of the endpoint parameters for the given component name"
          },
          "canSendToEndpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "boolean",
            "desc": "Whether its possible to send to the endpoint (eg the endpoint has a producer)"
          },
          "setShutdownNowOnTimeout": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "ShutdownNowOnTimeout"
          },
          "getMinProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MinProcessingTime"
          },
          "startAllRoutes": {
            "args": [],
            "ret": "void",
            "desc": "Starts all the routes which currently is not started"
          },
          "getProperties": {
            "args": [],
            "ret": "java.util.Map",
            "desc": "Properties"
          },
          "getLoad15": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Load15"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Camel (shutdown)"
          },
          "setProperty": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Sets the value of a Camel global option"
          },
          "getGlobalOptions": {
            "args": [],
            "ret": "java.util.Map",
            "desc": "GlobalOptions"
          },
          "reset": [
            {
              "args": [],
              "ret": "void",
              "desc": "Reset counters"
            },
            {
              "args": [
                {
                  "name": "p1",
                  "type": "boolean",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Reset counters"
            }
          ],
          "getLastExchangeCompletedTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "LastExchangeCompletedTimestamp"
          },
          "addOrUpdateRoutesFromXml": [
            {
              "args": [
                {
                  "name": "p1",
                  "type": "java.lang.String",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Adds or updates existing routes from XML"
            },
            {
              "args": [
                {
                  "name": "p1",
                  "type": "java.lang.String",
                  "desc": ""
                },
                {
                  "name": "p2",
                  "type": "boolean",
                  "desc": ""
                }
              ],
              "ret": "void",
              "desc": "Adds or updates existing routes from XML"
            }
          ],
          "findComponents": {
            "args": [],
            "ret": "java.util.Map",
            "desc": "Find all Camel components available in the classpath"
          },
          "getManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ManagementName"
          },
          "explainEndpointJson": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": " Returns a JSON schema representation of the endpoint parameters for the given endpoint uri"
          },
          "dumpRoutesStatsAsXml": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Dumps the CamelContext and routes stats as XML"
          },
          "listEips": {
            "args": [],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "List all Camel EIPs from camel-core"
          },
          "findComponentNames": {
            "args": [],
            "ret": "java.util.List",
            "desc": "Find all Camel components names available in the classpath"
          },
          "getFirstExchangeCompletedTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "FirstExchangeCompletedTimestamp"
          },
          "requestBody": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.Object",
                "desc": ""
              }
            ],
            "ret": "java.lang.Object",
            "desc": "Request body (in out)"
          },
          "getPackageScanClassResolver": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "PackageScanClassResolver"
          },
          "isMessageHistory": {
            "args": [],
            "ret": "boolean",
            "desc": "MessageHistory"
          },
          "getTimeout": {
            "args": [],
            "ret": "long",
            "desc": "Timeout"
          },
          "getInflightExchanges": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "InflightExchanges"
          },
          "setStatisticsEnabled": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "StatisticsEnabled"
          },
          "getUptimeMillis": {
            "args": [],
            "ret": "long",
            "desc": "UptimeMillis"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Camel"
          },
          "getMeanProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MeanProcessingTime"
          },
          "getApplicationContextClassName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ApplicationContextClassName"
          },
          "restart": {
            "args": [],
            "ret": "void",
            "desc": "Restart Camel (stop and then start)"
          },
          "getExternalRedeliveries": {
            "args": [],
            "ret": "long",
            "desc": "ExternalRedeliveries"
          },
          "getResetTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "ResetTimestamp"
          },
          "getExchangesFailed": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesFailed"
          },
          "getStartedRoutes": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "StartedRoutes"
          },
          "getTimeUnit": {
            "args": [],
            "ret": "java.util.concurrent.TimeUnit",
            "desc": "TimeUnit"
          },
          "setTimeout": {
            "args": [
              {
                "name": "p1",
                "type": "long",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Timeout"
          },
          "createEndpoint": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "boolean",
            "desc": "Creates the endpoint by the given URI"
          },
          "completeEndpointPath": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.util.Map",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.util.List",
            "desc": "Returns the list of available endpoint paths for the given component name, endpoint properties and completion text"
          },
          "getExchangesInflight": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesInflight"
          },
          "getManagementStatisticsLevel": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ManagementStatisticsLevel"
          },
          "getTotalRoutes": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "TotalRoutes"
          },
          "findEips": {
            "args": [],
            "ret": "java.util.Map",
            "desc": "Find all Camel EIPs from camel-core"
          },
          "getFirstExchangeFailureTimestamp": {
            "args": [],
            "ret": "java.util.Date",
            "desc": "FirstExchangeFailureTimestamp"
          },
          "getLastProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "LastProcessingTime"
          },
          "getExchangesCompleted": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesCompleted"
          },
          "eipParameterJsonSchema": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Returns the JSON schema representation of the EIP parameters for the given EIP name"
          },
          "dumpRestsAsXml": [
            {
              "args": [],
              "ret": "java.lang.String",
              "desc": "Dumps the rests as XML"
            },
            {
              "args": [
                {
                  "name": "p1",
                  "type": "boolean",
                  "desc": ""
                }
              ],
              "ret": "java.lang.String",
              "desc": "Dumps the rests as XML"
            }
          ],
          "requestBodyAndHeaders": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.Object",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.util.Map",
                "desc": ""
              }
            ],
            "ret": "java.lang.Object",
            "desc": "Request body and headers (in out)"
          },
          "dumpStatsAsXml": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Dumps the statistics as XML"
          },
          "isShutdownNowOnTimeout": {
            "args": [],
            "ret": "boolean",
            "desc": "ShutdownNowOnTimeout"
          },
          "sendBodyAndHeaders": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.Object",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.util.Map",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Send body and headers (in only)"
          },
          "setTracing": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.Boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Tracing"
          },
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Camel"
          },
          "getTracing": {
            "args": [],
            "ret": "java.lang.Boolean",
            "desc": "Tracing"
          },
          "removeEndpoints": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "int",
            "desc": "Removes endpoints by the given pattern"
          },
          "findEipNames": {
            "args": [],
            "ret": "java.util.List",
            "desc": "Find all Camel EIP names from camel-core"
          },
          "languageParameterJsonSchema": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Returns the JSON schema representation of the language parameters for the given language name"
          },
          "setGlobalOption": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Sets the value of a Camel global option"
          },
          "getComponentDocumentation": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Returns the HTML documentation for the given camel component"
          },
          "getExchangesTotal": {
            "args": [],
            "ret": "long",
            "desc": "ExchangesTotal"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "setTimeUnit": {
            "args": [
              {
                "name": "p1",
                "type": "java.util.concurrent.TimeUnit",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "TimeUnit"
          },
          "listComponents": {
            "args": [],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "List all Camel components available in the classpath"
          },
          "getFirstExchangeCompletedExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "FirstExchangeCompletedExchangeId"
          },
          "getUptime": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Uptime"
          },
          "getHeadersMapFactoryClassName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "HeadersMapFactoryClassName"
          },
          "getTotalProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "TotalProcessingTime"
          },
          "dumpRoutesCoverageAsXml": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Dumps the routes coverage as XML"
          },
          "requestStringBody": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.Object",
            "desc": "Request body (String type) (in out)"
          },
          "getLoad05": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Load05"
          },
          "getLastExchangeFailureExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "LastExchangeFailureExchangeId"
          },
          "isUseDataType": {
            "args": [],
            "ret": "boolean",
            "desc": "UseDataType"
          },
          "getMaxProcessingTime": {
            "args": [],
            "ret": "long",
            "desc": "MaxProcessingTime"
          },
          "getLastExchangeCompletedExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "LastExchangeCompletedExchangeId"
          },
          "isAllowUseOriginalMessage": {
            "args": [],
            "ret": "boolean",
            "desc": "AllowUseOriginalMessage"
          },
          "explainComponentJson": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": " Returns a JSON schema representation of the component parameters for the given component by its id"
          },
          "getProperty": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Gets the value of a Camel global option"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Camel"
          },
          "createRouteStaticEndpointJson": [
            {
              "args": [],
              "ret": "java.lang.String",
              "desc": "Returns the JSON representation of all the static and dynamic endpoints defined in all the routes"
            },
            {
              "args": [
                {
                  "name": "p1",
                  "type": "boolean",
                  "desc": ""
                }
              ],
              "ret": "java.lang.String",
              "desc": "Returns the JSON representation of all the static endpoints (and possible dynamic) defined in all the routes"
            }
          ],
          "getFirstExchangeFailureExchangeId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "FirstExchangeFailureExchangeId"
          },
          "getLoad01": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Load01"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "getFailuresHandled": {
            "args": [],
            "ret": "long",
            "desc": "FailuresHandled"
          },
          "getGlobalOption": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Gets the value of a Camel global option"
          },
          "getRedeliveries": {
            "args": [],
            "ret": "long",
            "desc": "Redeliveries"
          },
          "isStatisticsEnabled": {
            "args": [],
            "ret": "boolean",
            "desc": "StatisticsEnabled"
          },
          "sendStringBody": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Send body (String type) (in only)"
          }
        },
        "attr": {
          "StatisticsEnabled": {
            "rw": true,
            "type": "boolean",
            "desc": "Statistics enabled"
          },
          "UseMDCLogging": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether MDC logging is supported"
          },
          "ExchangesFailed": {
            "rw": false,
            "type": "long",
            "desc": "Number of failed exchanges"
          },
          "FirstExchangeCompletedExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "First Exchange Completed ExchangeId"
          },
          "StartTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Timestamp when the stats was initially started"
          },
          "FirstExchangeCompletedTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "First Exchange Completed Timestamp"
          },
          "DeltaProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Delta Processing Time [milliseconds]"
          },
          "TotalRoutes": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Total number of routes"
          },
          "ExternalRedeliveries": {
            "rw": false,
            "type": "long",
            "desc": "Number of external initiated redeliveries (such as from JMS broker)"
          },
          "UseBreadcrumb": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether breadcrumbs is in use"
          },
          "UptimeMillis": {
            "rw": false,
            "type": "long",
            "desc": "Uptime [milliseconds]"
          },
          "TimeUnit": {
            "rw": true,
            "type": "java.util.concurrent.TimeUnit",
            "desc": "Shutdown timeout time unit"
          },
          "ExchangesTotal": {
            "rw": false,
            "type": "long",
            "desc": "Total number of exchanges"
          },
          "ExchangesInflight": {
            "rw": false,
            "type": "long",
            "desc": "Number of inflight exchanges"
          },
          "MeanProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Mean Processing Time [milliseconds]"
          },
          "LastExchangeFailureExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Last Exchange Failed ExchangeId"
          },
          "LogMask": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether security mask for Logging is enabled"
          },
          "FirstExchangeFailureExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "First Exchange Failed ExchangeId"
          },
          "Timeout": {
            "rw": true,
            "type": "long",
            "desc": "Shutdown timeout"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "TotalProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Total Processing Time [milliseconds]"
          },
          "AllowUseOriginalMessage": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether allowing access to the original message during routing"
          },
          "FailuresHandled": {
            "rw": false,
            "type": "long",
            "desc": "Number of failures handled"
          },
          "MessageHistory": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether message history is enabled"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel State"
          },
          "InflightExchanges": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Current number of inflight Exchanges"
          },
          "Tracing": {
            "rw": true,
            "type": "java.lang.Boolean",
            "desc": "Tracing"
          },
          "LastProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Last Processing Time [milliseconds]"
          },
          "ExchangesCompleted": {
            "rw": false,
            "type": "long",
            "desc": "Number of completed exchanges"
          },
          "HeadersMapFactoryClassName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "HeadersMapFactory class name"
          },
          "LastExchangeFailureTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Last Exchange Failed Timestamp"
          },
          "Properties": {
            "rw": false,
            "type": "java.util.Map",
            "desc": "Camel Properties"
          },
          "MaxProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Max Processing Time [milliseconds]"
          },
          "LastExchangeCompletedTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Last Exchange Completed Timestamp"
          },
          "Load15": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Average load over the last fifteen minutes"
          },
          "ApplicationContextClassName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "ApplicationContext class name"
          },
          "StartedRoutes": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Current number of started routes"
          },
          "ManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "ClassResolver": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "ClassResolver class name"
          },
          "GlobalOptions": {
            "rw": false,
            "type": "java.util.Map",
            "desc": "Camel Global Options"
          },
          "ResetTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "Timestamp when the stats was last reset or initially started"
          },
          "UseDataType": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether Message DataType is enabled"
          },
          "Uptime": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Uptime [human readable text]"
          },
          "FirstExchangeFailureTimestamp": {
            "rw": false,
            "type": "java.util.Date",
            "desc": "First Exchange Failed Timestamp"
          },
          "ShutdownNowOnTimeout": {
            "rw": true,
            "type": "boolean",
            "desc": "Whether to force shutdown now when a timeout occurred"
          },
          "Load05": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Average load over the last five minutes"
          },
          "PackageScanClassResolver": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "PackageScanClassResolver class name"
          },
          "CamelVersion": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel Version"
          },
          "Redeliveries": {
            "rw": false,
            "type": "long",
            "desc": "Number of redeliveries (internal only)"
          },
          "MinProcessingTime": {
            "rw": false,
            "type": "long",
            "desc": "Min Processing Time [milliseconds]"
          },
          "LastExchangeCompletedExchangeId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Last Exchange Completed ExchangeId"
          },
          "ManagementStatisticsLevel": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel Management StatisticsLevel"
          },
          "Load01": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Average load over the last minute"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedCamelContext",
        "desc": "Managed CamelContext"
      },
      "context=MyCamel,name=DefaultTypeConverter,type=services": {
        "op": {
          "getTypeConverterExistsLoggingLevel": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "TypeConverterExistsLoggingLevel"
          },
          "listTypeConverters": {
            "args": [],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Lists all the type converters in the registry (from -> to)"
          },
          "hasTypeConverter": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "boolean",
            "desc": "Checks whether a type converter exists for converting (from -> to)"
          },
          "isSupportSuspension": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportSuspension"
          },
          "getTypeConverterExists": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "TypeConverterExists"
          },
          "setStatisticsEnabled": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "StatisticsEnabled"
          },
          "getHitCounter": {
            "args": [],
            "ret": "long",
            "desc": "HitCounter"
          },
          "getMissCounter": {
            "args": [],
            "ret": "long",
            "desc": "MissCounter"
          },
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Service"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Service"
          },
          "getAttemptCounter": {
            "args": [],
            "ret": "long",
            "desc": "AttemptCounter"
          },
          "isSuspended": {
            "args": [],
            "ret": "boolean",
            "desc": "Suspended"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Service"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "getBaseHitCounter": {
            "args": [],
            "ret": "long",
            "desc": "BaseHitCounter"
          },
          "resetTypeConversionCounters": {
            "args": [],
            "ret": "void",
            "desc": "Resets the type conversion counters"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Service"
          },
          "isStaticService": {
            "args": [],
            "ret": "boolean",
            "desc": "StaticService"
          },
          "getNoopCounter": {
            "args": [],
            "ret": "long",
            "desc": "NoopCounter"
          },
          "getNumberOfTypeConverters": {
            "args": [],
            "ret": "int",
            "desc": "NumberOfTypeConverters"
          },
          "getFailedCounter": {
            "args": [],
            "ret": "long",
            "desc": "FailedCounter"
          },
          "getServiceType": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ServiceType"
          },
          "isStatisticsEnabled": {
            "args": [],
            "ret": "boolean",
            "desc": "StatisticsEnabled"
          }
        },
        "attr": {
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "StatisticsEnabled": {
            "rw": true,
            "type": "boolean",
            "desc": "Utilization statistics enabled"
          },
          "NumberOfTypeConverters": {
            "rw": false,
            "type": "int",
            "desc": "Number of type converters in the registry"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "SupportSuspension": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service supports suspension"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "StaticService": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is static"
          },
          "FailedCounter": {
            "rw": false,
            "type": "long",
            "desc": "Number of type conversion failures (failed conversions)"
          },
          "TypeConverterExistsLoggingLevel": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Logging level to use if attempting to add a duplicate type converter"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service State"
          },
          "ServiceType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service Type"
          },
          "BaseHitCounter": {
            "rw": false,
            "type": "long",
            "desc": "Number of type conversion hits by base core converters (successful conversions)"
          },
          "HitCounter": {
            "rw": false,
            "type": "long",
            "desc": "Number of type conversion hits (successful conversions)"
          },
          "AttemptCounter": {
            "rw": false,
            "type": "long",
            "desc": "Number of type conversion attempts"
          },
          "TypeConverterExists": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "What to do if attempting to add a duplicate type converter (Override, Ignore or Fail)"
          },
          "Suspended": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is suspended"
          },
          "NoopCounter": {
            "rw": false,
            "type": "long",
            "desc": "Number of noop attempts (no type conversion was needed)"
          },
          "MissCounter": {
            "rw": false,
            "type": "long",
            "desc": "Number of type conversion misses (no suitable type converter)"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedTypeConverterRegistry",
        "desc": "Managed TypeConverterRegistry"
      },
      "context=MyCamel,name=DefaultInflightRepository,type=services": {
        "op": {
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Service"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Service"
          },
          "isSuspended": {
            "args": [],
            "ret": "boolean",
            "desc": "Suspended"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Service"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "isSupportSuspension": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportSuspension"
          },
          "getSize": {
            "args": [],
            "ret": "int",
            "desc": "Size"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Service"
          },
          "size": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "int",
            "desc": "Current size of inflight exchanges which are from the given route."
          },
          "isStaticService": {
            "args": [],
            "ret": "boolean",
            "desc": "StaticService"
          },
          "getServiceType": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ServiceType"
          },
          "browse": [
            {
              "args": [
                {
                  "name": "p1",
                  "type": "int",
                  "desc": ""
                },
                {
                  "name": "p2",
                  "type": "boolean",
                  "desc": ""
                }
              ],
              "ret": "javax.management.openmbean.TabularData",
              "desc": "Lists all the exchanges which are currently inflight, limited and sorted"
            },
            {
              "args": [
                {
                  "name": "p1",
                  "type": "java.lang.String",
                  "desc": ""
                },
                {
                  "name": "p2",
                  "type": "int",
                  "desc": ""
                },
                {
                  "name": "p3",
                  "type": "boolean",
                  "desc": ""
                }
              ],
              "ret": "javax.management.openmbean.TabularData",
              "desc": "List all the exchanges that origins from the given route, which are currently inflight, limited and sorted"
            },
            {
              "args": [],
              "ret": "javax.management.openmbean.TabularData",
              "desc": "Lists all the exchanges which are currently inflight"
            }
          ]
        },
        "attr": {
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service State"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "ServiceType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service Type"
          },
          "Size": {
            "rw": false,
            "type": "int",
            "desc": "Current size of inflight exchanges."
          },
          "SupportSuspension": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service supports suspension"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "Suspended": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is suspended"
          },
          "StaticService": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is static"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedInflightRepository",
        "desc": "Managed InflightRepository"
      },
      "context=MyCamel,name=DefaultTransformerRegistry,type=services": {
        "op": {
          "getDynamicSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "DynamicSize"
          },
          "suspend": {
            "args": [],
            "ret": "void",
            "desc": "Suspend Service"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resume Service"
          },
          "isSuspended": {
            "args": [],
            "ret": "boolean",
            "desc": "Suspended"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "Start Service"
          },
          "getStaticSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "StaticSize"
          },
          "getRouteId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "RouteId"
          },
          "purge": {
            "args": [],
            "ret": "void",
            "desc": "Purges the cache"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "isSupportSuspension": {
            "args": [],
            "ret": "boolean",
            "desc": "SupportSuspension"
          },
          "getSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "Size"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "Stop Service"
          },
          "listTransformers": {
            "args": [],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Lists all the transformers in the registry"
          },
          "getMaximumCacheSize": {
            "args": [],
            "ret": "java.lang.Integer",
            "desc": "MaximumCacheSize"
          },
          "isStaticService": {
            "args": [],
            "ret": "boolean",
            "desc": "StaticService"
          },
          "getSource": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Source"
          },
          "getServiceType": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "ServiceType"
          }
        },
        "attr": {
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "Size": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Number of total transformers cached"
          },
          "SupportSuspension": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service supports suspension"
          },
          "RouteId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Route ID"
          },
          "StaticService": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is static"
          },
          "Source": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Source"
          },
          "StaticSize": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Number of static transformers cached"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service State"
          },
          "ServiceType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Service Type"
          },
          "MaximumCacheSize": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Maximum cache size (capacity)"
          },
          "Suspended": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this service is suspended"
          },
          "DynamicSize": {
            "rw": false,
            "type": "java.lang.Integer",
            "desc": "Number of dynamic transformers cached"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedTransformerRegistry",
        "desc": "Managed TransformerRegistry"
      },
      "context=MyCamel,name=\"timer:\/\/foo\\?period=2000\",type=endpoints": {
        "op": {
          "explain": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "javax.management.openmbean.TabularData",
            "desc": "Explain how this endpoint is configured"
          },
          "isFixedRate": {
            "args": [],
            "ret": "boolean",
            "desc": "FixedRate"
          },
          "getEndpointUri": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "EndpointUri"
          },
          "getDelay": {
            "args": [],
            "ret": "long",
            "desc": "Delay"
          },
          "setTimerName": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "TimerName"
          },
          "isSingleton": {
            "args": [],
            "ret": "boolean",
            "desc": "Singleton"
          },
          "isMultipleConsumersSupported": {
            "args": [],
            "ret": "boolean",
            "desc": "MultipleConsumersSupported"
          },
          "setPeriod": {
            "args": [
              {
                "name": "p1",
                "type": "long",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Period"
          },
          "getTimerName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "TimerName"
          },
          "getPeriod": {
            "args": [],
            "ret": "long",
            "desc": "Period"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "setDaemon": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Daemon"
          },
          "getState": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "State"
          },
          "setRepeatCount": {
            "args": [
              {
                "name": "p1",
                "type": "long",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "RepeatCount"
          },
          "isDaemon": {
            "args": [],
            "ret": "boolean",
            "desc": "Daemon"
          },
          "informationJson": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Endpoint information as JSon"
          },
          "setFixedRate": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "FixedRate"
          },
          "setDelay": {
            "args": [
              {
                "name": "p1",
                "type": "long",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Delay"
          },
          "getRepeatCount": {
            "args": [],
            "ret": "long",
            "desc": "RepeatCount"
          }
        },
        "attr": {
          "EndpointUri": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Endpoint URI"
          },
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "MultipleConsumersSupported": {
            "rw": false,
            "type": "boolean",
            "desc": ""
          },
          "RepeatCount": {
            "rw": true,
            "type": "long",
            "desc": "Repeat Count"
          },
          "Daemon": {
            "rw": true,
            "type": "boolean",
            "desc": "Timer Daemon"
          },
          "State": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Endpoint State"
          },
          "Singleton": {
            "rw": false,
            "type": "boolean",
            "desc": "Singleton"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "Period": {
            "rw": true,
            "type": "long",
            "desc": "Timer Period"
          },
          "FixedRate": {
            "rw": true,
            "type": "boolean",
            "desc": "Timer FixedRate"
          },
          "TimerName": {
            "rw": true,
            "type": "java.lang.String",
            "desc": "Timer Name"
          },
          "Delay": {
            "rw": true,
            "type": "long",
            "desc": "Timer Delay"
          }
        },
        "class": "org.apache.camel.component.timer.TimerEndpoint",
        "desc": "Managed TimerEndpoint"
      },
      "context=MyCamel,name=BacklogTracer,type=tracer": {
        "op": {
          "getBacklogSize": {
            "args": [],
            "ret": "int",
            "desc": "BacklogSize"
          },
          "dumpAllTracedMessagesAsXml": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Dumps all the traced messages in xml format"
          },
          "setTracePattern": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "TracePattern"
          },
          "setTraceFilter": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "TraceFilter"
          },
          "setBodyIncludeStreams": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "BodyIncludeStreams"
          },
          "setBodyMaxChars": {
            "args": [
              {
                "name": "p1",
                "type": "int",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "BodyMaxChars"
          },
          "setBacklogSize": {
            "args": [
              {
                "name": "p1",
                "type": "int",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "BacklogSize"
          },
          "getBodyMaxChars": {
            "args": [],
            "ret": "int",
            "desc": "BodyMaxChars"
          },
          "resetTraceCounter": {
            "args": [],
            "ret": "void",
            "desc": "Resets the trace counter"
          },
          "getTraceFilter": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "TraceFilter"
          },
          "getTraceCounter": {
            "args": [],
            "ret": "long",
            "desc": "TraceCounter"
          },
          "isBodyIncludeFiles": {
            "args": [],
            "ret": "boolean",
            "desc": "BodyIncludeFiles"
          },
          "setBodyIncludeFiles": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "BodyIncludeFiles"
          },
          "dumpTracedMessages": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.util.List",
            "desc": "Dumps the traced messages for the given node or route"
          },
          "isRemoveOnDump": {
            "args": [],
            "ret": "boolean",
            "desc": "RemoveOnDump"
          },
          "dumpTracedMessagesAsXml": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              }
            ],
            "ret": "java.lang.String",
            "desc": "Dumps the traced messages for the given node or route in xml format"
          },
          "clear": {
            "args": [],
            "ret": "void",
            "desc": "Clears the backlog"
          },
          "dumpAllTracedMessages": {
            "args": [],
            "ret": "java.util.List",
            "desc": "Dumps all the traced messages"
          },
          "getCamelManagementName": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelManagementName"
          },
          "getCamelId": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "CamelId"
          },
          "isBodyIncludeStreams": {
            "args": [],
            "ret": "boolean",
            "desc": "BodyIncludeStreams"
          },
          "setEnabled": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Enabled"
          },
          "isEnabled": {
            "args": [],
            "ret": "boolean",
            "desc": "Enabled"
          },
          "setRemoveOnDump": {
            "args": [
              {
                "name": "p1",
                "type": "boolean",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "RemoveOnDump"
          },
          "getTracePattern": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "TracePattern"
          }
        },
        "attr": {
          "BodyIncludeStreams": {
            "rw": true,
            "type": "boolean",
            "desc": "Whether to include stream based message body in the trace message."
          },
          "CamelManagementName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ManagementName"
          },
          "BacklogSize": {
            "rw": true,
            "type": "int",
            "desc": "Number of maximum traced messages in total to keep in the backlog (FIFO queue)"
          },
          "TraceCounter": {
            "rw": false,
            "type": "long",
            "desc": "Number of total traced messages"
          },
          "CamelId": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Camel ID"
          },
          "RemoveOnDump": {
            "rw": true,
            "type": "boolean",
            "desc": "Whether to remove traced message from backlog when dumping trace messages"
          },
          "BodyMaxChars": {
            "rw": true,
            "type": "int",
            "desc": "Number of maximum chars in the message body in the trace message. Use zero or negative value to have unlimited size."
          },
          "Enabled": {
            "rw": true,
            "type": "boolean",
            "desc": "Is tracing enabled"
          },
          "TraceFilter": {
            "rw": true,
            "type": "java.lang.String",
            "desc": "To filter tracing by predicate (uses simple language by default)"
          },
          "BodyIncludeFiles": {
            "rw": true,
            "type": "boolean",
            "desc": "Whether to include file based message body in the trace message."
          },
          "TracePattern": {
            "rw": true,
            "type": "java.lang.String",
            "desc": "To filter tracing by nodes (pattern)"
          }
        },
        "class": "org.apache.camel.management.mbean.ManagedBacklogTracer",
        "desc": "Managed BacklogTracer"
      }
    },
    "com.sun.management": {
      "type=HotSpotDiagnostic": {
        "op": {
          "setVMOption": {
            "args": [
              {
                "name": "p0",
                "type": "java.lang.String",
                "desc": "p0"
              },
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": "p1"
              }
            ],
            "ret": "void",
            "desc": "setVMOption"
          },
          "getVMOption": {
            "args": [
              {
                "name": "p0",
                "type": "java.lang.String",
                "desc": "p0"
              }
            ],
            "ret": "javax.management.openmbean.CompositeData",
            "desc": "getVMOption"
          },
          "dumpHeap": {
            "args": [
              {
                "name": "p0",
                "type": "java.lang.String",
                "desc": "p0"
              },
              {
                "name": "p1",
                "type": "boolean",
                "desc": "p1"
              }
            ],
            "ret": "void",
            "desc": "dumpHeap"
          }
        },
        "attr": {
          "DiagnosticOptions": {
            "rw": false,
            "type": "[Ljavax.management.openmbean.CompositeData;",
            "desc": "DiagnosticOptions"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          }
        },
        "class": "sun.management.HotSpotDiagnostic",
        "desc": "Information on the management interface of the MBean"
      },
      "type=DiagnosticCommand": {
        "op": {
          "vmUptime": {
            "args": [
              {
                "name": "arguments",
                "type": "[Ljava.lang.String;",
                "desc": "Array of Diagnostic Commands Arguments and Options"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Print VM uptime."
          },
          "vmNativeMemory": {
            "args": [
              {
                "name": "arguments",
                "type": "[Ljava.lang.String;",
                "desc": "Array of Diagnostic Commands Arguments and Options"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Print native memory usage"
          },
          "gcClassHistogram": {
            "args": [
              {
                "name": "arguments",
                "type": "[Ljava.lang.String;",
                "desc": "Array of Diagnostic Commands Arguments and Options"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Provide statistics about the Java heap usage."
          },
          "gcRunFinalization": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Call java.lang.System.runFinalization()."
          },
          "gcClassStats": {
            "args": [
              {
                "name": "arguments",
                "type": "[Ljava.lang.String;",
                "desc": "Array of Diagnostic Commands Arguments and Options"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Provide statistics about Java class meta data. Requires -XX:+UnlockDiagnosticVMOptions."
          },
          "threadPrint": {
            "args": [
              {
                "name": "arguments",
                "type": "[Ljava.lang.String;",
                "desc": "Array of Diagnostic Commands Arguments and Options"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Print all threads with stacktraces."
          },
          "gcFinalizerInfo": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Provide information about Java finalization queue."
          },
          "gcRotateLog": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Force the GC log file to be rotated."
          },
          "help": {
            "args": [
              {
                "name": "arguments",
                "type": "[Ljava.lang.String;",
                "desc": "Array of Diagnostic Commands Arguments and Options"
              }
            ],
            "ret": "java.lang.String",
            "desc": "For more information about a specific command use 'help <command>'. With no argument this will show a list of available commands. 'help all' will show help for all commands."
          },
          "vmSystemProperties": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Print system properties."
          },
          "vmClassloaderStats": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Print statistics about all ClassLoaders."
          },
          "gcHeapInfo": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Provide generic Java heap information."
          },
          "gcRun": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Call java.lang.System.gc()."
          },
          "vmVersion": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Print JVM version information."
          },
          "vmFlags": {
            "args": [
              {
                "name": "arguments",
                "type": "[Ljava.lang.String;",
                "desc": "Array of Diagnostic Commands Arguments and Options"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Print VM flag options and their current values."
          },
          "vmCommandLine": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Print the command line used to start this VM instance."
          },
          "vmDynlibs": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Print loaded dynamic libraries."
          }
        },
        "class": "sun.management.DiagnosticCommandImpl",
        "desc": "Diagnostic Commands"
      }
    },
    "jmx4perl": {
      "type=Config": {
        "op": {
          "setHistoryEntriesForOperation": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p4",
                "type": "int",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "setHistoryLimitForOperation": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p4",
                "type": "int",
                "desc": ""
              },
              {
                "name": "p5",
                "type": "long",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "resetDebugInfo": {
            "args": [],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "resetHistoryEntries": {
            "args": [],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "setHistoryEntriesForAttribute": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p4",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p5",
                "type": "int",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "setHistoryLimitForAttribute": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p4",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p5",
                "type": "int",
                "desc": ""
              },
              {
                "name": "p6",
                "type": "long",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "debugInfo": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Operation exposed for management"
          }
        },
        "attr": {
          "HistorySize": {
            "rw": false,
            "type": "int",
            "desc": "Attribute exposed for management"
          },
          "MaxDebugEntries": {
            "rw": true,
            "type": "int",
            "desc": "Attribute exposed for management"
          },
          "HistoryMaxEntries": {
            "rw": true,
            "type": "int",
            "desc": "Attribute exposed for management"
          },
          "Debug": {
            "rw": true,
            "type": "boolean",
            "desc": "Attribute exposed for management"
          }
        },
        "class": "org.jolokia.backend.Config",
        "desc": "Information on the management interface of the MBean"
      }
    },
    "java.nio": {
      "name=direct,type=BufferPool": {
        "attr": {
          "TotalCapacity": {
            "rw": false,
            "type": "long",
            "desc": "TotalCapacity"
          },
          "MemoryUsed": {
            "rw": false,
            "type": "long",
            "desc": "MemoryUsed"
          },
          "Count": {
            "rw": false,
            "type": "long",
            "desc": "Count"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          }
        },
        "class": "sun.management.ManagementFactoryHelper$1",
        "desc": "Information on the management interface of the MBean"
      },
      "name=mapped,type=BufferPool": {
        "attr": {
          "TotalCapacity": {
            "rw": false,
            "type": "long",
            "desc": "TotalCapacity"
          },
          "MemoryUsed": {
            "rw": false,
            "type": "long",
            "desc": "MemoryUsed"
          },
          "Count": {
            "rw": false,
            "type": "long",
            "desc": "Count"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "ObjectName": {
            "rw": false,
            "type": "javax.management.ObjectName",
            "desc": "ObjectName"
          }
        },
        "class": "sun.management.ManagementFactoryHelper$1",
        "desc": "Information on the management interface of the MBean"
      }
    },
    "org.xnio": {
      "address=\"\/0:0:0:0:0:0:0:0:8080\",provider=\"nio\",type=Xnio,worker=\"XNIO-2\"": {
        "attr": {
          "ProviderName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "ProviderName"
          },
          "ConnectionCount": {
            "rw": false,
            "type": "int",
            "desc": "ConnectionCount"
          },
          "ConnectionLimitLowWater": {
            "rw": false,
            "type": "int",
            "desc": "ConnectionLimitLowWater"
          },
          "BindAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "BindAddress"
          },
          "ConnectionLimitHighWater": {
            "rw": false,
            "type": "int",
            "desc": "ConnectionLimitHighWater"
          },
          "WorkerName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "WorkerName"
          }
        },
        "class": "org.xnio.nio.QueuedNioTcpServer$3",
        "desc": "Information on the management interface of the MBean"
      },
      "provider=\"nio\",type=Xnio": {
        "attr": {
          "Version": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Version"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          }
        },
        "class": "org.xnio.nio.NioXnio$3",
        "desc": "Information on the management interface of the MBean"
      },
      "address=\"\/0:0:0:0:0:0:0:0:8081\",provider=\"nio\",type=Xnio,worker=\"XNIO-1\"": {
        "attr": {
          "ProviderName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "ProviderName"
          },
          "ConnectionCount": {
            "rw": false,
            "type": "int",
            "desc": "ConnectionCount"
          },
          "ConnectionLimitLowWater": {
            "rw": false,
            "type": "int",
            "desc": "ConnectionLimitLowWater"
          },
          "BindAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "BindAddress"
          },
          "ConnectionLimitHighWater": {
            "rw": false,
            "type": "int",
            "desc": "ConnectionLimitHighWater"
          },
          "WorkerName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "WorkerName"
          }
        },
        "class": "org.xnio.nio.QueuedNioTcpServer$3",
        "desc": "Information on the management interface of the MBean"
      },
      "provider=\"nio\",type=Xnio,worker=\"XNIO-1\"": {
        "attr": {
          "ProviderName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "ProviderName"
          },
          "WorkerQueueSize": {
            "rw": false,
            "type": "int",
            "desc": "WorkerQueueSize"
          },
          "ShutdownRequested": {
            "rw": false,
            "type": "boolean",
            "desc": "ShutdownRequested"
          },
          "IoThreadCount": {
            "rw": false,
            "type": "int",
            "desc": "IoThreadCount"
          },
          "CoreWorkerPoolSize": {
            "rw": false,
            "type": "int",
            "desc": "CoreWorkerPoolSize"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "MaxWorkerPoolSize": {
            "rw": false,
            "type": "int",
            "desc": "MaxWorkerPoolSize"
          }
        },
        "class": "org.xnio.nio.NioXnioWorker$1",
        "desc": "Information on the management interface of the MBean"
      },
      "provider=\"nio\",type=Xnio,worker=\"XNIO-2\"": {
        "attr": {
          "ProviderName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "ProviderName"
          },
          "WorkerQueueSize": {
            "rw": false,
            "type": "int",
            "desc": "WorkerQueueSize"
          },
          "ShutdownRequested": {
            "rw": false,
            "type": "boolean",
            "desc": "ShutdownRequested"
          },
          "IoThreadCount": {
            "rw": false,
            "type": "int",
            "desc": "IoThreadCount"
          },
          "CoreWorkerPoolSize": {
            "rw": false,
            "type": "int",
            "desc": "CoreWorkerPoolSize"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Name"
          },
          "MaxWorkerPoolSize": {
            "rw": false,
            "type": "int",
            "desc": "MaxWorkerPoolSize"
          }
        },
        "class": "org.xnio.nio.NioXnioWorker$1",
        "desc": "Information on the management interface of the MBean"
      }
    },
    "jolokia": {
      "type=Discovery": {
        "op": {
          "lookupAgentsWithTimeout": {
            "args": [
              {
                "name": "p1",
                "type": "int",
                "desc": ""
              }
            ],
            "ret": "java.util.List",
            "desc": "Operation exposed for management"
          },
          "lookupAgents": {
            "args": [],
            "ret": "java.util.List",
            "desc": "Operation exposed for management"
          }
        },
        "class": "org.jolokia.discovery.JolokiaDiscovery",
        "desc": "Information on the management interface of the MBean"
      },
      "type=ServerHandler": {
        "op": {
          "mBeanServersInfo": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Operation exposed for management"
          }
        },
        "class": "org.jolokia.backend.MBeanServerHandler",
        "desc": "Information on the management interface of the MBean"
      },
      "type=Config": {
        "op": {
          "setHistoryEntriesForOperation": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p4",
                "type": "int",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "setHistoryLimitForOperation": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p4",
                "type": "int",
                "desc": ""
              },
              {
                "name": "p5",
                "type": "long",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "resetDebugInfo": {
            "args": [],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "resetHistoryEntries": {
            "args": [],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "setHistoryEntriesForAttribute": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p4",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p5",
                "type": "int",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "setHistoryLimitForAttribute": {
            "args": [
              {
                "name": "p1",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p2",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p3",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p4",
                "type": "java.lang.String",
                "desc": ""
              },
              {
                "name": "p5",
                "type": "int",
                "desc": ""
              },
              {
                "name": "p6",
                "type": "long",
                "desc": ""
              }
            ],
            "ret": "void",
            "desc": "Operation exposed for management"
          },
          "debugInfo": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "Operation exposed for management"
          }
        },
        "attr": {
          "HistorySize": {
            "rw": false,
            "type": "int",
            "desc": "Attribute exposed for management"
          },
          "MaxDebugEntries": {
            "rw": true,
            "type": "int",
            "desc": "Attribute exposed for management"
          },
          "HistoryMaxEntries": {
            "rw": true,
            "type": "int",
            "desc": "Attribute exposed for management"
          },
          "Debug": {
            "rw": true,
            "type": "boolean",
            "desc": "Attribute exposed for management"
          }
        },
        "class": "org.jolokia.backend.Config",
        "desc": "Information on the management interface of the MBean"
      }
    },
    "org.apache.activemq.artemis": {
      "address=\"$.artemis.internal.sf.my-cluster.04b8462d-eba1-11ec-b1c3-fa8c2b10f473\",broker=\"amq-broker\",component=addresses": {
        "op": {
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resumes the queues bound to this address"
          },
          "clearDuplicateIdCache": {
            "args": [],
            "ret": "boolean",
            "desc": "clearDuplicateIdCache"
          },
          "sendMessage": {
            "args": [
              {
                "name": "headers",
                "type": "java.util.Map",
                "desc": "The headers to add to the message"
              },
              {
                "name": "type",
                "type": "int",
                "desc": "A type for the message"
              },
              {
                "name": "body",
                "type": "java.lang.String",
                "desc": "The body (byte[]) of the message encoded as a string using Base64"
              },
              {
                "name": "durable",
                "type": "boolean",
                "desc": "Whether the message is durable"
              },
              {
                "name": "user",
                "type": "java.lang.String",
                "desc": "The user to authenticate with"
              },
              {
                "name": "password",
                "type": "java.lang.String",
                "desc": "The users password to authenticate with"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Sends a TextMessage to a password-protected address."
          },
          "purge": {
            "args": [],
            "ret": "long",
            "desc": "Purges the queues bound to this address. Returns the total number of messages purged."
          },
          "pause": [
            {
              "args": [],
              "ret": "void",
              "desc": "Pauses the queues bound to this address"
            },
            {
              "args": [
                {
                  "name": "persist",
                  "type": "boolean",
                  "desc": "if true, the pause state will be persisted."
                }
              ],
              "ret": "void",
              "desc": "Pauses the queues bound to this address"
            }
          ]
        },
        "attr": {
          "RoutingTypesAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Get the routing types enabled on this address as JSON"
          },
          "RetroactiveResource": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is used for a retroactive address"
          },
          "AddressSize": {
            "rw": false,
            "type": "long",
            "desc": "the number of estimated bytes being used by all the queue(s) bound to this address; used to control paging and blocking"
          },
          "NumberOfBytesPerPage": {
            "rw": false,
            "type": "long",
            "desc": "number of bytes used by each page for this address"
          },
          "Address": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "managed address"
          },
          "CurrentDuplicateIdCacheSize": {
            "rw": false,
            "type": "long",
            "desc": "the size of the duplicate ID cache for this address"
          },
          "Internal": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address was created for the broker's internal use"
          },
          "Paging": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is paging"
          },
          "RolesAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "roles  (name and permissions) associated with this address using JSON serialization"
          },
          "Roles": {
            "rw": false,
            "type": "[Ljava.lang.Object;",
            "desc": "roles (name and permissions) associated with this address"
          },
          "BindingNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of all bindings (both queues and diverts) bound to this address"
          },
          "NumberOfPages": {
            "rw": false,
            "type": "int",
            "desc": "number of pages used by this address"
          },
          "UnRoutedMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages not routed to any bindings"
          },
          "AllQueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of both the local & remote queue(s) bound to this address"
          },
          "QueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of the local queue(s) bound to this address"
          },
          "Temporary": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is temporary"
          },
          "RoutingTypes": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "Get the routing types enabled on this address"
          },
          "AutoCreated": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address was created automatically in response to client action"
          },
          "NumberOfMessages": {
            "rw": false,
            "type": "long",
            "desc": "the sum of messages on queue(s), including messages in delivery"
          },
          "RemoteQueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of the remote queue(s) bound to this address"
          },
          "RoutedMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages routed to one or more bindings"
          },
          "MessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages currently in all queues bound to this address (includes scheduled, paged, and in-delivery messages)"
          },
          "Paused": {
            "rw": false,
            "type": "boolean",
            "desc": "indicates if the queues bound to this address are paused"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "address=\"$.artemis.internal.sf.my-cluster.04b8462d-eba1-11ec-b1c3-fa8c2b10f473\",broker=\"amq-broker\",component=addresses,queue=\"$.artemis.internal.sf.my-cluster.04b8462d-eba1-11ec-b1c3-fa8c2b10f473\",routing-type=\"multicast\",subcomponent=queues": {
        "op": {
          "listMessages": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "[Ljava.util.Map;",
            "desc": "List all the messages in the queue matching the given filter"
          },
          "resetMessagesExpired": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesExpired property"
          },
          "listScheduledMessagesAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the messages scheduled for delivery and returns them using JSON"
          },
          "moveMessage": [
            {
              "args": [
                {
                  "name": "messageID",
                  "type": "long",
                  "desc": "A message ID"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the message to"
                }
              ],
              "ret": "boolean",
              "desc": "Move the message corresponding to the given messageID to another queue. rejectDuplicate=false on this case"
            },
            {
              "args": [
                {
                  "name": "messageID",
                  "type": "long",
                  "desc": "A message ID"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the message to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "boolean",
              "desc": "Move the message corresponding to the given messageID to another queue"
            }
          ],
          "moveMessages": [
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                },
                {
                  "name": "messageCount",
                  "type": "int",
                  "desc": "Number of messages to move."
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages). RejectDuplicates=false on this case."
            }
          ],
          "resetMessageCounter": {
            "args": [],
            "ret": "void",
            "desc": "Reset the message counters"
          },
          "sendMessageToDeadLetterAddress": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Send the message corresponding to the given messageID to this queue's Dead Letter Address"
          },
          "removeMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Remove the message corresponding to the given messageID"
          },
          "listScheduledMessages": {
            "args": [],
            "ret": "[Ljava.util.Map;",
            "desc": "List the messages scheduled for delivery"
          },
          "listDeliveringMessages": {
            "args": [],
            "ret": "java.util.Map",
            "desc": "List all messages being delivered per consumer"
          },
          "resetMessagesAcknowledged": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesAcknowledged property"
          },
          "changeMessagesPriority": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              },
              {
                "name": "newPriority",
                "type": "int",
                "desc": "the new priority (between 0 and 9)"
              }
            ],
            "ret": "int",
            "desc": "Change the priority of the messages corresponding to the given filter"
          },
          "listMessageCounterHistoryAsHTML": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters history HTML"
          },
          "listConsumersAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all the existent consumers on the Queue"
          },
          "enable": {
            "args": [],
            "ret": "void",
            "desc": "Enables routing of messages to the Queue"
          },
          "retryMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Retry the message corresponding to the given messageID to the original queue"
          },
          "removeAllMessages": {
            "args": [],
            "ret": "int",
            "desc": "Remove all the messages from the Queue (and returns the number of removed messages)"
          },
          "listMessagesAsJSON": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "java.lang.String",
            "desc": "List all the messages in the queue matching the given filter and returns them using JSON"
          },
          "listGroupsAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all the existent group to consumers mappings on the Queue"
          },
          "removeMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "int",
              "desc": "Remove the messages corresponding to the given filter (and returns the number of removed messages)"
            },
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "int",
              "desc": "Remove the messages corresponding to the given filter (and returns the number of removed messages)"
            }
          ],
          "flushExecutor": {
            "args": [],
            "ret": "void",
            "desc": "Flush internal executors"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resumes delivery of queued messages and gets the queue out of paused state. It will also affected the state of a persisted pause."
          },
          "countDeliveringMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "This filter separate account messages"
                },
                {
                  "name": "groupByProperty",
                  "type": "java.lang.String",
                  "desc": "This property to group by"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Returns the number of the messages in the queue matching the given filter, grouped by the given property field"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue matching the given filter"
            }
          ],
          "resetAllGroups": {
            "args": [],
            "ret": "void",
            "desc": "Resets all groups"
          },
          "countMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue matching the given filter"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "This filter separate account messages"
                },
                {
                  "name": "groupByProperty",
                  "type": "java.lang.String",
                  "desc": "This property to group by"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Returns the number of the messages in the queue matching the given filter, grouped by the given property field"
            },
            {
              "args": [],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue"
            }
          ],
          "listMessageCounterAsHTML": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters as HTML"
          },
          "resetMessagesKilled": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesKilled property"
          },
          "listMessageCounterHistory": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters history"
          },
          "sendMessage": {
            "args": [
              {
                "name": "headers",
                "type": "java.util.Map",
                "desc": "The headers to add to the message"
              },
              {
                "name": "type",
                "type": "int",
                "desc": "A type for the message"
              },
              {
                "name": "body",
                "type": "java.lang.String",
                "desc": "The body (byte[]) of the message encoded as a string using Base64"
              },
              {
                "name": "durable",
                "type": "boolean",
                "desc": "Whether the message is durable"
              },
              {
                "name": "user",
                "type": "java.lang.String",
                "desc": "The user to authenticate with"
              },
              {
                "name": "password",
                "type": "java.lang.String",
                "desc": "The users password to authenticate with"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Sends a TextMessage to a password-protected destination."
          },
          "listMessageCounter": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters"
          },
          "resetMessagesAdded": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesAdded property"
          },
          "pause": [
            {
              "args": [
                {
                  "name": "persist",
                  "type": "boolean",
                  "desc": "if true, the pause state will be persisted."
                }
              ],
              "ret": "void",
              "desc": "Pauses the Queue"
            },
            {
              "args": [],
              "ret": "void",
              "desc": "Pauses the Queue"
            }
          ],
          "listDeliveringMessagesAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "list all messages being delivered per consumer using JSON form"
          },
          "expireMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Remove the message corresponding to the given messageID"
          },
          "resetGroup": {
            "args": [
              {
                "name": "groupID",
                "type": "java.lang.String",
                "desc": "ID of group to reset"
              }
            ],
            "ret": "void",
            "desc": "Reset the specified group"
          },
          "changeMessagePriority": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              },
              {
                "name": "newPriority",
                "type": "int",
                "desc": "the new priority (between 0 and 9)"
              }
            ],
            "ret": "boolean",
            "desc": "Change the priority of the message corresponding to the given messageID"
          },
          "disable": {
            "args": [],
            "ret": "void",
            "desc": "Disables routing of messages to the Queue"
          },
          "sendMessagesToDeadLetterAddress": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "int",
            "desc": "Send the messages corresponding to the given filter to this queue's Dead Letter Address"
          },
          "retryMessages": {
            "args": [],
            "ret": "int",
            "desc": "Retry all messages on a DLQ to their respective original queues"
          },
          "expireMessages": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter"
              }
            ],
            "ret": "int",
            "desc": "Expire the messages corresponding to the given filter (and returns the number of expired messages)"
          },
          "browse": [
            {
              "args": [],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "page",
                  "type": "int",
                  "desc": "Current page"
                },
                {
                  "name": "pageSize",
                  "type": "int",
                  "desc": "Page size"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "page",
                  "type": "int",
                  "desc": "Current page"
                },
                {
                  "name": "pageSize",
                  "type": "int",
                  "desc": "Page size"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "filter"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            }
          ]
        },
        "attr": {
          "ConfigurationManaged": {
            "rw": false,
            "type": "boolean",
            "desc": "is this queue managed by configuration (broker.xml)"
          },
          "MaxConsumers": {
            "rw": false,
            "type": "int",
            "desc": "maximum number of consumers allowed on this queue at any one time"
          },
          "Address": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "address this queue is bound to"
          },
          "Exclusive": {
            "rw": false,
            "type": "boolean",
            "desc": "If the queue should route exclusively to one consumer"
          },
          "DurableDeliveringSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable messages that this queue is currently delivering to its consumers"
          },
          "PersistentSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of all messages (including durable and non-durable) currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "GroupBuckets": {
            "rw": false,
            "type": "int",
            "desc": "Get the group buckets"
          },
          "MessagesKilled": {
            "rw": false,
            "type": "long",
            "desc": "number of messages removed from this queue since it was created due to exceeding the max delivery attempts"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "name of this queue"
          },
          "DelayBeforeDispatch": {
            "rw": false,
            "type": "long",
            "desc": "Return the Consumers Before Dispatch"
          },
          "DurableMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of durable messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "PreparedTransactionMessageCount": {
            "rw": false,
            "type": "int",
            "desc": "return how many messages are stuck in prepared transactions"
          },
          "ID": {
            "rw": false,
            "type": "long",
            "desc": "ID of this queue"
          },
          "RetroactiveResource": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is used for a retroactive address"
          },
          "DeadLetterAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "dead-letter address associated with this queue"
          },
          "MessagesAcknowledged": {
            "rw": false,
            "type": "long",
            "desc": "number of messages acknowledged from this queue since it was created"
          },
          "MessagesExpired": {
            "rw": false,
            "type": "long",
            "desc": "number of messages expired from this queue since it was created"
          },
          "DeliveringSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of messages that this queue is currently delivering to its consumers"
          },
          "LastValue": {
            "rw": false,
            "type": "boolean",
            "desc": "is this queue a last value queue"
          },
          "LastValueKey": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "last value key"
          },
          "DurableScheduledSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable scheduled messages in this queue"
          },
          "GroupRebalance": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the groups of this queue are automatically rebalanced"
          },
          "GroupFirstKey": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Get the header key to notify a consumer of a group change"
          },
          "User": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "the user that created the queue"
          },
          "GroupCount": {
            "rw": false,
            "type": "int",
            "desc": "Get the current number of active groups"
          },
          "PurgeOnNoConsumers": {
            "rw": false,
            "type": "boolean",
            "desc": "purge this queue when the last consumer disconnects"
          },
          "ScheduledCount": {
            "rw": false,
            "type": "long",
            "desc": "number of scheduled messages in this queue"
          },
          "DurableScheduledCount": {
            "rw": false,
            "type": "long",
            "desc": "number of durable scheduled messages in this queue"
          },
          "ConsumersBeforeDispatch": {
            "rw": false,
            "type": "int",
            "desc": "Return the Consumers Before Dispatch"
          },
          "ExpiryAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "expiry address associated with this queue"
          },
          "FirstMessageAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "first message on the queue as JSON"
          },
          "GroupRebalancePauseDispatch": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the dispatch is paused when groups of this queue are automatically rebalanced"
          },
          "Paused": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the queue is paused"
          },
          "RoutingType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "routing type of this queue"
          },
          "DurableDeliveringCount": {
            "rw": false,
            "type": "int",
            "desc": "number of durable messages that this queue is currently delivering to its consumers"
          },
          "FirstMessageAge": {
            "rw": false,
            "type": "java.lang.Long",
            "desc": "age of the first message in milliseconds"
          },
          "DurablePersistentSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "MessagesAdded": {
            "rw": false,
            "type": "long",
            "desc": "number of messages added to this queue since it was created"
          },
          "ConsumerCount": {
            "rw": false,
            "type": "int",
            "desc": "number of consumers consuming messages from this queue"
          },
          "RingSize": {
            "rw": false,
            "type": "long",
            "desc": "Get the ring size"
          },
          "DeliveringCount": {
            "rw": false,
            "type": "int",
            "desc": "number of messages that this queue is currently delivering to its consumers"
          },
          "Enabled": {
            "rw": false,
            "type": "boolean",
            "desc": "if the queue is enabled, default it is enabled, when disabled messages will not be routed to the queue"
          },
          "AcknowledgeAttempts": {
            "rw": false,
            "type": "long",
            "desc": "number of messages acknowledged attempts from this queue since it was created"
          },
          "Temporary": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is temporary"
          },
          "FirstMessageTimestamp": {
            "rw": false,
            "type": "java.lang.Long",
            "desc": "timestamp of the first message in milliseconds"
          },
          "Filter": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "filter associated with this queue"
          },
          "ScheduledSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of scheduled messages in this queue"
          },
          "Durable": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is durable"
          },
          "MessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "address=\"DLQ\",broker=\"amq-broker\",component=addresses": {
        "op": {
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resumes the queues bound to this address"
          },
          "clearDuplicateIdCache": {
            "args": [],
            "ret": "boolean",
            "desc": "clearDuplicateIdCache"
          },
          "sendMessage": {
            "args": [
              {
                "name": "headers",
                "type": "java.util.Map",
                "desc": "The headers to add to the message"
              },
              {
                "name": "type",
                "type": "int",
                "desc": "A type for the message"
              },
              {
                "name": "body",
                "type": "java.lang.String",
                "desc": "The body (byte[]) of the message encoded as a string using Base64"
              },
              {
                "name": "durable",
                "type": "boolean",
                "desc": "Whether the message is durable"
              },
              {
                "name": "user",
                "type": "java.lang.String",
                "desc": "The user to authenticate with"
              },
              {
                "name": "password",
                "type": "java.lang.String",
                "desc": "The users password to authenticate with"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Sends a TextMessage to a password-protected address."
          },
          "purge": {
            "args": [],
            "ret": "long",
            "desc": "Purges the queues bound to this address. Returns the total number of messages purged."
          },
          "pause": [
            {
              "args": [],
              "ret": "void",
              "desc": "Pauses the queues bound to this address"
            },
            {
              "args": [
                {
                  "name": "persist",
                  "type": "boolean",
                  "desc": "if true, the pause state will be persisted."
                }
              ],
              "ret": "void",
              "desc": "Pauses the queues bound to this address"
            }
          ]
        },
        "attr": {
          "RoutingTypesAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Get the routing types enabled on this address as JSON"
          },
          "RetroactiveResource": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is used for a retroactive address"
          },
          "AddressSize": {
            "rw": false,
            "type": "long",
            "desc": "the number of estimated bytes being used by all the queue(s) bound to this address; used to control paging and blocking"
          },
          "NumberOfBytesPerPage": {
            "rw": false,
            "type": "long",
            "desc": "number of bytes used by each page for this address"
          },
          "Address": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "managed address"
          },
          "CurrentDuplicateIdCacheSize": {
            "rw": false,
            "type": "long",
            "desc": "the size of the duplicate ID cache for this address"
          },
          "Internal": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address was created for the broker's internal use"
          },
          "Paging": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is paging"
          },
          "RolesAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "roles  (name and permissions) associated with this address using JSON serialization"
          },
          "Roles": {
            "rw": false,
            "type": "[Ljava.lang.Object;",
            "desc": "roles (name and permissions) associated with this address"
          },
          "BindingNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of all bindings (both queues and diverts) bound to this address"
          },
          "NumberOfPages": {
            "rw": false,
            "type": "int",
            "desc": "number of pages used by this address"
          },
          "UnRoutedMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages not routed to any bindings"
          },
          "AllQueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of both the local & remote queue(s) bound to this address"
          },
          "QueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of the local queue(s) bound to this address"
          },
          "Temporary": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is temporary"
          },
          "RoutingTypes": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "Get the routing types enabled on this address"
          },
          "AutoCreated": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address was created automatically in response to client action"
          },
          "NumberOfMessages": {
            "rw": false,
            "type": "long",
            "desc": "the sum of messages on queue(s), including messages in delivery"
          },
          "RemoteQueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of the remote queue(s) bound to this address"
          },
          "RoutedMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages routed to one or more bindings"
          },
          "MessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages currently in all queues bound to this address (includes scheduled, paged, and in-delivery messages)"
          },
          "Paused": {
            "rw": false,
            "type": "boolean",
            "desc": "indicates if the queues bound to this address are paused"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "address=\"DLQ\",broker=\"amq-broker\",component=addresses,queue=\"DLQ\",routing-type=\"anycast\",subcomponent=queues": {
        "op": {
          "listMessages": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "[Ljava.util.Map;",
            "desc": "List all the messages in the queue matching the given filter"
          },
          "resetMessagesExpired": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesExpired property"
          },
          "listScheduledMessagesAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the messages scheduled for delivery and returns them using JSON"
          },
          "moveMessage": [
            {
              "args": [
                {
                  "name": "messageID",
                  "type": "long",
                  "desc": "A message ID"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the message to"
                }
              ],
              "ret": "boolean",
              "desc": "Move the message corresponding to the given messageID to another queue. rejectDuplicate=false on this case"
            },
            {
              "args": [
                {
                  "name": "messageID",
                  "type": "long",
                  "desc": "A message ID"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the message to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "boolean",
              "desc": "Move the message corresponding to the given messageID to another queue"
            }
          ],
          "moveMessages": [
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                },
                {
                  "name": "messageCount",
                  "type": "int",
                  "desc": "Number of messages to move."
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages). RejectDuplicates=false on this case."
            }
          ],
          "resetMessageCounter": {
            "args": [],
            "ret": "void",
            "desc": "Reset the message counters"
          },
          "sendMessageToDeadLetterAddress": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Send the message corresponding to the given messageID to this queue's Dead Letter Address"
          },
          "removeMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Remove the message corresponding to the given messageID"
          },
          "listScheduledMessages": {
            "args": [],
            "ret": "[Ljava.util.Map;",
            "desc": "List the messages scheduled for delivery"
          },
          "listDeliveringMessages": {
            "args": [],
            "ret": "java.util.Map",
            "desc": "List all messages being delivered per consumer"
          },
          "resetMessagesAcknowledged": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesAcknowledged property"
          },
          "changeMessagesPriority": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              },
              {
                "name": "newPriority",
                "type": "int",
                "desc": "the new priority (between 0 and 9)"
              }
            ],
            "ret": "int",
            "desc": "Change the priority of the messages corresponding to the given filter"
          },
          "listMessageCounterHistoryAsHTML": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters history HTML"
          },
          "listConsumersAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all the existent consumers on the Queue"
          },
          "enable": {
            "args": [],
            "ret": "void",
            "desc": "Enables routing of messages to the Queue"
          },
          "retryMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Retry the message corresponding to the given messageID to the original queue"
          },
          "removeAllMessages": {
            "args": [],
            "ret": "int",
            "desc": "Remove all the messages from the Queue (and returns the number of removed messages)"
          },
          "listMessagesAsJSON": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "java.lang.String",
            "desc": "List all the messages in the queue matching the given filter and returns them using JSON"
          },
          "listGroupsAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all the existent group to consumers mappings on the Queue"
          },
          "removeMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "int",
              "desc": "Remove the messages corresponding to the given filter (and returns the number of removed messages)"
            },
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "int",
              "desc": "Remove the messages corresponding to the given filter (and returns the number of removed messages)"
            }
          ],
          "flushExecutor": {
            "args": [],
            "ret": "void",
            "desc": "Flush internal executors"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resumes delivery of queued messages and gets the queue out of paused state. It will also affected the state of a persisted pause."
          },
          "countDeliveringMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "This filter separate account messages"
                },
                {
                  "name": "groupByProperty",
                  "type": "java.lang.String",
                  "desc": "This property to group by"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Returns the number of the messages in the queue matching the given filter, grouped by the given property field"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue matching the given filter"
            }
          ],
          "resetAllGroups": {
            "args": [],
            "ret": "void",
            "desc": "Resets all groups"
          },
          "countMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue matching the given filter"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "This filter separate account messages"
                },
                {
                  "name": "groupByProperty",
                  "type": "java.lang.String",
                  "desc": "This property to group by"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Returns the number of the messages in the queue matching the given filter, grouped by the given property field"
            },
            {
              "args": [],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue"
            }
          ],
          "listMessageCounterAsHTML": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters as HTML"
          },
          "resetMessagesKilled": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesKilled property"
          },
          "listMessageCounterHistory": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters history"
          },
          "sendMessage": {
            "args": [
              {
                "name": "headers",
                "type": "java.util.Map",
                "desc": "The headers to add to the message"
              },
              {
                "name": "type",
                "type": "int",
                "desc": "A type for the message"
              },
              {
                "name": "body",
                "type": "java.lang.String",
                "desc": "The body (byte[]) of the message encoded as a string using Base64"
              },
              {
                "name": "durable",
                "type": "boolean",
                "desc": "Whether the message is durable"
              },
              {
                "name": "user",
                "type": "java.lang.String",
                "desc": "The user to authenticate with"
              },
              {
                "name": "password",
                "type": "java.lang.String",
                "desc": "The users password to authenticate with"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Sends a TextMessage to a password-protected destination."
          },
          "listMessageCounter": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters"
          },
          "resetMessagesAdded": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesAdded property"
          },
          "pause": [
            {
              "args": [
                {
                  "name": "persist",
                  "type": "boolean",
                  "desc": "if true, the pause state will be persisted."
                }
              ],
              "ret": "void",
              "desc": "Pauses the Queue"
            },
            {
              "args": [],
              "ret": "void",
              "desc": "Pauses the Queue"
            }
          ],
          "listDeliveringMessagesAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "list all messages being delivered per consumer using JSON form"
          },
          "expireMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Remove the message corresponding to the given messageID"
          },
          "resetGroup": {
            "args": [
              {
                "name": "groupID",
                "type": "java.lang.String",
                "desc": "ID of group to reset"
              }
            ],
            "ret": "void",
            "desc": "Reset the specified group"
          },
          "changeMessagePriority": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              },
              {
                "name": "newPriority",
                "type": "int",
                "desc": "the new priority (between 0 and 9)"
              }
            ],
            "ret": "boolean",
            "desc": "Change the priority of the message corresponding to the given messageID"
          },
          "disable": {
            "args": [],
            "ret": "void",
            "desc": "Disables routing of messages to the Queue"
          },
          "sendMessagesToDeadLetterAddress": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "int",
            "desc": "Send the messages corresponding to the given filter to this queue's Dead Letter Address"
          },
          "retryMessages": {
            "args": [],
            "ret": "int",
            "desc": "Retry all messages on a DLQ to their respective original queues"
          },
          "expireMessages": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter"
              }
            ],
            "ret": "int",
            "desc": "Expire the messages corresponding to the given filter (and returns the number of expired messages)"
          },
          "browse": [
            {
              "args": [],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "page",
                  "type": "int",
                  "desc": "Current page"
                },
                {
                  "name": "pageSize",
                  "type": "int",
                  "desc": "Page size"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "page",
                  "type": "int",
                  "desc": "Current page"
                },
                {
                  "name": "pageSize",
                  "type": "int",
                  "desc": "Page size"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "filter"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            }
          ]
        },
        "attr": {
          "ConfigurationManaged": {
            "rw": false,
            "type": "boolean",
            "desc": "is this queue managed by configuration (broker.xml)"
          },
          "MaxConsumers": {
            "rw": false,
            "type": "int",
            "desc": "maximum number of consumers allowed on this queue at any one time"
          },
          "Address": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "address this queue is bound to"
          },
          "Exclusive": {
            "rw": false,
            "type": "boolean",
            "desc": "If the queue should route exclusively to one consumer"
          },
          "DurableDeliveringSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable messages that this queue is currently delivering to its consumers"
          },
          "PersistentSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of all messages (including durable and non-durable) currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "GroupBuckets": {
            "rw": false,
            "type": "int",
            "desc": "Get the group buckets"
          },
          "MessagesKilled": {
            "rw": false,
            "type": "long",
            "desc": "number of messages removed from this queue since it was created due to exceeding the max delivery attempts"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "name of this queue"
          },
          "DelayBeforeDispatch": {
            "rw": false,
            "type": "long",
            "desc": "Return the Consumers Before Dispatch"
          },
          "DurableMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of durable messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "PreparedTransactionMessageCount": {
            "rw": false,
            "type": "int",
            "desc": "return how many messages are stuck in prepared transactions"
          },
          "ID": {
            "rw": false,
            "type": "long",
            "desc": "ID of this queue"
          },
          "RetroactiveResource": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is used for a retroactive address"
          },
          "DeadLetterAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "dead-letter address associated with this queue"
          },
          "MessagesAcknowledged": {
            "rw": false,
            "type": "long",
            "desc": "number of messages acknowledged from this queue since it was created"
          },
          "MessagesExpired": {
            "rw": false,
            "type": "long",
            "desc": "number of messages expired from this queue since it was created"
          },
          "DeliveringSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of messages that this queue is currently delivering to its consumers"
          },
          "LastValue": {
            "rw": false,
            "type": "boolean",
            "desc": "is this queue a last value queue"
          },
          "LastValueKey": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "last value key"
          },
          "DurableScheduledSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable scheduled messages in this queue"
          },
          "GroupRebalance": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the groups of this queue are automatically rebalanced"
          },
          "GroupFirstKey": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Get the header key to notify a consumer of a group change"
          },
          "User": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "the user that created the queue"
          },
          "GroupCount": {
            "rw": false,
            "type": "int",
            "desc": "Get the current number of active groups"
          },
          "PurgeOnNoConsumers": {
            "rw": false,
            "type": "boolean",
            "desc": "purge this queue when the last consumer disconnects"
          },
          "ScheduledCount": {
            "rw": false,
            "type": "long",
            "desc": "number of scheduled messages in this queue"
          },
          "DurableScheduledCount": {
            "rw": false,
            "type": "long",
            "desc": "number of durable scheduled messages in this queue"
          },
          "ConsumersBeforeDispatch": {
            "rw": false,
            "type": "int",
            "desc": "Return the Consumers Before Dispatch"
          },
          "ExpiryAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "expiry address associated with this queue"
          },
          "FirstMessageAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "first message on the queue as JSON"
          },
          "GroupRebalancePauseDispatch": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the dispatch is paused when groups of this queue are automatically rebalanced"
          },
          "Paused": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the queue is paused"
          },
          "RoutingType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "routing type of this queue"
          },
          "DurableDeliveringCount": {
            "rw": false,
            "type": "int",
            "desc": "number of durable messages that this queue is currently delivering to its consumers"
          },
          "FirstMessageAge": {
            "rw": false,
            "type": "java.lang.Long",
            "desc": "age of the first message in milliseconds"
          },
          "DurablePersistentSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "MessagesAdded": {
            "rw": false,
            "type": "long",
            "desc": "number of messages added to this queue since it was created"
          },
          "ConsumerCount": {
            "rw": false,
            "type": "int",
            "desc": "number of consumers consuming messages from this queue"
          },
          "RingSize": {
            "rw": false,
            "type": "long",
            "desc": "Get the ring size"
          },
          "DeliveringCount": {
            "rw": false,
            "type": "int",
            "desc": "number of messages that this queue is currently delivering to its consumers"
          },
          "Enabled": {
            "rw": false,
            "type": "boolean",
            "desc": "if the queue is enabled, default it is enabled, when disabled messages will not be routed to the queue"
          },
          "AcknowledgeAttempts": {
            "rw": false,
            "type": "long",
            "desc": "number of messages acknowledged attempts from this queue since it was created"
          },
          "Temporary": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is temporary"
          },
          "FirstMessageTimestamp": {
            "rw": false,
            "type": "java.lang.Long",
            "desc": "timestamp of the first message in milliseconds"
          },
          "Filter": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "filter associated with this queue"
          },
          "ScheduledSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of scheduled messages in this queue"
          },
          "Durable": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is durable"
          },
          "MessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "address=\"ExpiryQueue\",broker=\"amq-broker\",component=addresses": {
        "op": {
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resumes the queues bound to this address"
          },
          "clearDuplicateIdCache": {
            "args": [],
            "ret": "boolean",
            "desc": "clearDuplicateIdCache"
          },
          "sendMessage": {
            "args": [
              {
                "name": "headers",
                "type": "java.util.Map",
                "desc": "The headers to add to the message"
              },
              {
                "name": "type",
                "type": "int",
                "desc": "A type for the message"
              },
              {
                "name": "body",
                "type": "java.lang.String",
                "desc": "The body (byte[]) of the message encoded as a string using Base64"
              },
              {
                "name": "durable",
                "type": "boolean",
                "desc": "Whether the message is durable"
              },
              {
                "name": "user",
                "type": "java.lang.String",
                "desc": "The user to authenticate with"
              },
              {
                "name": "password",
                "type": "java.lang.String",
                "desc": "The users password to authenticate with"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Sends a TextMessage to a password-protected address."
          },
          "purge": {
            "args": [],
            "ret": "long",
            "desc": "Purges the queues bound to this address. Returns the total number of messages purged."
          },
          "pause": [
            {
              "args": [],
              "ret": "void",
              "desc": "Pauses the queues bound to this address"
            },
            {
              "args": [
                {
                  "name": "persist",
                  "type": "boolean",
                  "desc": "if true, the pause state will be persisted."
                }
              ],
              "ret": "void",
              "desc": "Pauses the queues bound to this address"
            }
          ]
        },
        "attr": {
          "RoutingTypesAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Get the routing types enabled on this address as JSON"
          },
          "RetroactiveResource": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is used for a retroactive address"
          },
          "AddressSize": {
            "rw": false,
            "type": "long",
            "desc": "the number of estimated bytes being used by all the queue(s) bound to this address; used to control paging and blocking"
          },
          "NumberOfBytesPerPage": {
            "rw": false,
            "type": "long",
            "desc": "number of bytes used by each page for this address"
          },
          "Address": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "managed address"
          },
          "CurrentDuplicateIdCacheSize": {
            "rw": false,
            "type": "long",
            "desc": "the size of the duplicate ID cache for this address"
          },
          "Internal": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address was created for the broker's internal use"
          },
          "Paging": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is paging"
          },
          "RolesAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "roles  (name and permissions) associated with this address using JSON serialization"
          },
          "Roles": {
            "rw": false,
            "type": "[Ljava.lang.Object;",
            "desc": "roles (name and permissions) associated with this address"
          },
          "BindingNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of all bindings (both queues and diverts) bound to this address"
          },
          "NumberOfPages": {
            "rw": false,
            "type": "int",
            "desc": "number of pages used by this address"
          },
          "UnRoutedMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages not routed to any bindings"
          },
          "AllQueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of both the local & remote queue(s) bound to this address"
          },
          "QueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of the local queue(s) bound to this address"
          },
          "Temporary": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is temporary"
          },
          "RoutingTypes": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "Get the routing types enabled on this address"
          },
          "AutoCreated": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address was created automatically in response to client action"
          },
          "NumberOfMessages": {
            "rw": false,
            "type": "long",
            "desc": "the sum of messages on queue(s), including messages in delivery"
          },
          "RemoteQueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of the remote queue(s) bound to this address"
          },
          "RoutedMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages routed to one or more bindings"
          },
          "MessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages currently in all queues bound to this address (includes scheduled, paged, and in-delivery messages)"
          },
          "Paused": {
            "rw": false,
            "type": "boolean",
            "desc": "indicates if the queues bound to this address are paused"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "address=\"ExpiryQueue\",broker=\"amq-broker\",component=addresses,queue=\"ExpiryQueue\",routing-type=\"anycast\",subcomponent=queues": {
        "op": {
          "listMessages": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "[Ljava.util.Map;",
            "desc": "List all the messages in the queue matching the given filter"
          },
          "resetMessagesExpired": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesExpired property"
          },
          "listScheduledMessagesAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the messages scheduled for delivery and returns them using JSON"
          },
          "moveMessage": [
            {
              "args": [
                {
                  "name": "messageID",
                  "type": "long",
                  "desc": "A message ID"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the message to"
                }
              ],
              "ret": "boolean",
              "desc": "Move the message corresponding to the given messageID to another queue. rejectDuplicate=false on this case"
            },
            {
              "args": [
                {
                  "name": "messageID",
                  "type": "long",
                  "desc": "A message ID"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the message to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "boolean",
              "desc": "Move the message corresponding to the given messageID to another queue"
            }
          ],
          "moveMessages": [
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                },
                {
                  "name": "messageCount",
                  "type": "int",
                  "desc": "Number of messages to move."
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages). RejectDuplicates=false on this case."
            }
          ],
          "resetMessageCounter": {
            "args": [],
            "ret": "void",
            "desc": "Reset the message counters"
          },
          "sendMessageToDeadLetterAddress": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Send the message corresponding to the given messageID to this queue's Dead Letter Address"
          },
          "removeMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Remove the message corresponding to the given messageID"
          },
          "listScheduledMessages": {
            "args": [],
            "ret": "[Ljava.util.Map;",
            "desc": "List the messages scheduled for delivery"
          },
          "listDeliveringMessages": {
            "args": [],
            "ret": "java.util.Map",
            "desc": "List all messages being delivered per consumer"
          },
          "resetMessagesAcknowledged": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesAcknowledged property"
          },
          "changeMessagesPriority": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              },
              {
                "name": "newPriority",
                "type": "int",
                "desc": "the new priority (between 0 and 9)"
              }
            ],
            "ret": "int",
            "desc": "Change the priority of the messages corresponding to the given filter"
          },
          "listMessageCounterHistoryAsHTML": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters history HTML"
          },
          "listConsumersAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all the existent consumers on the Queue"
          },
          "enable": {
            "args": [],
            "ret": "void",
            "desc": "Enables routing of messages to the Queue"
          },
          "retryMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Retry the message corresponding to the given messageID to the original queue"
          },
          "removeAllMessages": {
            "args": [],
            "ret": "int",
            "desc": "Remove all the messages from the Queue (and returns the number of removed messages)"
          },
          "listMessagesAsJSON": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "java.lang.String",
            "desc": "List all the messages in the queue matching the given filter and returns them using JSON"
          },
          "listGroupsAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all the existent group to consumers mappings on the Queue"
          },
          "removeMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "int",
              "desc": "Remove the messages corresponding to the given filter (and returns the number of removed messages)"
            },
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "int",
              "desc": "Remove the messages corresponding to the given filter (and returns the number of removed messages)"
            }
          ],
          "flushExecutor": {
            "args": [],
            "ret": "void",
            "desc": "Flush internal executors"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resumes delivery of queued messages and gets the queue out of paused state. It will also affected the state of a persisted pause."
          },
          "countDeliveringMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "This filter separate account messages"
                },
                {
                  "name": "groupByProperty",
                  "type": "java.lang.String",
                  "desc": "This property to group by"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Returns the number of the messages in the queue matching the given filter, grouped by the given property field"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue matching the given filter"
            }
          ],
          "resetAllGroups": {
            "args": [],
            "ret": "void",
            "desc": "Resets all groups"
          },
          "countMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue matching the given filter"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "This filter separate account messages"
                },
                {
                  "name": "groupByProperty",
                  "type": "java.lang.String",
                  "desc": "This property to group by"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Returns the number of the messages in the queue matching the given filter, grouped by the given property field"
            },
            {
              "args": [],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue"
            }
          ],
          "listMessageCounterAsHTML": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters as HTML"
          },
          "resetMessagesKilled": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesKilled property"
          },
          "listMessageCounterHistory": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters history"
          },
          "sendMessage": {
            "args": [
              {
                "name": "headers",
                "type": "java.util.Map",
                "desc": "The headers to add to the message"
              },
              {
                "name": "type",
                "type": "int",
                "desc": "A type for the message"
              },
              {
                "name": "body",
                "type": "java.lang.String",
                "desc": "The body (byte[]) of the message encoded as a string using Base64"
              },
              {
                "name": "durable",
                "type": "boolean",
                "desc": "Whether the message is durable"
              },
              {
                "name": "user",
                "type": "java.lang.String",
                "desc": "The user to authenticate with"
              },
              {
                "name": "password",
                "type": "java.lang.String",
                "desc": "The users password to authenticate with"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Sends a TextMessage to a password-protected destination."
          },
          "listMessageCounter": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters"
          },
          "resetMessagesAdded": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesAdded property"
          },
          "pause": [
            {
              "args": [
                {
                  "name": "persist",
                  "type": "boolean",
                  "desc": "if true, the pause state will be persisted."
                }
              ],
              "ret": "void",
              "desc": "Pauses the Queue"
            },
            {
              "args": [],
              "ret": "void",
              "desc": "Pauses the Queue"
            }
          ],
          "listDeliveringMessagesAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "list all messages being delivered per consumer using JSON form"
          },
          "expireMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Remove the message corresponding to the given messageID"
          },
          "resetGroup": {
            "args": [
              {
                "name": "groupID",
                "type": "java.lang.String",
                "desc": "ID of group to reset"
              }
            ],
            "ret": "void",
            "desc": "Reset the specified group"
          },
          "changeMessagePriority": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              },
              {
                "name": "newPriority",
                "type": "int",
                "desc": "the new priority (between 0 and 9)"
              }
            ],
            "ret": "boolean",
            "desc": "Change the priority of the message corresponding to the given messageID"
          },
          "disable": {
            "args": [],
            "ret": "void",
            "desc": "Disables routing of messages to the Queue"
          },
          "sendMessagesToDeadLetterAddress": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "int",
            "desc": "Send the messages corresponding to the given filter to this queue's Dead Letter Address"
          },
          "retryMessages": {
            "args": [],
            "ret": "int",
            "desc": "Retry all messages on a DLQ to their respective original queues"
          },
          "expireMessages": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter"
              }
            ],
            "ret": "int",
            "desc": "Expire the messages corresponding to the given filter (and returns the number of expired messages)"
          },
          "browse": [
            {
              "args": [],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "page",
                  "type": "int",
                  "desc": "Current page"
                },
                {
                  "name": "pageSize",
                  "type": "int",
                  "desc": "Page size"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "page",
                  "type": "int",
                  "desc": "Current page"
                },
                {
                  "name": "pageSize",
                  "type": "int",
                  "desc": "Page size"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "filter"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            }
          ]
        },
        "attr": {
          "ConfigurationManaged": {
            "rw": false,
            "type": "boolean",
            "desc": "is this queue managed by configuration (broker.xml)"
          },
          "MaxConsumers": {
            "rw": false,
            "type": "int",
            "desc": "maximum number of consumers allowed on this queue at any one time"
          },
          "Address": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "address this queue is bound to"
          },
          "Exclusive": {
            "rw": false,
            "type": "boolean",
            "desc": "If the queue should route exclusively to one consumer"
          },
          "DurableDeliveringSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable messages that this queue is currently delivering to its consumers"
          },
          "PersistentSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of all messages (including durable and non-durable) currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "GroupBuckets": {
            "rw": false,
            "type": "int",
            "desc": "Get the group buckets"
          },
          "MessagesKilled": {
            "rw": false,
            "type": "long",
            "desc": "number of messages removed from this queue since it was created due to exceeding the max delivery attempts"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "name of this queue"
          },
          "DelayBeforeDispatch": {
            "rw": false,
            "type": "long",
            "desc": "Return the Consumers Before Dispatch"
          },
          "DurableMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of durable messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "PreparedTransactionMessageCount": {
            "rw": false,
            "type": "int",
            "desc": "return how many messages are stuck in prepared transactions"
          },
          "ID": {
            "rw": false,
            "type": "long",
            "desc": "ID of this queue"
          },
          "RetroactiveResource": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is used for a retroactive address"
          },
          "DeadLetterAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "dead-letter address associated with this queue"
          },
          "MessagesAcknowledged": {
            "rw": false,
            "type": "long",
            "desc": "number of messages acknowledged from this queue since it was created"
          },
          "MessagesExpired": {
            "rw": false,
            "type": "long",
            "desc": "number of messages expired from this queue since it was created"
          },
          "DeliveringSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of messages that this queue is currently delivering to its consumers"
          },
          "LastValue": {
            "rw": false,
            "type": "boolean",
            "desc": "is this queue a last value queue"
          },
          "LastValueKey": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "last value key"
          },
          "DurableScheduledSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable scheduled messages in this queue"
          },
          "GroupRebalance": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the groups of this queue are automatically rebalanced"
          },
          "GroupFirstKey": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Get the header key to notify a consumer of a group change"
          },
          "User": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "the user that created the queue"
          },
          "GroupCount": {
            "rw": false,
            "type": "int",
            "desc": "Get the current number of active groups"
          },
          "PurgeOnNoConsumers": {
            "rw": false,
            "type": "boolean",
            "desc": "purge this queue when the last consumer disconnects"
          },
          "ScheduledCount": {
            "rw": false,
            "type": "long",
            "desc": "number of scheduled messages in this queue"
          },
          "DurableScheduledCount": {
            "rw": false,
            "type": "long",
            "desc": "number of durable scheduled messages in this queue"
          },
          "ConsumersBeforeDispatch": {
            "rw": false,
            "type": "int",
            "desc": "Return the Consumers Before Dispatch"
          },
          "ExpiryAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "expiry address associated with this queue"
          },
          "FirstMessageAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "first message on the queue as JSON"
          },
          "GroupRebalancePauseDispatch": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the dispatch is paused when groups of this queue are automatically rebalanced"
          },
          "Paused": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the queue is paused"
          },
          "RoutingType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "routing type of this queue"
          },
          "DurableDeliveringCount": {
            "rw": false,
            "type": "int",
            "desc": "number of durable messages that this queue is currently delivering to its consumers"
          },
          "FirstMessageAge": {
            "rw": false,
            "type": "java.lang.Long",
            "desc": "age of the first message in milliseconds"
          },
          "DurablePersistentSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "MessagesAdded": {
            "rw": false,
            "type": "long",
            "desc": "number of messages added to this queue since it was created"
          },
          "ConsumerCount": {
            "rw": false,
            "type": "int",
            "desc": "number of consumers consuming messages from this queue"
          },
          "RingSize": {
            "rw": false,
            "type": "long",
            "desc": "Get the ring size"
          },
          "DeliveringCount": {
            "rw": false,
            "type": "int",
            "desc": "number of messages that this queue is currently delivering to its consumers"
          },
          "Enabled": {
            "rw": false,
            "type": "boolean",
            "desc": "if the queue is enabled, default it is enabled, when disabled messages will not be routed to the queue"
          },
          "AcknowledgeAttempts": {
            "rw": false,
            "type": "long",
            "desc": "number of messages acknowledged attempts from this queue since it was created"
          },
          "Temporary": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is temporary"
          },
          "FirstMessageTimestamp": {
            "rw": false,
            "type": "java.lang.Long",
            "desc": "timestamp of the first message in milliseconds"
          },
          "Filter": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "filter associated with this queue"
          },
          "ScheduledSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of scheduled messages in this queue"
          },
          "Durable": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is durable"
          },
          "MessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "address=\"activemq.notifications\",broker=\"amq-broker\",component=addresses": {
        "op": {
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resumes the queues bound to this address"
          },
          "clearDuplicateIdCache": {
            "args": [],
            "ret": "boolean",
            "desc": "clearDuplicateIdCache"
          },
          "sendMessage": {
            "args": [
              {
                "name": "headers",
                "type": "java.util.Map",
                "desc": "The headers to add to the message"
              },
              {
                "name": "type",
                "type": "int",
                "desc": "A type for the message"
              },
              {
                "name": "body",
                "type": "java.lang.String",
                "desc": "The body (byte[]) of the message encoded as a string using Base64"
              },
              {
                "name": "durable",
                "type": "boolean",
                "desc": "Whether the message is durable"
              },
              {
                "name": "user",
                "type": "java.lang.String",
                "desc": "The user to authenticate with"
              },
              {
                "name": "password",
                "type": "java.lang.String",
                "desc": "The users password to authenticate with"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Sends a TextMessage to a password-protected address."
          },
          "purge": {
            "args": [],
            "ret": "long",
            "desc": "Purges the queues bound to this address. Returns the total number of messages purged."
          },
          "pause": [
            {
              "args": [],
              "ret": "void",
              "desc": "Pauses the queues bound to this address"
            },
            {
              "args": [
                {
                  "name": "persist",
                  "type": "boolean",
                  "desc": "if true, the pause state will be persisted."
                }
              ],
              "ret": "void",
              "desc": "Pauses the queues bound to this address"
            }
          ]
        },
        "attr": {
          "RoutingTypesAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Get the routing types enabled on this address as JSON"
          },
          "RetroactiveResource": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is used for a retroactive address"
          },
          "AddressSize": {
            "rw": false,
            "type": "long",
            "desc": "the number of estimated bytes being used by all the queue(s) bound to this address; used to control paging and blocking"
          },
          "NumberOfBytesPerPage": {
            "rw": false,
            "type": "long",
            "desc": "number of bytes used by each page for this address"
          },
          "Address": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "managed address"
          },
          "CurrentDuplicateIdCacheSize": {
            "rw": false,
            "type": "long",
            "desc": "the size of the duplicate ID cache for this address"
          },
          "Internal": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address was created for the broker's internal use"
          },
          "Paging": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is paging"
          },
          "RolesAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "roles  (name and permissions) associated with this address using JSON serialization"
          },
          "Roles": {
            "rw": false,
            "type": "[Ljava.lang.Object;",
            "desc": "roles (name and permissions) associated with this address"
          },
          "BindingNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of all bindings (both queues and diverts) bound to this address"
          },
          "NumberOfPages": {
            "rw": false,
            "type": "int",
            "desc": "number of pages used by this address"
          },
          "UnRoutedMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages not routed to any bindings"
          },
          "AllQueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of both the local & remote queue(s) bound to this address"
          },
          "QueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of the local queue(s) bound to this address"
          },
          "Temporary": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is temporary"
          },
          "RoutingTypes": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "Get the routing types enabled on this address"
          },
          "AutoCreated": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address was created automatically in response to client action"
          },
          "NumberOfMessages": {
            "rw": false,
            "type": "long",
            "desc": "the sum of messages on queue(s), including messages in delivery"
          },
          "RemoteQueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of the remote queue(s) bound to this address"
          },
          "RoutedMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages routed to one or more bindings"
          },
          "MessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages currently in all queues bound to this address (includes scheduled, paged, and in-delivery messages)"
          },
          "Paused": {
            "rw": false,
            "type": "boolean",
            "desc": "indicates if the queues bound to this address are paused"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "address=\"test\",broker=\"amq-broker\",component=addresses": {
        "op": {
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resumes the queues bound to this address"
          },
          "clearDuplicateIdCache": {
            "args": [],
            "ret": "boolean",
            "desc": "clearDuplicateIdCache"
          },
          "sendMessage": {
            "args": [
              {
                "name": "headers",
                "type": "java.util.Map",
                "desc": "The headers to add to the message"
              },
              {
                "name": "type",
                "type": "int",
                "desc": "A type for the message"
              },
              {
                "name": "body",
                "type": "java.lang.String",
                "desc": "The body (byte[]) of the message encoded as a string using Base64"
              },
              {
                "name": "durable",
                "type": "boolean",
                "desc": "Whether the message is durable"
              },
              {
                "name": "user",
                "type": "java.lang.String",
                "desc": "The user to authenticate with"
              },
              {
                "name": "password",
                "type": "java.lang.String",
                "desc": "The users password to authenticate with"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Sends a TextMessage to a password-protected address."
          },
          "purge": {
            "args": [],
            "ret": "long",
            "desc": "Purges the queues bound to this address. Returns the total number of messages purged."
          },
          "pause": [
            {
              "args": [],
              "ret": "void",
              "desc": "Pauses the queues bound to this address"
            },
            {
              "args": [
                {
                  "name": "persist",
                  "type": "boolean",
                  "desc": "if true, the pause state will be persisted."
                }
              ],
              "ret": "void",
              "desc": "Pauses the queues bound to this address"
            }
          ]
        },
        "attr": {
          "RoutingTypesAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Get the routing types enabled on this address as JSON"
          },
          "RetroactiveResource": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is used for a retroactive address"
          },
          "AddressSize": {
            "rw": false,
            "type": "long",
            "desc": "the number of estimated bytes being used by all the queue(s) bound to this address; used to control paging and blocking"
          },
          "NumberOfBytesPerPage": {
            "rw": false,
            "type": "long",
            "desc": "number of bytes used by each page for this address"
          },
          "Address": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "managed address"
          },
          "CurrentDuplicateIdCacheSize": {
            "rw": false,
            "type": "long",
            "desc": "the size of the duplicate ID cache for this address"
          },
          "Internal": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address was created for the broker's internal use"
          },
          "Paging": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is paging"
          },
          "RolesAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "roles  (name and permissions) associated with this address using JSON serialization"
          },
          "Roles": {
            "rw": false,
            "type": "[Ljava.lang.Object;",
            "desc": "roles (name and permissions) associated with this address"
          },
          "BindingNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of all bindings (both queues and diverts) bound to this address"
          },
          "NumberOfPages": {
            "rw": false,
            "type": "int",
            "desc": "number of pages used by this address"
          },
          "UnRoutedMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages not routed to any bindings"
          },
          "AllQueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of both the local & remote queue(s) bound to this address"
          },
          "QueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of the local queue(s) bound to this address"
          },
          "Temporary": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address is temporary"
          },
          "RoutingTypes": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "Get the routing types enabled on this address"
          },
          "AutoCreated": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this address was created automatically in response to client action"
          },
          "NumberOfMessages": {
            "rw": false,
            "type": "long",
            "desc": "the sum of messages on queue(s), including messages in delivery"
          },
          "RemoteQueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "names of the remote queue(s) bound to this address"
          },
          "RoutedMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages routed to one or more bindings"
          },
          "MessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages currently in all queues bound to this address (includes scheduled, paged, and in-delivery messages)"
          },
          "Paused": {
            "rw": false,
            "type": "boolean",
            "desc": "indicates if the queues bound to this address are paused"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "address=\"test\",broker=\"amq-broker\",component=addresses,queue=\"test-queue\",routing-type=\"anycast\",subcomponent=queues": {
        "op": {
          "listMessages": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "[Ljava.util.Map;",
            "desc": "List all the messages in the queue matching the given filter"
          },
          "resetMessagesExpired": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesExpired property"
          },
          "listScheduledMessagesAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the messages scheduled for delivery and returns them using JSON"
          },
          "moveMessage": [
            {
              "args": [
                {
                  "name": "messageID",
                  "type": "long",
                  "desc": "A message ID"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the message to"
                }
              ],
              "ret": "boolean",
              "desc": "Move the message corresponding to the given messageID to another queue. rejectDuplicate=false on this case"
            },
            {
              "args": [
                {
                  "name": "messageID",
                  "type": "long",
                  "desc": "A message ID"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the message to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "boolean",
              "desc": "Move the message corresponding to the given messageID to another queue"
            }
          ],
          "moveMessages": [
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                },
                {
                  "name": "messageCount",
                  "type": "int",
                  "desc": "Number of messages to move."
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                },
                {
                  "name": "rejectDuplicates",
                  "type": "boolean",
                  "desc": "Reject messages identified as duplicate by the duplicate message"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages)"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                },
                {
                  "name": "otherQueueName",
                  "type": "java.lang.String",
                  "desc": "The name of the queue to move the messages to"
                }
              ],
              "ret": "int",
              "desc": "Move the messages corresponding to the given filter (and returns the number of moved messages). RejectDuplicates=false on this case."
            }
          ],
          "resetMessageCounter": {
            "args": [],
            "ret": "void",
            "desc": "Reset the message counters"
          },
          "sendMessageToDeadLetterAddress": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Send the message corresponding to the given messageID to this queue's Dead Letter Address"
          },
          "removeMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Remove the message corresponding to the given messageID"
          },
          "listScheduledMessages": {
            "args": [],
            "ret": "[Ljava.util.Map;",
            "desc": "List the messages scheduled for delivery"
          },
          "listDeliveringMessages": {
            "args": [],
            "ret": "java.util.Map",
            "desc": "List all messages being delivered per consumer"
          },
          "resetMessagesAcknowledged": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesAcknowledged property"
          },
          "changeMessagesPriority": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              },
              {
                "name": "newPriority",
                "type": "int",
                "desc": "the new priority (between 0 and 9)"
              }
            ],
            "ret": "int",
            "desc": "Change the priority of the messages corresponding to the given filter"
          },
          "listMessageCounterHistoryAsHTML": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters history HTML"
          },
          "listConsumersAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all the existent consumers on the Queue"
          },
          "enable": {
            "args": [],
            "ret": "void",
            "desc": "Enables routing of messages to the Queue"
          },
          "retryMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Retry the message corresponding to the given messageID to the original queue"
          },
          "removeAllMessages": {
            "args": [],
            "ret": "int",
            "desc": "Remove all the messages from the Queue (and returns the number of removed messages)"
          },
          "listMessagesAsJSON": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "java.lang.String",
            "desc": "List all the messages in the queue matching the given filter and returns them using JSON"
          },
          "listGroupsAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all the existent group to consumers mappings on the Queue"
          },
          "removeMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "int",
              "desc": "Remove the messages corresponding to the given filter (and returns the number of removed messages)"
            },
            {
              "args": [
                {
                  "name": "flushLimit",
                  "type": "int",
                  "desc": "Limit to flush transactions during the operation to avoid OutOfMemory"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "int",
              "desc": "Remove the messages corresponding to the given filter (and returns the number of removed messages)"
            }
          ],
          "flushExecutor": {
            "args": [],
            "ret": "void",
            "desc": "Flush internal executors"
          },
          "resume": {
            "args": [],
            "ret": "void",
            "desc": "Resumes delivery of queued messages and gets the queue out of paused state. It will also affected the state of a persisted pause."
          },
          "countDeliveringMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "This filter separate account messages"
                },
                {
                  "name": "groupByProperty",
                  "type": "java.lang.String",
                  "desc": "This property to group by"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Returns the number of the messages in the queue matching the given filter, grouped by the given property field"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue matching the given filter"
            }
          ],
          "resetAllGroups": {
            "args": [],
            "ret": "void",
            "desc": "Resets all groups"
          },
          "countMessages": [
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue matching the given filter"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "This filter separate account messages"
                },
                {
                  "name": "groupByProperty",
                  "type": "java.lang.String",
                  "desc": "This property to group by"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Returns the number of the messages in the queue matching the given filter, grouped by the given property field"
            },
            {
              "args": [],
              "ret": "long",
              "desc": "Returns the number of the messages in the queue"
            }
          ],
          "listMessageCounterAsHTML": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters as HTML"
          },
          "resetMessagesKilled": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesKilled property"
          },
          "listMessageCounterHistory": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters history"
          },
          "sendMessage": {
            "args": [
              {
                "name": "headers",
                "type": "java.util.Map",
                "desc": "The headers to add to the message"
              },
              {
                "name": "type",
                "type": "int",
                "desc": "A type for the message"
              },
              {
                "name": "body",
                "type": "java.lang.String",
                "desc": "The body (byte[]) of the message encoded as a string using Base64"
              },
              {
                "name": "durable",
                "type": "boolean",
                "desc": "Whether the message is durable"
              },
              {
                "name": "user",
                "type": "java.lang.String",
                "desc": "The user to authenticate with"
              },
              {
                "name": "password",
                "type": "java.lang.String",
                "desc": "The users password to authenticate with"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Sends a TextMessage to a password-protected destination."
          },
          "listMessageCounter": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the message counters"
          },
          "resetMessagesAdded": {
            "args": [],
            "ret": "void",
            "desc": "Resets the MessagesAdded property"
          },
          "pause": [
            {
              "args": [
                {
                  "name": "persist",
                  "type": "boolean",
                  "desc": "if true, the pause state will be persisted."
                }
              ],
              "ret": "void",
              "desc": "Pauses the Queue"
            },
            {
              "args": [],
              "ret": "void",
              "desc": "Pauses the Queue"
            }
          ],
          "listDeliveringMessagesAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "list all messages being delivered per consumer using JSON form"
          },
          "expireMessage": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              }
            ],
            "ret": "boolean",
            "desc": "Remove the message corresponding to the given messageID"
          },
          "resetGroup": {
            "args": [
              {
                "name": "groupID",
                "type": "java.lang.String",
                "desc": "ID of group to reset"
              }
            ],
            "ret": "void",
            "desc": "Reset the specified group"
          },
          "changeMessagePriority": {
            "args": [
              {
                "name": "messageID",
                "type": "long",
                "desc": "A message ID"
              },
              {
                "name": "newPriority",
                "type": "int",
                "desc": "the new priority (between 0 and 9)"
              }
            ],
            "ret": "boolean",
            "desc": "Change the priority of the message corresponding to the given messageID"
          },
          "disable": {
            "args": [],
            "ret": "void",
            "desc": "Disables routing of messages to the Queue"
          },
          "sendMessagesToDeadLetterAddress": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter (can be empty)"
              }
            ],
            "ret": "int",
            "desc": "Send the messages corresponding to the given filter to this queue's Dead Letter Address"
          },
          "retryMessages": {
            "args": [],
            "ret": "int",
            "desc": "Retry all messages on a DLQ to their respective original queues"
          },
          "expireMessages": {
            "args": [
              {
                "name": "filter",
                "type": "java.lang.String",
                "desc": "A message filter"
              }
            ],
            "ret": "int",
            "desc": "Expire the messages corresponding to the given filter (and returns the number of expired messages)"
          },
          "browse": [
            {
              "args": [],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "A message filter (can be empty)"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "page",
                  "type": "int",
                  "desc": "Current page"
                },
                {
                  "name": "pageSize",
                  "type": "int",
                  "desc": "Page size"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            },
            {
              "args": [
                {
                  "name": "page",
                  "type": "int",
                  "desc": "Current page"
                },
                {
                  "name": "pageSize",
                  "type": "int",
                  "desc": "Page size"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "filter"
                }
              ],
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "Browse Messages"
            }
          ]
        },
        "attr": {
          "ConfigurationManaged": {
            "rw": false,
            "type": "boolean",
            "desc": "is this queue managed by configuration (broker.xml)"
          },
          "MaxConsumers": {
            "rw": false,
            "type": "int",
            "desc": "maximum number of consumers allowed on this queue at any one time"
          },
          "Address": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "address this queue is bound to"
          },
          "Exclusive": {
            "rw": false,
            "type": "boolean",
            "desc": "If the queue should route exclusively to one consumer"
          },
          "DurableDeliveringSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable messages that this queue is currently delivering to its consumers"
          },
          "PersistentSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of all messages (including durable and non-durable) currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "GroupBuckets": {
            "rw": false,
            "type": "int",
            "desc": "Get the group buckets"
          },
          "MessagesKilled": {
            "rw": false,
            "type": "long",
            "desc": "number of messages removed from this queue since it was created due to exceeding the max delivery attempts"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "name of this queue"
          },
          "DelayBeforeDispatch": {
            "rw": false,
            "type": "long",
            "desc": "Return the Consumers Before Dispatch"
          },
          "DurableMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of durable messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "PreparedTransactionMessageCount": {
            "rw": false,
            "type": "int",
            "desc": "return how many messages are stuck in prepared transactions"
          },
          "ID": {
            "rw": false,
            "type": "long",
            "desc": "ID of this queue"
          },
          "RetroactiveResource": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is used for a retroactive address"
          },
          "DeadLetterAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "dead-letter address associated with this queue"
          },
          "MessagesAcknowledged": {
            "rw": false,
            "type": "long",
            "desc": "number of messages acknowledged from this queue since it was created"
          },
          "MessagesExpired": {
            "rw": false,
            "type": "long",
            "desc": "number of messages expired from this queue since it was created"
          },
          "DeliveringSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of messages that this queue is currently delivering to its consumers"
          },
          "LastValue": {
            "rw": false,
            "type": "boolean",
            "desc": "is this queue a last value queue"
          },
          "LastValueKey": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "last value key"
          },
          "DurableScheduledSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable scheduled messages in this queue"
          },
          "GroupRebalance": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the groups of this queue are automatically rebalanced"
          },
          "GroupFirstKey": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Get the header key to notify a consumer of a group change"
          },
          "User": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "the user that created the queue"
          },
          "GroupCount": {
            "rw": false,
            "type": "int",
            "desc": "Get the current number of active groups"
          },
          "PurgeOnNoConsumers": {
            "rw": false,
            "type": "boolean",
            "desc": "purge this queue when the last consumer disconnects"
          },
          "ScheduledCount": {
            "rw": false,
            "type": "long",
            "desc": "number of scheduled messages in this queue"
          },
          "DurableScheduledCount": {
            "rw": false,
            "type": "long",
            "desc": "number of durable scheduled messages in this queue"
          },
          "ConsumersBeforeDispatch": {
            "rw": false,
            "type": "int",
            "desc": "Return the Consumers Before Dispatch"
          },
          "ExpiryAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "expiry address associated with this queue"
          },
          "FirstMessageAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "first message on the queue as JSON"
          },
          "GroupRebalancePauseDispatch": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the dispatch is paused when groups of this queue are automatically rebalanced"
          },
          "Paused": {
            "rw": false,
            "type": "boolean",
            "desc": "whether the queue is paused"
          },
          "RoutingType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "routing type of this queue"
          },
          "DurableDeliveringCount": {
            "rw": false,
            "type": "int",
            "desc": "number of durable messages that this queue is currently delivering to its consumers"
          },
          "FirstMessageAge": {
            "rw": false,
            "type": "java.lang.Long",
            "desc": "age of the first message in milliseconds"
          },
          "DurablePersistentSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of durable messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          },
          "MessagesAdded": {
            "rw": false,
            "type": "long",
            "desc": "number of messages added to this queue since it was created"
          },
          "ConsumerCount": {
            "rw": false,
            "type": "int",
            "desc": "number of consumers consuming messages from this queue"
          },
          "RingSize": {
            "rw": false,
            "type": "long",
            "desc": "Get the ring size"
          },
          "DeliveringCount": {
            "rw": false,
            "type": "int",
            "desc": "number of messages that this queue is currently delivering to its consumers"
          },
          "Enabled": {
            "rw": false,
            "type": "boolean",
            "desc": "if the queue is enabled, default it is enabled, when disabled messages will not be routed to the queue"
          },
          "AcknowledgeAttempts": {
            "rw": false,
            "type": "long",
            "desc": "number of messages acknowledged attempts from this queue since it was created"
          },
          "Temporary": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is temporary"
          },
          "FirstMessageTimestamp": {
            "rw": false,
            "type": "java.lang.Long",
            "desc": "timestamp of the first message in milliseconds"
          },
          "Filter": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "filter associated with this queue"
          },
          "ScheduledSize": {
            "rw": false,
            "type": "long",
            "desc": "persistent size of scheduled messages in this queue"
          },
          "Durable": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this queue is durable"
          },
          "MessageCount": {
            "rw": false,
            "type": "long",
            "desc": "number of messages currently in this queue (includes scheduled, paged, and in-delivery messages)"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "broker=\"amq-broker\"": {
        "op": {
          "removeAddressSettings": {
            "args": [
              {
                "name": "addressMatch",
                "type": "java.lang.String",
                "desc": "an address match"
              }
            ],
            "ret": "void",
            "desc": "Remove address settings"
          },
          "listSessions": [
            {
              "args": [
                {
                  "name": "options",
                  "type": "java.lang.String",
                  "desc": "Options"
                },
                {
                  "name": "pageNumber",
                  "type": "int",
                  "desc": "Page Number"
                },
                {
                  "name": "pageSize",
                  "type": "int",
                  "desc": "Page Size"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Search for Sessions"
            },
            {
              "args": [
                {
                  "name": "connectionID",
                  "type": "java.lang.String",
                  "desc": "a connection ID"
                }
              ],
              "ret": "[Ljava.lang.String;",
              "desc": "List the sessions for the given connectionID"
            }
          ],
          "stopBrokerConnection": {
            "args": [
              {
                "name": "name",
                "type": "java.lang.String",
                "desc": "Name of the broker connection to be stopped"
              }
            ],
            "ret": "void",
            "desc": "Stops a broker connection that is pre configured"
          },
          "scaleDown": {
            "args": [
              {
                "name": "name",
                "type": "java.lang.String",
                "desc": "The connector to use to scale down, if not provided the first appropriate connector will be used"
              }
            ],
            "ret": "void",
            "desc": "Force the server to stop and to scale down to another server"
          },
          "updateAddress": {
            "args": [
              {
                "name": "name",
                "type": "java.lang.String",
                "desc": "The name of the address"
              },
              {
                "name": "routingTypes",
                "type": "java.lang.String",
                "desc": "Comma separated list of Routing Types (ANYCAST\/MULTICAST)"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Update an address"
          },
          "addUser": {
            "args": [
              {
                "name": "username",
                "type": "java.lang.String",
                "desc": "Name of the user"
              },
              {
                "name": "password",
                "type": "java.lang.String",
                "desc": "User's password"
              },
              {
                "name": "roles",
                "type": "java.lang.String",
                "desc": "User's role (comma separated)"
              },
              {
                "name": "plaintext",
                "type": "boolean",
                "desc": "whether or not to store the password in plaintext or hash it"
              }
            ],
            "ret": "void",
            "desc": "add a user (only applicable when using the JAAS PropertiesLoginModule or the ActiveMQBasicSecurityManager)"
          },
          "resetAllMessageCounters": {
            "args": [],
            "ret": "void",
            "desc": "Reset all message counters"
          },
          "listConnectionIDs": {
            "args": [],
            "ret": "[Ljava.lang.String;",
            "desc": "List all the connection IDs"
          },
          "addSecuritySettings": [
            {
              "args": [
                {
                  "name": "addressMatch",
                  "type": "java.lang.String",
                  "desc": "an address match"
                },
                {
                  "name": "send",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to send messages"
                },
                {
                  "name": "consume",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to consume messages"
                },
                {
                  "name": "createDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to create durable queues"
                },
                {
                  "name": "deleteDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to delete durable queues"
                },
                {
                  "name": "createNonDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to create non durable queues"
                },
                {
                  "name": "deleteNonDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to delete non durable queues"
                },
                {
                  "name": "manage",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to send management messages messages"
                },
                {
                  "name": "browse",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to browse queues"
                }
              ],
              "ret": "void",
              "desc": "Add security settings for addresses matching the addressMatch"
            },
            {
              "args": [
                {
                  "name": "addressMatch",
                  "type": "java.lang.String",
                  "desc": "an address match"
                },
                {
                  "name": "send",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to send messages"
                },
                {
                  "name": "consume",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to consume messages"
                },
                {
                  "name": "createDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to create durable queues"
                },
                {
                  "name": "deleteDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to delete durable queues"
                },
                {
                  "name": "createNonDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to create non durable queues"
                },
                {
                  "name": "deleteNonDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to delete non durable queues"
                },
                {
                  "name": "manage",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to send management messages messages"
                }
              ],
              "ret": "void",
              "desc": "Add security settings for addresses matching the addressMatch"
            },
            {
              "args": [
                {
                  "name": "addressMatch",
                  "type": "java.lang.String",
                  "desc": "an address match"
                },
                {
                  "name": "send",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to send messages"
                },
                {
                  "name": "consume",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to consume messages"
                },
                {
                  "name": "createDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to create durable queues"
                },
                {
                  "name": "deleteDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to delete durable queues"
                },
                {
                  "name": "createNonDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to create non durable queues"
                },
                {
                  "name": "deleteNonDurableQueueRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to delete non durable queues"
                },
                {
                  "name": "manage",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to send management messages messages"
                },
                {
                  "name": "browse",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to browse queues"
                },
                {
                  "name": "createAddressRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to create addresses"
                },
                {
                  "name": "deleteAddressRoles",
                  "type": "java.lang.String",
                  "desc": "a comma-separated list of roles allowed to delete addresses"
                }
              ],
              "ret": "void",
              "desc": "Add security settings for addresses matching the addressMatch"
            }
          ],
          "createDivert": [
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the divert"
                },
                {
                  "name": "routingName",
                  "type": "java.lang.String",
                  "desc": "Routing name of the divert"
                },
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address to divert from"
                },
                {
                  "name": "forwardingAddress",
                  "type": "java.lang.String",
                  "desc": "Address to divert to"
                },
                {
                  "name": "exclusive",
                  "type": "boolean",
                  "desc": "Is the divert exclusive?"
                },
                {
                  "name": "filterString",
                  "type": "java.lang.String",
                  "desc": "Filter of the divert"
                },
                {
                  "name": "transformerClassName",
                  "type": "java.lang.String",
                  "desc": "Class name of the divert's transformer"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "How should the routing-type on the diverted messages be set?"
                }
              ],
              "ret": "void",
              "desc": "Create a Divert"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the divert"
                },
                {
                  "name": "routingName",
                  "type": "java.lang.String",
                  "desc": "Routing name of the divert"
                },
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address to divert from"
                },
                {
                  "name": "forwardingAddress",
                  "type": "java.lang.String",
                  "desc": "Address to divert to"
                },
                {
                  "name": "exclusive",
                  "type": "boolean",
                  "desc": "Is the divert exclusive?"
                },
                {
                  "name": "filterString",
                  "type": "java.lang.String",
                  "desc": "Filter of the divert"
                },
                {
                  "name": "transformerClassName",
                  "type": "java.lang.String",
                  "desc": "Class name of the divert's transformer"
                }
              ],
              "ret": "void",
              "desc": "Create a Divert"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the divert"
                },
                {
                  "name": "routingName",
                  "type": "java.lang.String",
                  "desc": "Routing name of the divert"
                },
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address to divert from"
                },
                {
                  "name": "forwardingAddress",
                  "type": "java.lang.String",
                  "desc": "Address to divert to"
                },
                {
                  "name": "exclusive",
                  "type": "boolean",
                  "desc": "Is the divert exclusive?"
                },
                {
                  "name": "filterString",
                  "type": "java.lang.String",
                  "desc": "Filter of the divert"
                },
                {
                  "name": "transformerClassName",
                  "type": "java.lang.String",
                  "desc": "Class name of the divert's transformer"
                },
                {
                  "name": "transformerPropertiesAsJSON",
                  "type": "java.lang.String",
                  "desc": "Configuration properties of the divert's transformer in JSON form"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "How should the routing-type on the diverted messages be set?"
                }
              ],
              "ret": "void",
              "desc": "Create a Divert"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the divert"
                },
                {
                  "name": "routingName",
                  "type": "java.lang.String",
                  "desc": "Routing name of the divert"
                },
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address to divert from"
                },
                {
                  "name": "forwardingAddress",
                  "type": "java.lang.String",
                  "desc": "Address to divert to"
                },
                {
                  "name": "exclusive",
                  "type": "boolean",
                  "desc": "Is the divert exclusive?"
                },
                {
                  "name": "filterString",
                  "type": "java.lang.String",
                  "desc": "Filter of the divert"
                },
                {
                  "name": "transformerClassName",
                  "type": "java.lang.String",
                  "desc": "Class name of the divert's transformer"
                },
                {
                  "name": "transformerProperties",
                  "type": "java.util.Map",
                  "desc": "Configuration properties of the divert's transformer"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "How should the routing-type on the diverted messages be set?"
                }
              ],
              "ret": "void",
              "desc": "Create a Divert"
            }
          ],
          "getRolesAsJSON": {
            "args": [
              {
                "name": "addressMatch",
                "type": "java.lang.String",
                "desc": "an address match"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Get roles (as a JSON string) for a specific address match"
          },
          "enableMessageCounters": {
            "args": [],
            "ret": "void",
            "desc": "Enable message counters"
          },
          "closeConsumerWithID": {
            "args": [
              {
                "name": "sessionID",
                "type": "java.lang.String",
                "desc": "The session ID"
              },
              {
                "name": "ID",
                "type": "java.lang.String",
                "desc": "The consumer ID"
              }
            ],
            "ret": "boolean",
            "desc": "Closes the consumer with the id"
          },
          "removeUser": {
            "args": [
              {
                "name": "username",
                "type": "java.lang.String",
                "desc": "Name of the user"
              }
            ],
            "ret": "void",
            "desc": "remove a user (only applicable when using the JAAS PropertiesLoginModule or the ActiveMQBasicSecurityManager)"
          },
          "listConsumersAsJSON": {
            "args": [
              {
                "name": "connectionID",
                "type": "java.lang.String",
                "desc": "a connection ID"
              }
            ],
            "ret": "java.lang.String",
            "desc": "List all consumers associated with a connection as a JSON string"
          },
          "reloadConfigurationFile": {
            "args": [],
            "ret": "void",
            "desc": "forces the broker to reload its configuration file"
          },
          "listHeuristicCommittedTransactions": {
            "args": [],
            "ret": "[Ljava.lang.String;",
            "desc": "List transactions which have been heuristically committed"
          },
          "listRemoteAddresses": [
            {
              "args": [
                {
                  "name": "ipAddress",
                  "type": "java.lang.String",
                  "desc": "an IP address"
                }
              ],
              "ret": "[Ljava.lang.String;",
              "desc": "List the client addresses which match the given IP Address"
            },
            {
              "args": [],
              "ret": "[Ljava.lang.String;",
              "desc": "List the client addresses"
            }
          ],
          "listBrokerConnections": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the existing broker connections"
          },
          "resetUser": [
            {
              "args": [
                {
                  "name": "username",
                  "type": "java.lang.String",
                  "desc": "Name of the user"
                },
                {
                  "name": "password",
                  "type": "java.lang.String",
                  "desc": "User's password"
                },
                {
                  "name": "roles",
                  "type": "java.lang.String",
                  "desc": "User's role (comma separated)"
                }
              ],
              "ret": "void",
              "desc": "set new properties on an existing user (only applicable when using the JAAS PropertiesLoginModule or the ActiveMQBasicSecurityManager)"
            },
            {
              "args": [
                {
                  "name": "username",
                  "type": "java.lang.String",
                  "desc": "Name of the user"
                },
                {
                  "name": "password",
                  "type": "java.lang.String",
                  "desc": "User's password"
                },
                {
                  "name": "roles",
                  "type": "java.lang.String",
                  "desc": "User's role (comma separated)"
                },
                {
                  "name": "plaintext",
                  "type": "boolean",
                  "desc": "whether or not to store the password in plaintext or hash it"
                }
              ],
              "ret": "void",
              "desc": "set new properties on an existing user (only applicable when using the JAAS PropertiesLoginModule or the ActiveMQBasicSecurityManager)"
            }
          ],
          "updateDivert": {
            "args": [
              {
                "name": "name",
                "type": "java.lang.String",
                "desc": "Name of the queue"
              },
              {
                "name": "forwardingAddress",
                "type": "java.lang.String",
                "desc": "Address to divert to"
              },
              {
                "name": "filterString",
                "type": "java.lang.String",
                "desc": "Filter of the divert"
              },
              {
                "name": "transformerClassName",
                "type": "java.lang.String",
                "desc": "Class name of the divert's transformer"
              },
              {
                "name": "transformerProperties",
                "type": "java.util.Map",
                "desc": "Configuration properties of the divert's transformer"
              },
              {
                "name": "routingType",
                "type": "java.lang.String",
                "desc": "How should the routing-type on the diverted messages be set?"
              }
            ],
            "ret": "void",
            "desc": "Update a divert"
          },
          "listAddresses": [
            {
              "args": [
                {
                  "name": "separator",
                  "type": "java.lang.String",
                  "desc": "Separator used on the string listing"
                }
              ],
              "ret": "java.lang.String",
              "desc": "List Addresses on the broker"
            },
            {
              "args": [
                {
                  "name": "options",
                  "type": "java.lang.String",
                  "desc": "Options"
                },
                {
                  "name": "pageNumber",
                  "type": "int",
                  "desc": "Page Number"
                },
                {
                  "name": "pageSize",
                  "type": "int",
                  "desc": "Page Size"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Search for Addresses"
            }
          ],
          "getRoles": {
            "args": [
              {
                "name": "addressMatch",
                "type": "java.lang.String",
                "desc": "an address match"
              }
            ],
            "ret": "[Ljava.lang.Object;",
            "desc": "Get roles for a specific address match"
          },
          "listQueues": {
            "args": [
              {
                "name": "options",
                "type": "java.lang.String",
                "desc": "Options"
              },
              {
                "name": "pageNumber",
                "type": "int",
                "desc": "Page Number"
              },
              {
                "name": "pageSize",
                "type": "int",
                "desc": "Page Size"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Search for Queues"
          },
          "listDivertNames": {
            "args": [],
            "ret": "[Ljava.lang.String;",
            "desc": "names of the diverts deployed on this server"
          },
          "createAddress": {
            "args": [
              {
                "name": "name",
                "type": "java.lang.String",
                "desc": "The name of the address"
              },
              {
                "name": "routingTypes",
                "type": "java.lang.String",
                "desc": "Comma separated list of Routing Types (ANYCAST\/MULTICAST)"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Create an address"
          },
          "commitPreparedTransaction": {
            "args": [
              {
                "name": "transactionAsBase64",
                "type": "java.lang.String",
                "desc": "the Base64 representation of a transaction"
              }
            ],
            "ret": "boolean",
            "desc": "Commit a prepared transaction"
          },
          "deleteAddress": [
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "The name of the address"
                }
              ],
              "ret": "void",
              "desc": "Delete an address"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "The name of the address"
                },
                {
                  "name": "force",
                  "type": "boolean",
                  "desc": "Force consumers and queues out"
                }
              ],
              "ret": "void",
              "desc": "Delete an address"
            }
          ],
          "listPreparedTransactionDetailsAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all the prepared transaction, sorted by date, oldest first, with details, in JSON format"
          },
          "resetAllMessageCounterHistories": {
            "args": [],
            "ret": "void",
            "desc": "Reset all message counters history"
          },
          "getAddressInfo": {
            "args": [
              {
                "name": "address",
                "type": "java.lang.String",
                "desc": "The address"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Get the selected address"
          },
          "listNetworkTopology": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List the Network Topology"
          },
          "closeSessionWithID": {
            "args": [
              {
                "name": "connectionID",
                "type": "java.lang.String",
                "desc": "The connection ID"
              },
              {
                "name": "ID",
                "type": "java.lang.String",
                "desc": "The session ID"
              }
            ],
            "ret": "boolean",
            "desc": "Closes the session with the id"
          },
          "createQueue": [
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "Filter of the queue"
                },
                {
                  "name": "durable",
                  "type": "boolean",
                  "desc": "Is the queue durable?"
                },
                {
                  "name": "maxConsumers",
                  "type": "int",
                  "desc": "The maximum number of consumers allowed on this queue at any one time"
                },
                {
                  "name": "purgeOnNoConsumers",
                  "type": "boolean",
                  "desc": "Delete this queue when the last consumer disconnects"
                },
                {
                  "name": "exclusive",
                  "type": "boolean",
                  "desc": "If the queue should route exclusively to one consumer"
                },
                {
                  "name": "groupRebalance",
                  "type": "boolean",
                  "desc": "If the queue should rebalance groups when a consumer is added"
                },
                {
                  "name": "groupBuckets",
                  "type": "int",
                  "desc": "Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead"
                },
                {
                  "name": "groupFirstKey",
                  "type": "java.lang.String",
                  "desc": "Key used to mark a message is first in a group for a consumer"
                },
                {
                  "name": "lastValue",
                  "type": "boolean",
                  "desc": "Use last-value semantics"
                },
                {
                  "name": "lastValueKey",
                  "type": "java.lang.String",
                  "desc": "Use the specified property key for the last value"
                },
                {
                  "name": "nonDestructive",
                  "type": "boolean",
                  "desc": "If the queue is non-destructive"
                },
                {
                  "name": "consumersBeforeDispatch",
                  "type": "int",
                  "desc": "Number of consumers needed before dispatch can start"
                },
                {
                  "name": "delayBeforeDispatch",
                  "type": "long",
                  "desc": "Delay to wait before dispatching if number of consumers before dispatch is not met"
                },
                {
                  "name": "autoDelete",
                  "type": "boolean",
                  "desc": "If the queue should be deleted once no consumers"
                },
                {
                  "name": "autoDeleteDelay",
                  "type": "long",
                  "desc": "How long to wait (in milliseconds) before deleting auto-created queues after the queue has 0 consumers"
                },
                {
                  "name": "autoDeleteMessageCount",
                  "type": "long",
                  "desc": "The message count the queue must be at or below before it can be evaluated to be auto deleted, 0 waits until empty queue (default) and -1 disables this check"
                },
                {
                  "name": "autoCreateAddress",
                  "type": "boolean",
                  "desc": "Create an address with default values should a matching address not be found"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Create a queue"
            },
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "Filter of the queue"
                },
                {
                  "name": "durable",
                  "type": "boolean",
                  "desc": "Is the queue durable?"
                },
                {
                  "name": "maxConsumers",
                  "type": "int",
                  "desc": "The maximum number of consumers allowed on this queue at any one time"
                },
                {
                  "name": "purgeOnNoConsumers",
                  "type": "boolean",
                  "desc": "Delete this queue when the last consumer disconnects"
                },
                {
                  "name": "exclusive",
                  "type": "boolean",
                  "desc": "If the queue should route exclusively to one consumer"
                },
                {
                  "name": "groupRebalance",
                  "type": "boolean",
                  "desc": "If the queue should rebalance groups when a consumer is added"
                },
                {
                  "name": "groupBuckets",
                  "type": "int",
                  "desc": "Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead"
                },
                {
                  "name": "lastValue",
                  "type": "boolean",
                  "desc": "Use last-value semantics"
                },
                {
                  "name": "lastValueKey",
                  "type": "java.lang.String",
                  "desc": "Use the specified property key for the last value"
                },
                {
                  "name": "nonDestructive",
                  "type": "boolean",
                  "desc": "If the queue is non-destructive"
                },
                {
                  "name": "consumersBeforeDispatch",
                  "type": "int",
                  "desc": "Number of consumers needed before dispatch can start"
                },
                {
                  "name": "delayBeforeDispatch",
                  "type": "long",
                  "desc": "Delay to wait before dispatching if number of consumers before dispatch is not met"
                },
                {
                  "name": "autoDelete",
                  "type": "boolean",
                  "desc": "If the queue should be deleted once no consumers"
                },
                {
                  "name": "autoDeleteDelay",
                  "type": "long",
                  "desc": "How long to wait (in milliseconds) before deleting auto-created queues after the queue has 0 consumers"
                },
                {
                  "name": "autoDeleteMessageCount",
                  "type": "long",
                  "desc": "The message count the queue must be at or below before it can be evaluated to be auto deleted, 0 waits until empty queue (default) and -1 disables this check"
                },
                {
                  "name": "autoCreateAddress",
                  "type": "boolean",
                  "desc": "Create an address with default values should a matching address not be found"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Create a queue"
            },
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "Filter of the queue"
                },
                {
                  "name": "durable",
                  "type": "boolean",
                  "desc": "Is the queue durable?"
                },
                {
                  "name": "maxConsumers",
                  "type": "int",
                  "desc": "The maximum number of consumers allowed on this queue at any one time"
                },
                {
                  "name": "purgeOnNoConsumers",
                  "type": "boolean",
                  "desc": "Delete this queue when the last consumer disconnects"
                },
                {
                  "name": "autoCreateAddress",
                  "type": "boolean",
                  "desc": "Create an address with default values should a matching address not be found"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Create a queue"
            },
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "Filter of the queue"
                },
                {
                  "name": "durable",
                  "type": "boolean",
                  "desc": "Is the queue durable?"
                },
                {
                  "name": "maxConsumers",
                  "type": "int",
                  "desc": "The maximum number of consumers allowed on this queue at any one time"
                },
                {
                  "name": "purgeOnNoConsumers",
                  "type": "boolean",
                  "desc": "Delete this queue when the last consumer disconnects"
                },
                {
                  "name": "exclusive",
                  "type": "boolean",
                  "desc": "If the queue should route exclusively to one consumer"
                },
                {
                  "name": "groupRebalance",
                  "type": "boolean",
                  "desc": "If the queue should rebalance groups when a consumer is added"
                },
                {
                  "name": "groupBuckets",
                  "type": "int",
                  "desc": "Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead"
                },
                {
                  "name": "groupFirstKey",
                  "type": "java.lang.String",
                  "desc": "Key used to mark a message is first in a group for a consumer"
                },
                {
                  "name": "lastValue",
                  "type": "boolean",
                  "desc": "Use last-value semantics"
                },
                {
                  "name": "lastValueKey",
                  "type": "java.lang.String",
                  "desc": "Use the specified property key for the last value"
                },
                {
                  "name": "nonDestructive",
                  "type": "boolean",
                  "desc": "If the queue is non-destructive"
                },
                {
                  "name": "consumersBeforeDispatch",
                  "type": "int",
                  "desc": "Number of consumers needed before dispatch can start"
                },
                {
                  "name": "delayBeforeDispatch",
                  "type": "long",
                  "desc": "Delay to wait before dispatching if number of consumers before dispatch is not met"
                },
                {
                  "name": "autoDelete",
                  "type": "boolean",
                  "desc": "If the queue should be deleted once no consumers"
                },
                {
                  "name": "autoDeleteDelay",
                  "type": "long",
                  "desc": "How long to wait (in milliseconds) before deleting auto-created queues after the queue has 0 consumers"
                },
                {
                  "name": "autoDeleteMessageCount",
                  "type": "long",
                  "desc": "The message count the queue must be at or below before it can be evaluated to be auto deleted, 0 waits until empty queue (default) and -1 disables this check"
                },
                {
                  "name": "autoCreateAddress",
                  "type": "boolean",
                  "desc": "Create an address with default values should a matching address not be found"
                },
                {
                  "name": "ringSize",
                  "type": "long",
                  "desc": "The size this queue should maintain according to ring semantics"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Create a queue"
            },
            {
              "args": [
                {
                  "name": "queueConfiguration",
                  "type": "java.lang.String",
                  "desc": "the configuration of the queue in JSON format"
                },
                {
                  "name": "ignoreIfExists",
                  "type": "boolean",
                  "desc": "whether or not to try to create the queue if it exists already"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Create a queue"
            },
            {
              "args": [
                {
                  "name": "queueConfiguration",
                  "type": "java.lang.String",
                  "desc": "the configuration of the queue in JSON format"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Create a queue"
            },
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "durable",
                  "type": "boolean",
                  "desc": "Is the queue durable?"
                }
              ],
              "ret": "void",
              "desc": "Create a queue with the specified address, name and durability"
            },
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                }
              ],
              "ret": "void",
              "desc": "Create a queue with the specified address"
            },
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                }
              ],
              "ret": "void",
              "desc": "Create a queue with the specified address"
            },
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "Filter of the queue"
                },
                {
                  "name": "durable",
                  "type": "boolean",
                  "desc": "Is the queue durable?"
                },
                {
                  "name": "maxConsumers",
                  "type": "int",
                  "desc": "The maximum number of consumers allowed on this queue at any one time"
                },
                {
                  "name": "purgeOnNoConsumers",
                  "type": "boolean",
                  "desc": "Delete this queue when the last consumer disconnects"
                },
                {
                  "name": "exclusive",
                  "type": "boolean",
                  "desc": "If the queue should route exclusively to one consumer"
                },
                {
                  "name": "groupRebalance",
                  "type": "boolean",
                  "desc": "If the queue should rebalance groups when a consumer is added"
                },
                {
                  "name": "groupBuckets",
                  "type": "int",
                  "desc": "Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead"
                },
                {
                  "name": "lastValue",
                  "type": "boolean",
                  "desc": "Use last-value semantics"
                },
                {
                  "name": "lastValueKey",
                  "type": "java.lang.String",
                  "desc": "Use the specified property key for the last value"
                },
                {
                  "name": "nonDestructive",
                  "type": "boolean",
                  "desc": "If the queue is non-destructive"
                },
                {
                  "name": "consumersBeforeDispatch",
                  "type": "int",
                  "desc": "Number of consumers needed before dispatch can start"
                },
                {
                  "name": "delayBeforeDispatch",
                  "type": "long",
                  "desc": "Delay to wait before dispatching if number of consumers before dispatch is not met"
                },
                {
                  "name": "autoCreateAddress",
                  "type": "boolean",
                  "desc": "Create an address with default values should a matching address not be found"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Create a queue"
            },
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "Filter of the queue"
                },
                {
                  "name": "durable",
                  "type": "boolean",
                  "desc": "Is the queue durable?"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                }
              ],
              "ret": "void",
              "desc": "Create a queue"
            },
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "Filter of the queue"
                },
                {
                  "name": "durable",
                  "type": "boolean",
                  "desc": "Is the queue durable?"
                }
              ],
              "ret": "void",
              "desc": "Create a queue"
            },
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "durable",
                  "type": "boolean",
                  "desc": "Is the queue durable?"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                }
              ],
              "ret": "void",
              "desc": "Create a queue with the specified address, name and durability"
            }
          ],
          "listUser": {
            "args": [
              {
                "name": "username",
                "type": "java.lang.String",
                "desc": "Name of the user; leave null to list all known users"
              }
            ],
            "ret": "java.lang.String",
            "desc": "list info about a user or all users if no username is supplied (only applicable when using the JAAS PropertiesLoginModule or the ActiveMQBasicSecurityManager)"
          },
          "rollbackPreparedTransaction": {
            "args": [
              {
                "name": "transactionAsBase64",
                "type": "java.lang.String",
                "desc": "the Base64 representation of a transaction"
              }
            ],
            "ret": "boolean",
            "desc": "Rollback a prepared transaction"
          },
          "listConsumers": {
            "args": [
              {
                "name": "options",
                "type": "java.lang.String",
                "desc": "Options"
              },
              {
                "name": "pageNumber",
                "type": "int",
                "desc": "Page Number"
              },
              {
                "name": "pageSize",
                "type": "int",
                "desc": "Page Size"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Search for Consumers"
          },
          "createBridge": [
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the bridge"
                },
                {
                  "name": "queueName",
                  "type": "java.lang.String",
                  "desc": "Name of the source queue"
                },
                {
                  "name": "forwardingAddress",
                  "type": "java.lang.String",
                  "desc": "Forwarding address"
                },
                {
                  "name": "filterString",
                  "type": "java.lang.String",
                  "desc": "Filter of the bridge"
                },
                {
                  "name": "transformerClassName",
                  "type": "java.lang.String",
                  "desc": "Class name of the bridge transformer"
                },
                {
                  "name": "retryInterval",
                  "type": "long",
                  "desc": "Connection retry interval"
                },
                {
                  "name": "retryIntervalMultiplier",
                  "type": "double",
                  "desc": "Connection retry interval multiplier"
                },
                {
                  "name": "initialConnectAttempts",
                  "type": "int",
                  "desc": "Number of initial connection attempts"
                },
                {
                  "name": "reconnectAttempts",
                  "type": "int",
                  "desc": "Number of reconnection attempts"
                },
                {
                  "name": "useDuplicateDetection",
                  "type": "boolean",
                  "desc": "Use duplicate detection"
                },
                {
                  "name": "confirmationWindowSize",
                  "type": "int",
                  "desc": "Confirmation window size"
                },
                {
                  "name": "producerWindowSize",
                  "type": "int",
                  "desc": "Producer window size"
                },
                {
                  "name": "clientFailureCheckPeriod",
                  "type": "long",
                  "desc": "Period to check client failure"
                },
                {
                  "name": "staticConnectorNames",
                  "type": "java.lang.String",
                  "desc": "comma separated list of connector names or name of discovery group if 'useDiscoveryGroup' is set to true"
                },
                {
                  "name": "useDiscoveryGroup",
                  "type": "boolean",
                  "desc": "use discovery  group"
                },
                {
                  "name": "ha",
                  "type": "boolean",
                  "desc": "Is it using HA"
                },
                {
                  "name": "user",
                  "type": "java.lang.String",
                  "desc": "User name"
                },
                {
                  "name": "password",
                  "type": "java.lang.String",
                  "desc": "User password"
                }
              ],
              "ret": "void",
              "desc": "Create a Bridge"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the bridge"
                },
                {
                  "name": "queueName",
                  "type": "java.lang.String",
                  "desc": "Name of the source queue"
                },
                {
                  "name": "forwardingAddress",
                  "type": "java.lang.String",
                  "desc": "Forwarding address"
                },
                {
                  "name": "filterString",
                  "type": "java.lang.String",
                  "desc": "Filter of the bridge"
                },
                {
                  "name": "transformerClassName",
                  "type": "java.lang.String",
                  "desc": "Class name of the bridge transformer"
                },
                {
                  "name": "transformerPropertiesAsJSON",
                  "type": "java.lang.String",
                  "desc": "Configuration properties of the bridge transformer in JSON form"
                },
                {
                  "name": "retryInterval",
                  "type": "long",
                  "desc": "Connection retry interval"
                },
                {
                  "name": "retryIntervalMultiplier",
                  "type": "double",
                  "desc": "Connection retry interval multiplier"
                },
                {
                  "name": "initialConnectAttempts",
                  "type": "int",
                  "desc": "Number of initial connection attempts"
                },
                {
                  "name": "reconnectAttempts",
                  "type": "int",
                  "desc": "Number of reconnection attempts"
                },
                {
                  "name": "useDuplicateDetection",
                  "type": "boolean",
                  "desc": "Use duplicate detection"
                },
                {
                  "name": "confirmationWindowSize",
                  "type": "int",
                  "desc": "Confirmation window size"
                },
                {
                  "name": "producerWindowSize",
                  "type": "int",
                  "desc": "Producer window size"
                },
                {
                  "name": "clientFailureCheckPeriod",
                  "type": "long",
                  "desc": "Period to check client failure"
                },
                {
                  "name": "staticConnectorNames",
                  "type": "java.lang.String",
                  "desc": "comma separated list of connector names or name of discovery group if 'useDiscoveryGroup' is set to true"
                },
                {
                  "name": "useDiscoveryGroup",
                  "type": "boolean",
                  "desc": "use discovery  group"
                },
                {
                  "name": "ha",
                  "type": "boolean",
                  "desc": "Is it using HA"
                },
                {
                  "name": "user",
                  "type": "java.lang.String",
                  "desc": "User name"
                },
                {
                  "name": "password",
                  "type": "java.lang.String",
                  "desc": "User password"
                }
              ],
              "ret": "void",
              "desc": "Create a Bridge"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the bridge"
                },
                {
                  "name": "queueName",
                  "type": "java.lang.String",
                  "desc": "Name of the source queue"
                },
                {
                  "name": "forwardingAddress",
                  "type": "java.lang.String",
                  "desc": "Forwarding address"
                },
                {
                  "name": "filterString",
                  "type": "java.lang.String",
                  "desc": "Filter of the bridge"
                },
                {
                  "name": "transformerClassName",
                  "type": "java.lang.String",
                  "desc": "Class name of the bridge transformer"
                },
                {
                  "name": "retryInterval",
                  "type": "long",
                  "desc": "Connection retry interval"
                },
                {
                  "name": "retryIntervalMultiplier",
                  "type": "double",
                  "desc": "Connection retry interval multiplier"
                },
                {
                  "name": "initialConnectAttempts",
                  "type": "int",
                  "desc": "Number of initial connection attempts"
                },
                {
                  "name": "reconnectAttempts",
                  "type": "int",
                  "desc": "Number of reconnection attempts"
                },
                {
                  "name": "useDuplicateDetection",
                  "type": "boolean",
                  "desc": "Use duplicate detection"
                },
                {
                  "name": "confirmationWindowSize",
                  "type": "int",
                  "desc": "Confirmation window size"
                },
                {
                  "name": "clientFailureCheckPeriod",
                  "type": "long",
                  "desc": "Period to check client failure"
                },
                {
                  "name": "staticConnectorNames",
                  "type": "java.lang.String",
                  "desc": "comma separated list of connector names or name of discovery group if 'useDiscoveryGroup' is set to true"
                },
                {
                  "name": "useDiscoveryGroup",
                  "type": "boolean",
                  "desc": "use discovery  group"
                },
                {
                  "name": "ha",
                  "type": "boolean",
                  "desc": "Is it using HA"
                },
                {
                  "name": "user",
                  "type": "java.lang.String",
                  "desc": "User name"
                },
                {
                  "name": "password",
                  "type": "java.lang.String",
                  "desc": "User password"
                }
              ],
              "ret": "void",
              "desc": "Create a Bridge"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the bridge"
                },
                {
                  "name": "queueName",
                  "type": "java.lang.String",
                  "desc": "Name of the source queue"
                },
                {
                  "name": "forwardingAddress",
                  "type": "java.lang.String",
                  "desc": "Forwarding address"
                },
                {
                  "name": "filterString",
                  "type": "java.lang.String",
                  "desc": "Filter of the bridge"
                },
                {
                  "name": "transformerClassName",
                  "type": "java.lang.String",
                  "desc": "Class name of the bridge transformer"
                },
                {
                  "name": "transformerProperties",
                  "type": "java.util.Map",
                  "desc": "Configuration properties of the bridge transformer"
                },
                {
                  "name": "retryInterval",
                  "type": "long",
                  "desc": "Connection retry interval"
                },
                {
                  "name": "retryIntervalMultiplier",
                  "type": "double",
                  "desc": "Connection retry interval multiplier"
                },
                {
                  "name": "initialConnectAttempts",
                  "type": "int",
                  "desc": "Number of initial connection attempts"
                },
                {
                  "name": "reconnectAttempts",
                  "type": "int",
                  "desc": "Number of reconnection attempts"
                },
                {
                  "name": "useDuplicateDetection",
                  "type": "boolean",
                  "desc": "Use duplicate detection"
                },
                {
                  "name": "confirmationWindowSize",
                  "type": "int",
                  "desc": "Confirmation window size"
                },
                {
                  "name": "producerWindowSize",
                  "type": "int",
                  "desc": "Producer window size"
                },
                {
                  "name": "clientFailureCheckPeriod",
                  "type": "long",
                  "desc": "Period to check client failure"
                },
                {
                  "name": "staticConnectorNames",
                  "type": "java.lang.String",
                  "desc": "comma separated list of connector names or name of discovery group if 'useDiscoveryGroup' is set to true"
                },
                {
                  "name": "useDiscoveryGroup",
                  "type": "boolean",
                  "desc": "use discovery  group"
                },
                {
                  "name": "ha",
                  "type": "boolean",
                  "desc": "Is it using HA"
                },
                {
                  "name": "user",
                  "type": "java.lang.String",
                  "desc": "User name"
                },
                {
                  "name": "password",
                  "type": "java.lang.String",
                  "desc": "User password"
                }
              ],
              "ret": "void",
              "desc": "Create a Bridge"
            },
            {
              "args": [
                {
                  "name": "bridgeConfiguration",
                  "type": "java.lang.String",
                  "desc": "the configuration of the bridge in JSON format"
                }
              ],
              "ret": "void",
              "desc": "Create a bridge"
            }
          ],
          "disableMessageCounters": {
            "args": [],
            "ret": "void",
            "desc": "Disable message counters"
          },
          "listProducers": {
            "args": [
              {
                "name": "options",
                "type": "java.lang.String",
                "desc": "Options"
              },
              {
                "name": "pageNumber",
                "type": "int",
                "desc": "Page Number"
              },
              {
                "name": "pageSize",
                "type": "int",
                "desc": "Page Size"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Search for Consumers"
          },
          "addAddressSettings": [
            {
              "args": [
                {
                  "name": "addressMatch",
                  "type": "java.lang.String",
                  "desc": "an address match"
                },
                {
                  "name": "DLA",
                  "type": "java.lang.String",
                  "desc": "the dead letter address setting"
                },
                {
                  "name": "expiryAddress",
                  "type": "java.lang.String",
                  "desc": "the expiry address setting"
                },
                {
                  "name": "expiryDelay",
                  "type": "long",
                  "desc": "the expiry delay setting"
                },
                {
                  "name": "lastValueQueue",
                  "type": "boolean",
                  "desc": "are any queues created for this address a last value queue"
                },
                {
                  "name": "maxDeliveryAttempts",
                  "type": "int",
                  "desc": "the delivery attempts"
                },
                {
                  "name": "maxSizeBytes",
                  "type": "long",
                  "desc": "the max size in bytes"
                },
                {
                  "name": "pageSizeBytes",
                  "type": "int",
                  "desc": "the page size in bytes"
                },
                {
                  "name": "pageCacheMaxSize",
                  "type": "int",
                  "desc": "the max number of pages in the soft memory cache"
                },
                {
                  "name": "redeliveryDelay",
                  "type": "long",
                  "desc": "the redelivery delay"
                },
                {
                  "name": "redeliveryMultiplier",
                  "type": "double",
                  "desc": "the redelivery delay multiplier"
                },
                {
                  "name": "maxRedeliveryDelay",
                  "type": "long",
                  "desc": "the maximum redelivery delay"
                },
                {
                  "name": "redistributionDelay",
                  "type": "long",
                  "desc": "the redistribution delay"
                },
                {
                  "name": "sendToDLAOnNoRoute",
                  "type": "boolean",
                  "desc": "do we send to the DLA when there is no where to route the message"
                },
                {
                  "name": "addressFullMessagePolicy",
                  "type": "java.lang.String",
                  "desc": "the policy to use when the address is full"
                },
                {
                  "name": "slowConsumerThreshold",
                  "type": "long",
                  "desc": "when a consumer falls below this threshold in terms of messages consumed per second it will be considered 'slow'"
                },
                {
                  "name": "slowConsumerCheckPeriod",
                  "type": "long",
                  "desc": "how often (in seconds) to check for slow consumers"
                },
                {
                  "name": "slowConsumerPolicy",
                  "type": "java.lang.String",
                  "desc": "the policy to use when a slow consumer is detected"
                },
                {
                  "name": "autoCreateJmsQueues",
                  "type": "boolean",
                  "desc": "allow jms queues to be created automatically"
                },
                {
                  "name": "autoDeleteJmsQueues",
                  "type": "boolean",
                  "desc": "allow auto-created jms queues to be deleted automatically"
                },
                {
                  "name": "autoCreateJmsTopics",
                  "type": "boolean",
                  "desc": "allow jms topics to be created automatically"
                },
                {
                  "name": "autoDeleteJmsTopics",
                  "type": "boolean",
                  "desc": "allow auto-created jms topics to be deleted automatically"
                },
                {
                  "name": "autoCreateQueues",
                  "type": "boolean",
                  "desc": "allow queues to be created automatically"
                },
                {
                  "name": "autoDeleteQueues",
                  "type": "boolean",
                  "desc": "allow auto-created queues to be deleted automatically"
                },
                {
                  "name": "autoCreateAddresses",
                  "type": "boolean",
                  "desc": "allow addresses to be created automatically"
                },
                {
                  "name": "autoDeleteAddresses",
                  "type": "boolean",
                  "desc": "allow auto-created addresses to be deleted automatically"
                },
                {
                  "name": "configDeleteQueues",
                  "type": "java.lang.String",
                  "desc": "how to deal with queues deleted from XML at runtime"
                },
                {
                  "name": "configDeleteAddresses",
                  "type": "java.lang.String",
                  "desc": "how to deal with addresses deleted from XML at runtime"
                },
                {
                  "name": "maxSizeBytesRejectThreshold",
                  "type": "long",
                  "desc": "used with `BLOCK`, the max size an address can reach before messages are rejected; works in combination with `max-size-bytes` for AMQP clients only"
                },
                {
                  "name": "defaultLastValueKey",
                  "type": "java.lang.String",
                  "desc": "last-value-key value if none is set on the queue"
                },
                {
                  "name": "defaultNonDestructive",
                  "type": "boolean",
                  "desc": "non-destructive value if none is set on the queue"
                },
                {
                  "name": "defaultExclusiveQueue",
                  "type": "boolean",
                  "desc": "exclusive value if none is set on the queue"
                },
                {
                  "name": "defaultGroupRebalance",
                  "type": "boolean",
                  "desc": "group-rebalance value if none is set on the queue"
                },
                {
                  "name": "defaultGroupBuckets",
                  "type": "int",
                  "desc": "group-buckets value if none is set on the queue"
                },
                {
                  "name": "defaultGroupFirstKey",
                  "type": "java.lang.String",
                  "desc": "group-first-key value if none is set on the queue"
                },
                {
                  "name": "defaultMaxConsumers",
                  "type": "int",
                  "desc": "max-consumers value if none is set on the queue"
                },
                {
                  "name": "defaultPurgeOnNoConsumers",
                  "type": "boolean",
                  "desc": "purge-on-no-consumers value if none is set on the queue"
                },
                {
                  "name": "defaultConsumersBeforeDispatch",
                  "type": "int",
                  "desc": "consumers-before-dispatch value if none is set on the queue"
                },
                {
                  "name": "defaultDelayBeforeDispatch",
                  "type": "long",
                  "desc": "delay-before-dispatch value if none is set on the queue"
                },
                {
                  "name": "defaultQueueRoutingType",
                  "type": "java.lang.String",
                  "desc": "routing-type value if none is set on the queue"
                },
                {
                  "name": "defaultAddressRoutingType",
                  "type": "java.lang.String",
                  "desc": "routing-type value if none is set on the address"
                },
                {
                  "name": "defaultConsumerWindowSize",
                  "type": "int",
                  "desc": "consumer-window-size value if none is set on the queue"
                },
                {
                  "name": "defaultRingSize",
                  "type": "long",
                  "desc": "ring-size value if none is set on the queue"
                },
                {
                  "name": "autoDeleteCreatedQueues",
                  "type": "boolean",
                  "desc": "allow created queues to be deleted automatically"
                },
                {
                  "name": "autoDeleteQueuesDelay",
                  "type": "long",
                  "desc": "delay for deleting auto-created queues"
                },
                {
                  "name": "autoDeleteQueuesMessageCount",
                  "type": "long",
                  "desc": "the message count the queue must be at or below before it can be auto deleted"
                },
                {
                  "name": "autoDeleteAddressesDelay",
                  "type": "long",
                  "desc": "delay for deleting auto-created addresses"
                },
                {
                  "name": "redeliveryCollisionAvoidanceFactor",
                  "type": "double",
                  "desc": "factor by which to modify the redelivery delay slightly to avoid collisions"
                },
                {
                  "name": "retroactiveMessageCount",
                  "type": "long",
                  "desc": "the number of messages to preserve for future queues created on the matching address"
                },
                {
                  "name": "autoCreateDeadLetterResources",
                  "type": "boolean",
                  "desc": "allow dead-letter address & queue to be created automatically"
                },
                {
                  "name": "deadLetterQueuePrefix",
                  "type": "java.lang.String",
                  "desc": "prefix to use on auto-create dead-letter queue"
                },
                {
                  "name": "deadLetterQueueSuffix",
                  "type": "java.lang.String",
                  "desc": "suffix to use on auto-create dead-letter queue"
                },
                {
                  "name": "autoCreateExpiryResources",
                  "type": "boolean",
                  "desc": "allow expiry address & queue to be created automatically"
                },
                {
                  "name": "expiryQueuePrefix",
                  "type": "java.lang.String",
                  "desc": "prefix to use on auto-create expiry queue"
                },
                {
                  "name": "expiryQueueSuffix",
                  "type": "java.lang.String",
                  "desc": "suffix to use on auto-create expiry queue"
                },
                {
                  "name": "minExpiryDelay",
                  "type": "long",
                  "desc": "the minimum expiry delay setting"
                },
                {
                  "name": "maxExpiryDelay",
                  "type": "long",
                  "desc": "the maximum expiry delay setting"
                },
                {
                  "name": "enableMetrics",
                  "type": "boolean",
                  "desc": "whether or not to enable metrics"
                }
              ],
              "ret": "void",
              "desc": "Add address settings for addresses matching the addressMatch"
            },
            {
              "args": [
                {
                  "name": "addressMatch",
                  "type": "java.lang.String",
                  "desc": "an address match"
                },
                {
                  "name": "DLA",
                  "type": "java.lang.String",
                  "desc": "the dead letter address setting"
                },
                {
                  "name": "expiryAddress",
                  "type": "java.lang.String",
                  "desc": "the expiry address setting"
                },
                {
                  "name": "expiryDelay",
                  "type": "long",
                  "desc": "the expiry delay setting"
                },
                {
                  "name": "lastValueQueue",
                  "type": "boolean",
                  "desc": "are any queues created for this address a last value queue"
                },
                {
                  "name": "deliveryAttempts",
                  "type": "int",
                  "desc": "the delivery attempts"
                },
                {
                  "name": "maxSizeBytes",
                  "type": "long",
                  "desc": "the max size in bytes"
                },
                {
                  "name": "pageSizeBytes",
                  "type": "int",
                  "desc": "the page size in bytes"
                },
                {
                  "name": "pageMaxCacheSize",
                  "type": "int",
                  "desc": "the max number of pages in the soft memory cache"
                },
                {
                  "name": "redeliveryDelay",
                  "type": "long",
                  "desc": "the redelivery delay"
                },
                {
                  "name": "redeliveryMultiplier",
                  "type": "double",
                  "desc": "the redelivery delay multiplier"
                },
                {
                  "name": "maxRedeliveryDelay",
                  "type": "long",
                  "desc": "the maximum redelivery delay"
                },
                {
                  "name": "redistributionDelay",
                  "type": "long",
                  "desc": "the redistribution delay"
                },
                {
                  "name": "sendToDLAOnNoRoute",
                  "type": "boolean",
                  "desc": "do we send to the DLA when there is no where to route the message"
                },
                {
                  "name": "addressFullMessagePolicy",
                  "type": "java.lang.String",
                  "desc": "the policy to use when the address is full"
                },
                {
                  "name": "slowConsumerThreshold",
                  "type": "long",
                  "desc": "when a consumer falls below this threshold in terms of messages consumed per second it will be considered 'slow'"
                },
                {
                  "name": "slowConsumerCheckPeriod",
                  "type": "long",
                  "desc": "how often (in seconds) to check for slow consumers"
                },
                {
                  "name": "slowConsumerPolicy",
                  "type": "java.lang.String",
                  "desc": "the policy to use when a slow consumer is detected"
                },
                {
                  "name": "autoCreateJmsQueues",
                  "type": "boolean",
                  "desc": "allow queues to be created automatically"
                },
                {
                  "name": "autoDeleteJmsQueues",
                  "type": "boolean",
                  "desc": "allow auto-created queues to be deleted automatically"
                },
                {
                  "name": "autoCreateJmsTopics",
                  "type": "boolean",
                  "desc": "allow topics to be created automatically"
                },
                {
                  "name": "autoDeleteJmsTopics",
                  "type": "boolean",
                  "desc": "allow auto-created topics to be deleted automatically"
                }
              ],
              "ret": "void",
              "desc": "Add address settings for addresses matching the addressMatch"
            },
            {
              "args": [
                {
                  "name": "addressMatch",
                  "type": "java.lang.String",
                  "desc": "an address match"
                },
                {
                  "name": "DLA",
                  "type": "java.lang.String",
                  "desc": "the dead letter address setting"
                },
                {
                  "name": "expiryAddress",
                  "type": "java.lang.String",
                  "desc": "the expiry address setting"
                },
                {
                  "name": "expiryDelay",
                  "type": "long",
                  "desc": "the expiry delay setting"
                },
                {
                  "name": "lastValueQueue",
                  "type": "boolean",
                  "desc": "are any queues created for this address a last value queue"
                },
                {
                  "name": "deliveryAttempts",
                  "type": "int",
                  "desc": "the delivery attempts"
                },
                {
                  "name": "maxSizeBytes",
                  "type": "long",
                  "desc": "the max size in bytes"
                },
                {
                  "name": "pageSizeBytes",
                  "type": "int",
                  "desc": "the page size in bytes"
                },
                {
                  "name": "pageMaxCacheSize",
                  "type": "int",
                  "desc": "the max number of pages in the soft memory cache"
                },
                {
                  "name": "redeliveryDelay",
                  "type": "long",
                  "desc": "the redelivery delay"
                },
                {
                  "name": "redeliveryMultiplier",
                  "type": "double",
                  "desc": "the redelivery delay multiplier"
                },
                {
                  "name": "maxRedeliveryDelay",
                  "type": "long",
                  "desc": "the maximum redelivery delay"
                },
                {
                  "name": "redistributionDelay",
                  "type": "long",
                  "desc": "the redistribution delay"
                },
                {
                  "name": "sendToDLAOnNoRoute",
                  "type": "boolean",
                  "desc": "do we send to the DLA when there is no where to route the message"
                },
                {
                  "name": "addressFullMessagePolicy",
                  "type": "java.lang.String",
                  "desc": "the policy to use when the address is full"
                },
                {
                  "name": "slowConsumerThreshold",
                  "type": "long",
                  "desc": "when a consumer falls below this threshold in terms of messages consumed per second it will be considered 'slow'"
                },
                {
                  "name": "slowConsumerCheckPeriod",
                  "type": "long",
                  "desc": "how often (in seconds) to check for slow consumers"
                },
                {
                  "name": "slowConsumerPolicy",
                  "type": "java.lang.String",
                  "desc": "the policy to use when a slow consumer is detected"
                },
                {
                  "name": "autoCreateJmsQueues",
                  "type": "boolean",
                  "desc": "allow jms queues to be created automatically"
                },
                {
                  "name": "autoDeleteJmsQueues",
                  "type": "boolean",
                  "desc": "allow auto-created jms queues to be deleted automatically"
                },
                {
                  "name": "autoCreateJmsTopics",
                  "type": "boolean",
                  "desc": "allow jms topics to be created automatically"
                },
                {
                  "name": "autoDeleteJmsTopics",
                  "type": "boolean",
                  "desc": "allow auto-created jms topics to be deleted automatically"
                },
                {
                  "name": "autoCreateQueues",
                  "type": "boolean",
                  "desc": "allow queues to be created automatically"
                },
                {
                  "name": "autoDeleteQueues",
                  "type": "boolean",
                  "desc": "allow auto-created queues to be deleted automatically"
                },
                {
                  "name": "autoCreateAddresses",
                  "type": "boolean",
                  "desc": "allow addresses to be created automatically"
                },
                {
                  "name": "autoDeleteAddresses",
                  "type": "boolean",
                  "desc": "allow auto-created addresses to be deleted automatically"
                },
                {
                  "name": "configDeleteQueues",
                  "type": "java.lang.String",
                  "desc": "how to deal with queues deleted from XML at runtime"
                },
                {
                  "name": "configDeleteAddresses",
                  "type": "java.lang.String",
                  "desc": "how to deal with addresses deleted from XML at runtime"
                },
                {
                  "name": "maxSizeBytesRejectThreshold",
                  "type": "long",
                  "desc": "used with `BLOCK`, the max size an address can reach before messages are rejected; works in combination with `max-size-bytes` for AMQP clients only"
                },
                {
                  "name": "defaultLastValueKey",
                  "type": "java.lang.String",
                  "desc": "last-value-key value if none is set on the queue"
                },
                {
                  "name": "defaultNonDestructive",
                  "type": "boolean",
                  "desc": "non-destructive value if none is set on the queue"
                },
                {
                  "name": "defaultExclusiveQueue",
                  "type": "boolean",
                  "desc": "exclusive value if none is set on the queue"
                },
                {
                  "name": "defaultGroupRebalance",
                  "type": "boolean",
                  "desc": "group-rebalance value if none is set on the queue"
                },
                {
                  "name": "defaultGroupBuckets",
                  "type": "int",
                  "desc": "group-buckets value if none is set on the queue"
                },
                {
                  "name": "defaultGroupFirstKey",
                  "type": "java.lang.String",
                  "desc": "group-first-key value if none is set on the queue"
                },
                {
                  "name": "defaultMaxConsumers",
                  "type": "int",
                  "desc": "max-consumers value if none is set on the queue"
                },
                {
                  "name": "defaultPurgeOnNoConsumers",
                  "type": "boolean",
                  "desc": "purge-on-no-consumers value if none is set on the queue"
                },
                {
                  "name": "defaultConsumersBeforeDispatch",
                  "type": "int",
                  "desc": "consumers-before-dispatch value if none is set on the queue"
                },
                {
                  "name": "defaultDelayBeforeDispatch",
                  "type": "long",
                  "desc": "delay-before-dispatch value if none is set on the queue"
                },
                {
                  "name": "defaultQueueRoutingType",
                  "type": "java.lang.String",
                  "desc": "routing-type value if none is set on the queue"
                },
                {
                  "name": "defaultAddressRoutingType",
                  "type": "java.lang.String",
                  "desc": "routing-type value if none is set on the address"
                },
                {
                  "name": "defaultConsumerWindowSize",
                  "type": "int",
                  "desc": "consumer-window-size value if none is set on the queue"
                },
                {
                  "name": "defaultRingSize",
                  "type": "long",
                  "desc": "ring-size value if none is set on the queue"
                },
                {
                  "name": "autoDeleteCreatedQueues",
                  "type": "boolean",
                  "desc": "allow created queues to be deleted automatically"
                },
                {
                  "name": "autoDeleteQueuesDelay",
                  "type": "long",
                  "desc": "delay for deleting auto-created queues"
                },
                {
                  "name": "autoDeleteQueuesMessageCount",
                  "type": "long",
                  "desc": "the message count the queue must be at or below before it can be auto deleted"
                },
                {
                  "name": "autoDeleteAddressesDelay",
                  "type": "long",
                  "desc": "delay for deleting auto-created addresses"
                },
                {
                  "name": "redeliveryCollisionAvoidanceFactor",
                  "type": "double",
                  "desc": "factor by which to modify the redelivery delay slightly to avoid collisions"
                },
                {
                  "name": "retroactiveMessageCount",
                  "type": "long",
                  "desc": "the number of messages to preserve for future queues created on the matching address"
                }
              ],
              "ret": "void",
              "desc": "Add address settings for addresses matching the addressMatch"
            },
            {
              "args": [
                {
                  "name": "addressMatch",
                  "type": "java.lang.String",
                  "desc": "an address match"
                },
                {
                  "name": "DLA",
                  "type": "java.lang.String",
                  "desc": "the dead letter address setting"
                },
                {
                  "name": "expiryAddress",
                  "type": "java.lang.String",
                  "desc": "the expiry address setting"
                },
                {
                  "name": "expiryDelay",
                  "type": "long",
                  "desc": "the expiry delay setting"
                },
                {
                  "name": "lastValueQueue",
                  "type": "boolean",
                  "desc": "are any queues created for this address a last value queue"
                },
                {
                  "name": "deliveryAttempts",
                  "type": "int",
                  "desc": "the delivery attempts"
                },
                {
                  "name": "maxSizeBytes",
                  "type": "long",
                  "desc": "the max size in bytes"
                },
                {
                  "name": "pageSizeBytes",
                  "type": "int",
                  "desc": "the page size in bytes"
                },
                {
                  "name": "pageMaxCacheSize",
                  "type": "int",
                  "desc": "the max number of pages in the soft memory cache"
                },
                {
                  "name": "redeliveryDelay",
                  "type": "long",
                  "desc": "the redelivery delay"
                },
                {
                  "name": "redeliveryMultiplier",
                  "type": "double",
                  "desc": "the redelivery delay multiplier"
                },
                {
                  "name": "maxRedeliveryDelay",
                  "type": "long",
                  "desc": "the maximum redelivery delay"
                },
                {
                  "name": "redistributionDelay",
                  "type": "long",
                  "desc": "the redistribution delay"
                },
                {
                  "name": "sendToDLAOnNoRoute",
                  "type": "boolean",
                  "desc": "do we send to the DLA when there is no where to route the message"
                },
                {
                  "name": "addressFullMessagePolicy",
                  "type": "java.lang.String",
                  "desc": "the policy to use when the address is full"
                },
                {
                  "name": "slowConsumerThreshold",
                  "type": "long",
                  "desc": "when a consumer falls below this threshold in terms of messages consumed per second it will be considered 'slow'"
                },
                {
                  "name": "slowConsumerCheckPeriod",
                  "type": "long",
                  "desc": "how often (in seconds) to check for slow consumers"
                },
                {
                  "name": "slowConsumerPolicy",
                  "type": "java.lang.String",
                  "desc": "the policy to use when a slow consumer is detected"
                },
                {
                  "name": "autoCreateJmsQueues",
                  "type": "boolean",
                  "desc": "allow jms queues to be created automatically"
                },
                {
                  "name": "autoDeleteJmsQueues",
                  "type": "boolean",
                  "desc": "allow auto-created jms queues to be deleted automatically"
                },
                {
                  "name": "autoCreateJmsTopics",
                  "type": "boolean",
                  "desc": "allow jms topics to be created automatically"
                },
                {
                  "name": "autoDeleteJmsTopics",
                  "type": "boolean",
                  "desc": "allow auto-created jms topics to be deleted automatically"
                },
                {
                  "name": "autoCreateQueues",
                  "type": "boolean",
                  "desc": "allow queues to be created automatically"
                },
                {
                  "name": "autoDeleteQueues",
                  "type": "boolean",
                  "desc": "allow auto-created queues to be deleted automatically"
                },
                {
                  "name": "autoCreateAddresses",
                  "type": "boolean",
                  "desc": "allow addresses to be created automatically"
                },
                {
                  "name": "autoDeleteAddresses",
                  "type": "boolean",
                  "desc": "allow auto-created addresses to be deleted automatically"
                },
                {
                  "name": "configDeleteQueues",
                  "type": "java.lang.String",
                  "desc": "how to deal with queues deleted from XML at runtime"
                },
                {
                  "name": "configDeleteAddresses",
                  "type": "java.lang.String",
                  "desc": "how to deal with addresses deleted from XML at runtime"
                },
                {
                  "name": "maxSizeBytesRejectThreshold",
                  "type": "long",
                  "desc": "used with `BLOCK`, the max size an address can reach before messages are rejected; works in combination with `max-size-bytes` for AMQP clients only"
                },
                {
                  "name": "defaultLastValueKey",
                  "type": "java.lang.String",
                  "desc": "last-value-key value if none is set on the queue"
                },
                {
                  "name": "defaultNonDestructive",
                  "type": "boolean",
                  "desc": "non-destructive value if none is set on the queue"
                },
                {
                  "name": "defaultExclusiveQueue",
                  "type": "boolean",
                  "desc": "exclusive value if none is set on the queue"
                },
                {
                  "name": "defaultGroupRebalance",
                  "type": "boolean",
                  "desc": "group-rebalance value if none is set on the queue"
                },
                {
                  "name": "defaultGroupBuckets",
                  "type": "int",
                  "desc": "group-buckets value if none is set on the queue"
                },
                {
                  "name": "defaultGroupFirstKey",
                  "type": "java.lang.String",
                  "desc": "group-first-key value if none is set on the queue"
                },
                {
                  "name": "defaultMaxConsumers",
                  "type": "int",
                  "desc": "max-consumers value if none is set on the queue"
                },
                {
                  "name": "defaultPurgeOnNoConsumers",
                  "type": "boolean",
                  "desc": "purge-on-no-consumers value if none is set on the queue"
                },
                {
                  "name": "defaultConsumersBeforeDispatch",
                  "type": "int",
                  "desc": "consumers-before-dispatch value if none is set on the queue"
                },
                {
                  "name": "defaultDelayBeforeDispatch",
                  "type": "long",
                  "desc": "delay-before-dispatch value if none is set on the queue"
                },
                {
                  "name": "defaultQueueRoutingType",
                  "type": "java.lang.String",
                  "desc": "routing-type value if none is set on the queue"
                },
                {
                  "name": "defaultAddressRoutingType",
                  "type": "java.lang.String",
                  "desc": "routing-type value if none is set on the address"
                },
                {
                  "name": "defaultConsumerWindowSize",
                  "type": "int",
                  "desc": "consumer-window-size value if none is set on the queue"
                },
                {
                  "name": "defaultRingSize",
                  "type": "long",
                  "desc": "ring-size value if none is set on the queue"
                },
                {
                  "name": "autoDeleteCreatedQueues",
                  "type": "boolean",
                  "desc": "allow created queues to be deleted automatically"
                },
                {
                  "name": "autoDeleteQueuesDelay",
                  "type": "long",
                  "desc": "delay for deleting auto-created queues"
                },
                {
                  "name": "autoDeleteQueuesMessageCount",
                  "type": "long",
                  "desc": "the message count the queue must be at or below before it can be auto deleted"
                },
                {
                  "name": "autoDeleteAddressesDelay",
                  "type": "long",
                  "desc": "delay for deleting auto-created addresses"
                },
                {
                  "name": "redeliveryCollisionAvoidanceFactor",
                  "type": "double",
                  "desc": "factor by which to modify the redelivery delay slightly to avoid collisions"
                },
                {
                  "name": "retroactiveMessageCount",
                  "type": "long",
                  "desc": "the number of messages to preserve for future queues created on the matching address"
                },
                {
                  "name": "autoCreateDeadLetterResources",
                  "type": "boolean",
                  "desc": "allow dead-letter address & queue to be created automatically"
                },
                {
                  "name": "deadLetterQueuePrefix",
                  "type": "java.lang.String",
                  "desc": "prefix to use on auto-create dead-letter queue"
                },
                {
                  "name": "deadLetterQueueSuffix",
                  "type": "java.lang.String",
                  "desc": "suffix to use on auto-create dead-letter queue"
                },
                {
                  "name": "autoCreateExpiryResources",
                  "type": "boolean",
                  "desc": "allow expiry address & queue to be created automatically"
                },
                {
                  "name": "expiryQueuePrefix",
                  "type": "java.lang.String",
                  "desc": "prefix to use on auto-create expiry queue"
                },
                {
                  "name": "expiryQueueSuffix",
                  "type": "java.lang.String",
                  "desc": "suffix to use on auto-create expiry queue"
                }
              ],
              "ret": "void",
              "desc": "Add address settings for addresses matching the addressMatch"
            },
            {
              "args": [
                {
                  "name": "addressMatch",
                  "type": "java.lang.String",
                  "desc": "an address match"
                },
                {
                  "name": "DLA",
                  "type": "java.lang.String",
                  "desc": "the dead letter address setting"
                },
                {
                  "name": "expiryAddress",
                  "type": "java.lang.String",
                  "desc": "the expiry address setting"
                },
                {
                  "name": "expiryDelay",
                  "type": "long",
                  "desc": "the expiry delay setting"
                },
                {
                  "name": "lastValueQueue",
                  "type": "boolean",
                  "desc": "are any queues created for this address a last value queue"
                },
                {
                  "name": "deliveryAttempts",
                  "type": "int",
                  "desc": "the delivery attempts"
                },
                {
                  "name": "maxSizeBytes",
                  "type": "long",
                  "desc": "the max size in bytes"
                },
                {
                  "name": "pageSizeBytes",
                  "type": "int",
                  "desc": "the page size in bytes"
                },
                {
                  "name": "pageMaxCacheSize",
                  "type": "int",
                  "desc": "the max number of pages in the soft memory cache"
                },
                {
                  "name": "redeliveryDelay",
                  "type": "long",
                  "desc": "the redelivery delay"
                },
                {
                  "name": "redeliveryMultiplier",
                  "type": "double",
                  "desc": "the redelivery delay multiplier"
                },
                {
                  "name": "maxRedeliveryDelay",
                  "type": "long",
                  "desc": "the maximum redelivery delay"
                },
                {
                  "name": "redistributionDelay",
                  "type": "long",
                  "desc": "the redistribution delay"
                },
                {
                  "name": "sendToDLAOnNoRoute",
                  "type": "boolean",
                  "desc": "do we send to the DLA when there is no where to route the message"
                },
                {
                  "name": "addressFullMessagePolicy",
                  "type": "java.lang.String",
                  "desc": "the policy to use when the address is full"
                },
                {
                  "name": "slowConsumerThreshold",
                  "type": "long",
                  "desc": "when a consumer falls below this threshold in terms of messages consumed per second it will be considered 'slow'"
                },
                {
                  "name": "slowConsumerCheckPeriod",
                  "type": "long",
                  "desc": "how often (in seconds) to check for slow consumers"
                },
                {
                  "name": "slowConsumerPolicy",
                  "type": "java.lang.String",
                  "desc": "the policy to use when a slow consumer is detected"
                },
                {
                  "name": "autoCreateJmsQueues",
                  "type": "boolean",
                  "desc": "allow jms queues to be created automatically"
                },
                {
                  "name": "autoDeleteJmsQueues",
                  "type": "boolean",
                  "desc": "allow auto-created jms queues to be deleted automatically"
                },
                {
                  "name": "autoCreateJmsTopics",
                  "type": "boolean",
                  "desc": "allow jms topics to be created automatically"
                },
                {
                  "name": "autoDeleteJmsTopics",
                  "type": "boolean",
                  "desc": "allow auto-created jms topics to be deleted automatically"
                },
                {
                  "name": "autoCreateQueues",
                  "type": "boolean",
                  "desc": "allow queues to be created automatically"
                },
                {
                  "name": "autoDeleteQueues",
                  "type": "boolean",
                  "desc": "allow auto-created queues to be deleted automatically"
                },
                {
                  "name": "autoCreateAddresses",
                  "type": "boolean",
                  "desc": "allow addresses to be created automatically"
                },
                {
                  "name": "autoDeleteAddresses",
                  "type": "boolean",
                  "desc": "allow auto-created addresses to be deleted automatically"
                }
              ],
              "ret": "void",
              "desc": "Add address settings for addresses matching the addressMatch"
            }
          ],
          "updateQueue": [
            {
              "args": [
                {
                  "name": "queueConfiguration",
                  "type": "java.lang.String",
                  "desc": "the configuration of the queue in JSON format"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Update a queue"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "The filter to use on the queue"
                },
                {
                  "name": "maxConsumers",
                  "type": "java.lang.Integer",
                  "desc": "The maximum number of consumers allowed on this queue at any one time"
                },
                {
                  "name": "purgeOnNoConsumers",
                  "type": "java.lang.Boolean",
                  "desc": "Delete this queue when the last consumer disconnects"
                },
                {
                  "name": "exclusive",
                  "type": "java.lang.Boolean",
                  "desc": "If the queue should route exclusively to one consumer"
                },
                {
                  "name": "groupRebalance",
                  "type": "java.lang.Boolean",
                  "desc": "If the queue should rebalance groups when a consumer is added"
                },
                {
                  "name": "groupBuckets",
                  "type": "java.lang.Integer",
                  "desc": "Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead"
                },
                {
                  "name": "groupFirstKey",
                  "type": "java.lang.String",
                  "desc": "Key used to mark a message is first in a group for a consumer"
                },
                {
                  "name": "nonDestructive",
                  "type": "java.lang.Boolean",
                  "desc": "If the queue is non-destructive"
                },
                {
                  "name": "consumersBeforeDispatch",
                  "type": "java.lang.Integer",
                  "desc": "Number of consumers needed before dispatch can start"
                },
                {
                  "name": "delayBeforeDispatch",
                  "type": "java.lang.Long",
                  "desc": "Delay to wait before dispatching if number of consumers before dispatch is not met"
                },
                {
                  "name": "user",
                  "type": "java.lang.String",
                  "desc": "The user associated with this queue"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Update a queue"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "The filter to use on the queue"
                },
                {
                  "name": "maxConsumers",
                  "type": "java.lang.Integer",
                  "desc": "The maximum number of consumers allowed on this queue at any one time"
                },
                {
                  "name": "purgeOnNoConsumers",
                  "type": "java.lang.Boolean",
                  "desc": "Delete this queue when the last consumer disconnects"
                },
                {
                  "name": "exclusive",
                  "type": "java.lang.Boolean",
                  "desc": "If the queue should route exclusively to one consumer"
                },
                {
                  "name": "groupRebalance",
                  "type": "java.lang.Boolean",
                  "desc": "If the queue should rebalance groups when a consumer is added"
                },
                {
                  "name": "groupBuckets",
                  "type": "java.lang.Integer",
                  "desc": "Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead"
                },
                {
                  "name": "nonDestructive",
                  "type": "java.lang.Boolean",
                  "desc": "If the queue is non-destructive"
                },
                {
                  "name": "consumersBeforeDispatch",
                  "type": "java.lang.Integer",
                  "desc": "Number of consumers needed before dispatch can start"
                },
                {
                  "name": "delayBeforeDispatch",
                  "type": "java.lang.Long",
                  "desc": "Delay to wait before dispatching if number of consumers before dispatch is not met"
                },
                {
                  "name": "user",
                  "type": "java.lang.String",
                  "desc": "The user associated with this queue"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Update a queue"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                },
                {
                  "name": "maxConsumers",
                  "type": "java.lang.Integer",
                  "desc": "The maximum number of consumers allowed on this queue at any one time"
                },
                {
                  "name": "purgeOnNoConsumers",
                  "type": "java.lang.Boolean",
                  "desc": "Delete this queue when the last consumer disconnects"
                },
                {
                  "name": "exclusive",
                  "type": "java.lang.Boolean",
                  "desc": "If the queue should route exclusively to one consumer"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Update a queue"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                },
                {
                  "name": "maxConsumers",
                  "type": "java.lang.Integer",
                  "desc": "The maximum number of consumers allowed on this queue at any one time"
                },
                {
                  "name": "purgeOnNoConsumers",
                  "type": "java.lang.Boolean",
                  "desc": "Delete this queue when the last consumer disconnects"
                },
                {
                  "name": "exclusive",
                  "type": "java.lang.Boolean",
                  "desc": "If the queue should route exclusively to one consumer"
                },
                {
                  "name": "user",
                  "type": "java.lang.String",
                  "desc": "The user associated with this queue"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Update a queue"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                },
                {
                  "name": "maxConsumers",
                  "type": "java.lang.Integer",
                  "desc": "The maximum number of consumers allowed on this queue at any one time"
                },
                {
                  "name": "purgeOnNoConsumers",
                  "type": "java.lang.Boolean",
                  "desc": "Delete this queue when the last consumer disconnects"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Update a queue"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "routingType",
                  "type": "java.lang.String",
                  "desc": "The routing type used for this address, MULTICAST or ANYCAST"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "The filter to use on the queue"
                },
                {
                  "name": "maxConsumers",
                  "type": "java.lang.Integer",
                  "desc": "The maximum number of consumers allowed on this queue at any one time"
                },
                {
                  "name": "purgeOnNoConsumers",
                  "type": "java.lang.Boolean",
                  "desc": "Delete this queue when the last consumer disconnects"
                },
                {
                  "name": "exclusive",
                  "type": "java.lang.Boolean",
                  "desc": "If the queue should route exclusively to one consumer"
                },
                {
                  "name": "groupRebalance",
                  "type": "java.lang.Boolean",
                  "desc": "If the queue should rebalance groups when a consumer is added"
                },
                {
                  "name": "groupBuckets",
                  "type": "java.lang.Integer",
                  "desc": "Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead"
                },
                {
                  "name": "groupFirstKey",
                  "type": "java.lang.String",
                  "desc": "Key used to mark a message is first in a group for a consumer"
                },
                {
                  "name": "nonDestructive",
                  "type": "java.lang.Boolean",
                  "desc": "If the queue is non-destructive"
                },
                {
                  "name": "consumersBeforeDispatch",
                  "type": "java.lang.Integer",
                  "desc": "Number of consumers needed before dispatch can start"
                },
                {
                  "name": "delayBeforeDispatch",
                  "type": "java.lang.Long",
                  "desc": "Delay to wait before dispatching if number of consumers before dispatch is not met"
                },
                {
                  "name": "user",
                  "type": "java.lang.String",
                  "desc": "The user associated with this queue"
                },
                {
                  "name": "ringSize",
                  "type": "java.lang.Long",
                  "desc": "the size this queue should maintain according to ring semantics"
                }
              ],
              "ret": "java.lang.String",
              "desc": "Update a queue"
            }
          ],
          "createConnectorService": {
            "args": [
              {
                "name": "name",
                "type": "java.lang.String",
                "desc": "Name of the connector service"
              },
              {
                "name": "factoryClass",
                "type": "java.lang.String",
                "desc": "Class name of the connector service factory"
              },
              {
                "name": "parameters",
                "type": "java.util.Map",
                "desc": "Parameter specific to the connector service"
              }
            ],
            "ret": "void",
            "desc": "Create a connector service"
          },
          "listAllConsumersAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all consumers as a JSON string"
          },
          "listHeuristicRolledBackTransactions": {
            "args": [],
            "ret": "[Ljava.lang.String;",
            "desc": "List transactions which have been heuristically rolled back"
          },
          "closeConnectionsForAddress": {
            "args": [
              {
                "name": "ipAddress",
                "type": "java.lang.String",
                "desc": "an IP address"
              }
            ],
            "ret": "boolean",
            "desc": "Closes all the connections for the given IP Address"
          },
          "listConnections": {
            "args": [
              {
                "name": "options",
                "type": "java.lang.String",
                "desc": "Options"
              },
              {
                "name": "pageNumber",
                "type": "int",
                "desc": "Page Number"
              },
              {
                "name": "pageSize",
                "type": "int",
                "desc": "Page Size"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Search for Connections"
          },
          "listPreparedTransactions": {
            "args": [],
            "ret": "[Ljava.lang.String;",
            "desc": "List all the prepared transaction, sorted by date, oldest first"
          },
          "listAllSessionsAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all sessions as a JSON string"
          },
          "deployQueue": [
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "Filter of the queue"
                },
                {
                  "name": "durable",
                  "type": "boolean",
                  "desc": "Is the queue durable?"
                }
              ],
              "ret": "void",
              "desc": "Deploy a queue"
            },
            {
              "args": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "desc": "Address of the queue"
                },
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue"
                },
                {
                  "name": "filter",
                  "type": "java.lang.String",
                  "desc": "Filter of the queue"
                }
              ],
              "ret": "void",
              "desc": "Deploy a queue"
            }
          ],
          "startBrokerConnection": {
            "args": [
              {
                "name": "name",
                "type": "java.lang.String",
                "desc": "Name of the broker connection to be started"
              }
            ],
            "ret": "void",
            "desc": "Activate a broker connection that is pre configured"
          },
          "getAddressSettingsAsJSON": {
            "args": [
              {
                "name": "addressMatch",
                "type": "java.lang.String",
                "desc": "an address match"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Returns the address settings as a JSON string for an address match"
          },
          "closeConsumerConnectionsForAddress": {
            "args": [
              {
                "name": "address",
                "type": "java.lang.String",
                "desc": "a messaging address"
              }
            ],
            "ret": "boolean",
            "desc": "Closes all the consumer connections for the given messaging address"
          },
          "listBindingsForAddress": {
            "args": [
              {
                "name": "address",
                "type": "java.lang.String",
                "desc": "The address"
              }
            ],
            "ret": "java.lang.String",
            "desc": "Get a list of bindings associated with an address"
          },
          "closeConnectionWithID": {
            "args": [
              {
                "name": "ID",
                "type": "java.lang.String",
                "desc": "The connection ID"
              }
            ],
            "ret": "boolean",
            "desc": "Closes all the connection with the id"
          },
          "freezeReplication": {
            "args": [],
            "ret": "boolean",
            "desc": "Isolate the broker"
          },
          "forceFailover": {
            "args": [],
            "ret": "void",
            "desc": "Force the server to stop and notify clients to failover"
          },
          "listConnectionsAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all connections as a JSON string"
          },
          "destroyQueue": [
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue to destroy"
                },
                {
                  "name": "removeConsumers",
                  "type": "boolean",
                  "desc": "Remove consumers of this queue"
                }
              ],
              "ret": "void",
              "desc": "Destroy a queue"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue to destroy"
                },
                {
                  "name": "removeConsumers",
                  "type": "boolean",
                  "desc": "Remove consumers of this queue"
                },
                {
                  "name": "autoDeleteAddress",
                  "type": "boolean",
                  "desc": "Automatically delete the address if this was the last queue"
                }
              ],
              "ret": "void",
              "desc": "Destroy a queue"
            },
            {
              "args": [
                {
                  "name": "name",
                  "type": "java.lang.String",
                  "desc": "Name of the queue to destroy"
                }
              ],
              "ret": "void",
              "desc": "Destroy a queue"
            }
          ],
          "listPreparedTransactionDetailsAsHTML": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all the prepared transaction, sorted by date, oldest first, with details, in HTML format"
          },
          "listProducersInfoAsJSON": {
            "args": [],
            "ret": "java.lang.String",
            "desc": "List all producers"
          },
          "destroyDivert": {
            "args": [
              {
                "name": "name",
                "type": "java.lang.String",
                "desc": "Name of the divert"
              }
            ],
            "ret": "void",
            "desc": "Destroy a Divert"
          },
          "destroyBridge": {
            "args": [
              {
                "name": "name",
                "type": "java.lang.String",
                "desc": "Name of the bridge"
              }
            ],
            "ret": "void",
            "desc": "Destroy a bridge"
          },
          "getQueueNames": {
            "args": [
              {
                "name": "routingType",
                "type": "java.lang.String",
                "desc": "The routing type, MULTICAST or ANYCAST"
              }
            ],
            "ret": "[Ljava.lang.String;",
            "desc": "Names of the queues created on this server with the given routing-type (i.e. ANYCAST or MULTICAST)"
          },
          "closeConnectionsForUser": {
            "args": [
              {
                "name": "userName",
                "type": "java.lang.String",
                "desc": "a user name"
              }
            ],
            "ret": "boolean",
            "desc": "Closes all the connections for sessions with the given user name"
          },
          "listSessionsAsJSON": {
            "args": [
              {
                "name": "connectionID",
                "type": "java.lang.String",
                "desc": "a connection ID"
              }
            ],
            "ret": "java.lang.String",
            "desc": "List the sessions for the given connectionID as a JSON string"
          },
          "removeSecuritySettings": {
            "args": [
              {
                "name": "addressMatch",
                "type": "java.lang.String",
                "desc": "an address match"
              }
            ],
            "ret": "void",
            "desc": "Remove security settings for an address"
          },
          "destroyConnectorService": {
            "args": [
              {
                "name": "name",
                "type": "java.lang.String",
                "desc": "Name of the connector service"
              }
            ],
            "ret": "void",
            "desc": "Destroy a connector service"
          }
        },
        "attr": {
          "AddressMemoryUsage": {
            "rw": false,
            "type": "long",
            "desc": "Memory used by all the addresses on broker for in-memory messages"
          },
          "ManagementAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Management address of this server"
          },
          "ConnectorServices": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "Names of the connector services on this server"
          },
          "ClusterConnectionNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "N\/A"
          },
          "Clustered": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this server is clustered"
          },
          "JournalMinFiles": {
            "rw": false,
            "type": "int",
            "desc": "Number of journal files to pre-create"
          },
          "JournalCompactMinFiles": {
            "rw": false,
            "type": "int",
            "desc": "Minimal number of journal files before compacting"
          },
          "FailoverOnServerShutdown": {
            "rw": true,
            "type": "boolean",
            "desc": "If clients failover on a server shutdown"
          },
          "PersistDeliveryCountBeforeDelivery": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether delivery count is persisted before messages are delivered to the consumers"
          },
          "MessageExpiryThreadPriority": {
            "rw": false,
            "type": "long",
            "desc": "Priority of the thread used to scan message expiration"
          },
          "ConnectionTTLOverride": {
            "rw": false,
            "type": "long",
            "desc": "Connection time to live"
          },
          "JournalCompactPercentage": {
            "rw": false,
            "type": "int",
            "desc": "Percentage of live data before compacting the journal"
          },
          "PersistenceEnabled": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this server is using persistence and store data"
          },
          "CreateBindingsDir": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether the bindings directory is created on this server startup"
          },
          "ConnectionCount": {
            "rw": false,
            "type": "int",
            "desc": "Number of clients connected to this server"
          },
          "Version": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Server's version"
          },
          "HAPolicy": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Returns the HA Policy of this broker as a String"
          },
          "JournalDirectory": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "File system directory used to store journal log"
          },
          "UptimeMillis": {
            "rw": false,
            "type": "long",
            "desc": "Uptime of this server in milliseconds"
          },
          "DiskStoreUsage": {
            "rw": false,
            "type": "double",
            "desc": "Fraction of total disk store used"
          },
          "ActivationSequence": {
            "rw": false,
            "type": "long",
            "desc": "Activation sequence of this server instance"
          },
          "ManagementNotificationAddress": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Management notification address of this server"
          },
          "DivertNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "Names of the diverts deployed on this server"
          },
          "JournalSyncNonTransactional": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether the journal is synchronized when receiving non-transactional datar"
          },
          "AuthenticationCacheSize": {
            "rw": false,
            "type": "long",
            "desc": "The runtime size of the authentication cache"
          },
          "TotalConnectionCount": {
            "rw": false,
            "type": "long",
            "desc": "Number of clients which have connected to this server since it was started"
          },
          "SharedStore": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this server shares its data store with a corresponding live or backup serve"
          },
          "QueueNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "Names of the queues created on this server"
          },
          "Active": {
            "rw": false,
            "type": "boolean",
            "desc": "Server is active"
          },
          "PagingDirectory": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "File system directory used to store paging files"
          },
          "LargeMessagesDirectory": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "File system directory used to store large messages"
          },
          "JournalBufferSize": {
            "rw": false,
            "type": "int",
            "desc": "Size of the internal buffer on the journal"
          },
          "SecurityInvalidationInterval": {
            "rw": false,
            "type": "long",
            "desc": "Interval time (in milliseconds) to invalidate security credentials"
          },
          "MessageCounterSamplePeriod": {
            "rw": true,
            "type": "long",
            "desc": "Sample period (in milliseconds) to take message counter snapshot"
          },
          "TotalMessagesAdded": {
            "rw": false,
            "type": "long",
            "desc": "Number of messages sent to this server since it was started"
          },
          "TotalConsumerCount": {
            "rw": false,
            "type": "long",
            "desc": "Number of consumers consuming messages from all the queues on this server"
          },
          "BridgeNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "Names of the bridges deployed on this server"
          },
          "WildcardRoutingEnabled": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether wildcard routing is supported by this server"
          },
          "PersistIDCache": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether message ID cache is persisted"
          },
          "AsyncConnectionExecutionEnabled": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether code coming from connection is executed asynchronously or not"
          },
          "TotalMessageCount": {
            "rw": false,
            "type": "long",
            "desc": "Number of messages in all queues on the server"
          },
          "Started": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this server is started"
          },
          "CreateJournalDir": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether the journal directory is created on this server startup"
          },
          "GlobalMaxSize": {
            "rw": false,
            "type": "long",
            "desc": "Global maximum limit for in-memory messages, in bytes"
          },
          "AddressNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "Names of the addresses created on this server"
          },
          "Backup": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether this server is a backup"
          },
          "TotalMessagesAcknowledged": {
            "rw": false,
            "type": "long",
            "desc": "Number of messages acknowledged from all the queues on this server since it was started"
          },
          "JournalBufferTimeout": {
            "rw": false,
            "type": "int",
            "desc": "Timeout (in nanoseconds) used to flush internal buffers on the journal"
          },
          "QueueCount": {
            "rw": false,
            "type": "int",
            "desc": "Number of queues created on this server"
          },
          "JournalPoolFiles": {
            "rw": false,
            "type": "int",
            "desc": "Number of files that would be acceptable to keep on a pool"
          },
          "MaxDiskUsage": {
            "rw": false,
            "type": "int",
            "desc": "Maximum limit for disk use, in percentage"
          },
          "IncomingInterceptorClassNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "List of interceptors used by this server for incoming messages"
          },
          "ReplicaSync": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether the initial replication synchronization process with the backup server is complete"
          },
          "NodeID": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Node ID of this server"
          },
          "ConnectorsAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Connectors configured for this server using JSON serialization"
          },
          "JournalFileSize": {
            "rw": false,
            "type": "int",
            "desc": "Size (in bytes) of each journal files"
          },
          "TransactionTimeout": {
            "rw": false,
            "type": "long",
            "desc": "Timeout (in milliseconds) after which transactions is removed from the resource manager after it was created"
          },
          "MessageCounterEnabled": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether message counter is enabled for this server"
          },
          "OutgoingInterceptorClassNames": {
            "rw": false,
            "type": "[Ljava.lang.String;",
            "desc": "List of interceptors used by this server for outgoing messages"
          },
          "DiskScanPeriod": {
            "rw": false,
            "type": "int",
            "desc": "How often to check for disk space usage, in milliseconds"
          },
          "IDCacheSize": {
            "rw": false,
            "type": "int",
            "desc": "Size of the cache for pre-creating message IDs"
          },
          "Uptime": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Uptime of this server"
          },
          "AddressCount": {
            "rw": false,
            "type": "int",
            "desc": "Number of addresses created on this server"
          },
          "AuthorizationCacheSize": {
            "rw": false,
            "type": "long",
            "desc": "The runtime size of the authorization cache"
          },
          "JournalSyncTransactional": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether the journal is synchronized when receiving transactional data"
          },
          "ScheduledThreadPoolMaxSize": {
            "rw": false,
            "type": "int",
            "desc": "Maximum number of threads in the scheduled thread pool"
          },
          "TransactionTimeoutScanPeriod": {
            "rw": false,
            "type": "long",
            "desc": "Frequency (in milliseconds)  to scan transactions to detect which transactions have timed out"
          },
          "SecurityEnabled": {
            "rw": false,
            "type": "boolean",
            "desc": "Whether security is enabled for this server"
          },
          "BindingsDirectory": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "File system directory used to store bindings"
          },
          "Connectors": {
            "rw": false,
            "type": "[Ljava.lang.Object;",
            "desc": "Connectors configured for this server"
          },
          "JournalMaxIO": {
            "rw": false,
            "type": "int",
            "desc": "Maximum number of write requests that can be in the AIO queue at any given time"
          },
          "AddressMemoryUsagePercentage": {
            "rw": false,
            "type": "int",
            "desc": "Memory used by all the addresses on broker as a percentage of the global-max-size"
          },
          "MessageExpiryScanPeriod": {
            "rw": false,
            "type": "long",
            "desc": "Frequency (in milliseconds)  to scan messages to detect which messages have expired"
          },
          "MessageCounterMaxDayCount": {
            "rw": true,
            "type": "int",
            "desc": "Maximum number of days kept in memory for message counter"
          },
          "JournalType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Type of journal used by this server"
          },
          "ThreadPoolMaxSize": {
            "rw": false,
            "type": "int",
            "desc": "Maximum number of threads in the thread pool"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "broker=\"amq-broker\",component=acceptors,name=\"scaleDown\"": {
        "op": {
          "reload": {
            "args": [],
            "ret": "void",
            "desc": "Re-create the acceptor with the existing configuration values. Useful, for example, for reloading key\/trust stores on acceptors which support SSL."
          },
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "stops this component"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "starts this component"
          }
        },
        "attr": {
          "FactoryClassName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "class name of the AcceptorFactory implementation used by this acceptor"
          },
          "Started": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this component is started"
          },
          "Parameters": {
            "rw": false,
            "type": "java.util.Map",
            "desc": "parameters used to configure this acceptor"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "name of the acceptor"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "broker=\"amq-broker\",component=broadcast-groups,name=\"my-broadcast-group\"": {
        "op": {
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "stops this component"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "starts this component"
          }
        },
        "attr": {
          "Started": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this component is started"
          },
          "FileContents": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Returns the contents of the jgroups file"
          },
          "ChannelName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Returns jgroups channel name"
          },
          "ConnectorPairs": {
            "rw": false,
            "type": "[Ljava.lang.Object;",
            "desc": "pairs of live-backup connectors that are broadcasted by this broadcast group"
          },
          "BroadcastPeriod": {
            "rw": false,
            "type": "long",
            "desc": "period used by this broadcast group"
          },
          "File": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Returns the jgroups file name"
          },
          "ConnectorPairsAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "pairs of live-backup connectors that are broadcasted by this broadcast group using JSON serialization"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "name of this broadcast group"
          }
        },
        "desc": "Information on the management interface of the MBean"
      },
      "broker=\"amq-broker\",component=cluster-connections,name=\"my-cluster\"": {
        "op": {
          "stop": {
            "args": [],
            "ret": "void",
            "desc": "stops this component"
          },
          "getBridgeMetrics": {
            "args": [
              {
                "name": "p 1",
                "type": "java.lang.String",
                "desc": "parameter 1"
              }
            ],
            "ret": "java.util.Map",
            "desc": "getBridgeMetrics"
          },
          "start": {
            "args": [],
            "ret": "void",
            "desc": "starts this component"
          }
        },
        "attr": {
          "Started": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this component is started"
          },
          "Address": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "address used by this cluster connection"
          },
          "MessageLoadBalancingType": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "type of message load balancing strategy this bridge will use"
          },
          "MessagesAcknowledged": {
            "rw": false,
            "type": "long",
            "desc": "The messagesAcknowledged counter is the number of messages actually received by a remote broker for all bridges in this cluster connection"
          },
          "Topology": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "Topology that this Cluster Connection knows about"
          },
          "MaxHops": {
            "rw": false,
            "type": "int",
            "desc": "maximum number of hops used by this cluster connection"
          },
          "Nodes": {
            "rw": false,
            "type": "java.util.Map",
            "desc": "map of the nodes connected to this cluster connection (keys are node IDs, values are the addresses used to connect to the nodes)"
          },
          "Name": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "name of this cluster connection"
          },
          "DuplicateDetection": {
            "rw": false,
            "type": "boolean",
            "desc": "whether this cluster connection use duplicate detection"
          },
          "DiscoveryGroupName": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "name of the discovery group used by this cluster connection"
          },
          "Metrics": {
            "rw": false,
            "type": "java.util.Map",
            "desc": "The metrics for this cluster connection. The messagesPendingAcknowledgement counter is incremented when any bridge in the cluster connection has forwarded a message and is waiting acknowledgement from the other broker. The messagesAcknowledged counter is the number of messages actually received by a remote broker for all bridges in this cluster connection"
          },
          "MessagesPendingAcknowledgement": {
            "rw": false,
            "type": "long",
            "desc": "The messagesPendingAcknowledgement counter is incremented when any bridge in the cluster connection has forwarded a message and is waiting acknowledgement from the other broker. (aggregate over all bridges)"
          },
          "StaticConnectors": {
            "rw": false,
            "type": "[Ljava.lang.Object;",
            "desc": "list of static connectors"
          },
          "NodeID": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "node ID used by this cluster connection"
          },
          "RetryInterval": {
            "rw": false,
            "type": "long",
            "desc": "connection retry interval used by this cluster connection"
          },
          "StaticConnectorsAsJSON": {
            "rw": false,
            "type": "java.lang.String",
            "desc": "list of static connectors as JSON"
          }
        },
        "desc": "Information on the management interface of the MBean"
      }
    }
  },
  "timestamp": 1587557519,
  "status": 200
}
